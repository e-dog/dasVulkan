#include "dasVulkan.h"

namespace das {

template <typename TT>
__forceinline TypeDeclPtr makeFieldType(const ModuleLibrary &lib)
{
  auto t = makeType<TT>(lib);
  t->constant = false;
  return t;
}

smart_ptr<Function> makeCtor(const smart_ptr<Function> &f)
{
  f->modifyExternal=true;
  f->isTypeConstructor=true;
  f->copyOnReturn = true;
  f->moveOnReturn = true;
  return f;
}

/* VOLK_GENERATE_DECL_ANN */
#if defined(VK_KHR_acceleration_structure)
struct VkAabbPositionsKHRAnnotation : ManagedStructureAnnotation<VkAabbPositionsKHR> {
  VkAabbPositionsKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAabbPositionsKHR", lib) {
    addFieldEx("minX", "minX", offsetof(ManagedType, minX), das::makeFieldType<decltype(das::declval<ManagedType>().minX)>(*mlib));
    addFieldEx("minY", "minY", offsetof(ManagedType, minY), das::makeFieldType<decltype(das::declval<ManagedType>().minY)>(*mlib));
    addFieldEx("minZ", "minZ", offsetof(ManagedType, minZ), das::makeFieldType<decltype(das::declval<ManagedType>().minZ)>(*mlib));
    addFieldEx("maxX", "maxX", offsetof(ManagedType, maxX), das::makeFieldType<decltype(das::declval<ManagedType>().maxX)>(*mlib));
    addFieldEx("maxY", "maxY", offsetof(ManagedType, maxY), das::makeFieldType<decltype(das::declval<ManagedType>().maxY)>(*mlib));
    addFieldEx("maxZ", "maxZ", offsetof(ManagedType, maxZ), das::makeFieldType<decltype(das::declval<ManagedType>().maxZ)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceOrHostAddressConstKHRAnnotation : ManagedStructureAnnotation<VkDeviceOrHostAddressConstKHR> {
  VkDeviceOrHostAddressConstKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceOrHostAddressConstKHR", lib) {
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("hostAddress", "hostAddress", offsetof(ManagedType, hostAddress), das::makeFieldType<decltype(das::declval<ManagedType>().hostAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureGeometryAabbsDataKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryAabbsDataKHR> {
  VkAccelerationStructureGeometryAabbsDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryAabbsDataKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureGeometryInstancesDataKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryInstancesDataKHR> {
  VkAccelerationStructureGeometryInstancesDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryInstancesDataKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("arrayOfPointers", "arrayOfPointers", offsetof(ManagedType, arrayOfPointers), das::makeFieldType<decltype(das::declval<ManagedType>().arrayOfPointers)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureGeometryTrianglesDataKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryTrianglesDataKHR> {
  VkAccelerationStructureGeometryTrianglesDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryTrianglesDataKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexFormat", "vertexFormat", offsetof(ManagedType, vertexFormat), das::makeFieldType<decltype(das::declval<ManagedType>().vertexFormat)>(*mlib));
    addFieldEx("vertexData", "vertexData", offsetof(ManagedType, vertexData), das::makeFieldType<decltype(das::declval<ManagedType>().vertexData)>(*mlib));
    addFieldEx("vertexStride", "vertexStride", offsetof(ManagedType, vertexStride), das::makeFieldType<decltype(das::declval<ManagedType>().vertexStride)>(*mlib));
    addFieldEx("maxVertex", "maxVertex", offsetof(ManagedType, maxVertex), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertex)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
    addFieldEx("indexData", "indexData", offsetof(ManagedType, indexData), das::makeFieldType<decltype(das::declval<ManagedType>().indexData)>(*mlib));
    addFieldEx("transformData", "transformData", offsetof(ManagedType, transformData), das::makeFieldType<decltype(das::declval<ManagedType>().transformData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureGeometryDataKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryDataKHR> {
  VkAccelerationStructureGeometryDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryDataKHR", lib) {
    addFieldEx("triangles", "triangles", offsetof(ManagedType, triangles), das::makeFieldType<decltype(das::declval<ManagedType>().triangles)>(*mlib));
    addFieldEx("aabbs", "aabbs", offsetof(ManagedType, aabbs), das::makeFieldType<decltype(das::declval<ManagedType>().aabbs)>(*mlib));
    addFieldEx("instances", "instances", offsetof(ManagedType, instances), das::makeFieldType<decltype(das::declval<ManagedType>().instances)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureGeometryKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryKHR> {
  VkAccelerationStructureGeometryKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("geometryType", "geometryType", offsetof(ManagedType, geometryType), das::makeFieldType<decltype(das::declval<ManagedType>().geometryType)>(*mlib));
    addFieldEx("geometry", "geometry", offsetof(ManagedType, geometry), das::makeFieldType<decltype(das::declval<ManagedType>().geometry)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceOrHostAddressKHRAnnotation : ManagedStructureAnnotation<VkDeviceOrHostAddressKHR> {
  VkDeviceOrHostAddressKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceOrHostAddressKHR", lib) {
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("hostAddress", "hostAddress", offsetof(ManagedType, hostAddress), das::makeFieldType<decltype(das::declval<ManagedType>().hostAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureBuildGeometryInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureBuildGeometryInfoKHR> {
  VkAccelerationStructureBuildGeometryInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureBuildGeometryInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
    addFieldEx("srcAccelerationStructure", "srcAccelerationStructure", offsetof(ManagedType, srcAccelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccelerationStructure)>(*mlib));
    addFieldEx("dstAccelerationStructure", "dstAccelerationStructure", offsetof(ManagedType, dstAccelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccelerationStructure)>(*mlib));
    addFieldEx("geometryCount", "geometryCount", offsetof(ManagedType, geometryCount), das::makeFieldType<decltype(das::declval<ManagedType>().geometryCount)>(*mlib));
    addFieldEx("pGeometries", "pGeometries", offsetof(ManagedType, pGeometries), das::makeFieldType<decltype(das::declval<ManagedType>().pGeometries)>(*mlib));
    addFieldEx("ppGeometries", "ppGeometries", offsetof(ManagedType, ppGeometries), das::makeFieldType<decltype(das::declval<ManagedType>().ppGeometries)>(*mlib));
    addFieldEx("scratchData", "scratchData", offsetof(ManagedType, scratchData), das::makeFieldType<decltype(das::declval<ManagedType>().scratchData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureBuildRangeInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureBuildRangeInfoKHR> {
  VkAccelerationStructureBuildRangeInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureBuildRangeInfoKHR", lib) {
    addFieldEx("primitiveCount", "primitiveCount", offsetof(ManagedType, primitiveCount), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveCount)>(*mlib));
    addFieldEx("primitiveOffset", "primitiveOffset", offsetof(ManagedType, primitiveOffset), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveOffset)>(*mlib));
    addFieldEx("firstVertex", "firstVertex", offsetof(ManagedType, firstVertex), das::makeFieldType<decltype(das::declval<ManagedType>().firstVertex)>(*mlib));
    addFieldEx("transformOffset", "transformOffset", offsetof(ManagedType, transformOffset), das::makeFieldType<decltype(das::declval<ManagedType>().transformOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureBuildSizesInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureBuildSizesInfoKHR> {
  VkAccelerationStructureBuildSizesInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureBuildSizesInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructureSize", "accelerationStructureSize", offsetof(ManagedType, accelerationStructureSize), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureSize)>(*mlib));
    addFieldEx("updateScratchSize", "updateScratchSize", offsetof(ManagedType, updateScratchSize), das::makeFieldType<decltype(das::declval<ManagedType>().updateScratchSize)>(*mlib));
    addFieldEx("buildScratchSize", "buildScratchSize", offsetof(ManagedType, buildScratchSize), das::makeFieldType<decltype(das::declval<ManagedType>().buildScratchSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
struct VkAccelerationStructureCaptureDescriptorDataInfoEXTAnnotation : ManagedStructureAnnotation<VkAccelerationStructureCaptureDescriptorDataInfoEXT> {
  VkAccelerationStructureCaptureDescriptorDataInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureCaptureDescriptorDataInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
    addFieldEx("accelerationStructureNV", "accelerationStructureNV", offsetof(ManagedType, accelerationStructureNV), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureNV)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_KHR_acceleration_structure)
struct VkAccelerationStructureCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureCreateInfoKHR> {
  VkAccelerationStructureCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("createFlags", "createFlags", offsetof(ManagedType, createFlags), das::makeFieldType<decltype(das::declval<ManagedType>().createFlags)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing)
struct VkGeometryAABBNVAnnotation : ManagedStructureAnnotation<VkGeometryAABBNV> {
  VkGeometryAABBNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeometryAABBNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("aabbData", "aabbData", offsetof(ManagedType, aabbData), das::makeFieldType<decltype(das::declval<ManagedType>().aabbData)>(*mlib));
    addFieldEx("numAABBs", "numAABBs", offsetof(ManagedType, numAABBs), das::makeFieldType<decltype(das::declval<ManagedType>().numAABBs)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGeometryTrianglesNVAnnotation : ManagedStructureAnnotation<VkGeometryTrianglesNV> {
  VkGeometryTrianglesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeometryTrianglesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexData", "vertexData", offsetof(ManagedType, vertexData), das::makeFieldType<decltype(das::declval<ManagedType>().vertexData)>(*mlib));
    addFieldEx("vertexOffset", "vertexOffset", offsetof(ManagedType, vertexOffset), das::makeFieldType<decltype(das::declval<ManagedType>().vertexOffset)>(*mlib));
    addFieldEx("vertexCount", "vertexCount", offsetof(ManagedType, vertexCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexCount)>(*mlib));
    addFieldEx("vertexStride", "vertexStride", offsetof(ManagedType, vertexStride), das::makeFieldType<decltype(das::declval<ManagedType>().vertexStride)>(*mlib));
    addFieldEx("vertexFormat", "vertexFormat", offsetof(ManagedType, vertexFormat), das::makeFieldType<decltype(das::declval<ManagedType>().vertexFormat)>(*mlib));
    addFieldEx("indexData", "indexData", offsetof(ManagedType, indexData), das::makeFieldType<decltype(das::declval<ManagedType>().indexData)>(*mlib));
    addFieldEx("indexOffset", "indexOffset", offsetof(ManagedType, indexOffset), das::makeFieldType<decltype(das::declval<ManagedType>().indexOffset)>(*mlib));
    addFieldEx("indexCount", "indexCount", offsetof(ManagedType, indexCount), das::makeFieldType<decltype(das::declval<ManagedType>().indexCount)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
    addFieldEx("transformData", "transformData", offsetof(ManagedType, transformData), das::makeFieldType<decltype(das::declval<ManagedType>().transformData)>(*mlib));
    addFieldEx("transformOffset", "transformOffset", offsetof(ManagedType, transformOffset), das::makeFieldType<decltype(das::declval<ManagedType>().transformOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGeometryDataNVAnnotation : ManagedStructureAnnotation<VkGeometryDataNV> {
  VkGeometryDataNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeometryDataNV", lib) {
    addFieldEx("triangles", "triangles", offsetof(ManagedType, triangles), das::makeFieldType<decltype(das::declval<ManagedType>().triangles)>(*mlib));
    addFieldEx("aabbs", "aabbs", offsetof(ManagedType, aabbs), das::makeFieldType<decltype(das::declval<ManagedType>().aabbs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGeometryNVAnnotation : ManagedStructureAnnotation<VkGeometryNV> {
  VkGeometryNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeometryNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("geometryType", "geometryType", offsetof(ManagedType, geometryType), das::makeFieldType<decltype(das::declval<ManagedType>().geometryType)>(*mlib));
    addFieldEx("geometry", "geometry", offsetof(ManagedType, geometry), das::makeFieldType<decltype(das::declval<ManagedType>().geometry)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureInfoNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureInfoNV> {
  VkAccelerationStructureInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("instanceCount", "instanceCount", offsetof(ManagedType, instanceCount), das::makeFieldType<decltype(das::declval<ManagedType>().instanceCount)>(*mlib));
    addFieldEx("geometryCount", "geometryCount", offsetof(ManagedType, geometryCount), das::makeFieldType<decltype(das::declval<ManagedType>().geometryCount)>(*mlib));
    addFieldEx("pGeometries", "pGeometries", offsetof(ManagedType, pGeometries), das::makeFieldType<decltype(das::declval<ManagedType>().pGeometries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureCreateInfoNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureCreateInfoNV> {
  VkAccelerationStructureCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("compactedSize", "compactedSize", offsetof(ManagedType, compactedSize), das::makeFieldType<decltype(das::declval<ManagedType>().compactedSize)>(*mlib));
    addFieldEx("info", "info", offsetof(ManagedType, info), das::makeFieldType<decltype(das::declval<ManagedType>().info)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_KHR_acceleration_structure)
struct VkAccelerationStructureDeviceAddressInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureDeviceAddressInfoKHR> {
  VkAccelerationStructureDeviceAddressInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureDeviceAddressInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing_motion_blur)
struct VkAccelerationStructureGeometryMotionTrianglesDataNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureGeometryMotionTrianglesDataNV> {
  VkAccelerationStructureGeometryMotionTrianglesDataNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureGeometryMotionTrianglesDataNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexData", "vertexData", offsetof(ManagedType, vertexData), das::makeFieldType<decltype(das::declval<ManagedType>().vertexData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_NV_ray_tracing)
struct VkAccelerationStructureMemoryRequirementsInfoNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureMemoryRequirementsInfoNV> {
  VkAccelerationStructureMemoryRequirementsInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureMemoryRequirementsInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_ray_tracing_motion_blur)
struct VkAccelerationStructureMotionInfoNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureMotionInfoNV> {
  VkAccelerationStructureMotionInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureMotionInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxInstances", "maxInstances", offsetof(ManagedType, maxInstances), das::makeFieldType<decltype(das::declval<ManagedType>().maxInstances)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureMotionInstanceDataNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureMotionInstanceDataNV> {
  VkAccelerationStructureMotionInstanceDataNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureMotionInstanceDataNV", lib) {
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAccelerationStructureMotionInstanceNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureMotionInstanceNV> {
  VkAccelerationStructureMotionInstanceNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureMotionInstanceNV", lib) {
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_EXT_opacity_micromap)
struct VkMicromapUsageEXTAnnotation : ManagedStructureAnnotation<VkMicromapUsageEXT> {
  VkMicromapUsageEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapUsageEXT", lib) {
    addFieldEx("count", "count", offsetof(ManagedType, count), das::makeFieldType<decltype(das::declval<ManagedType>().count)>(*mlib));
    addFieldEx("subdivisionLevel", "subdivisionLevel", offsetof(ManagedType, subdivisionLevel), das::makeFieldType<decltype(das::declval<ManagedType>().subdivisionLevel)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NV_displacement_micromap)
struct VkAccelerationStructureTrianglesDisplacementMicromapNVAnnotation : ManagedStructureAnnotation<VkAccelerationStructureTrianglesDisplacementMicromapNV> {
  VkAccelerationStructureTrianglesDisplacementMicromapNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureTrianglesDisplacementMicromapNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displacementBiasAndScaleFormat", "displacementBiasAndScaleFormat", offsetof(ManagedType, displacementBiasAndScaleFormat), das::makeFieldType<decltype(das::declval<ManagedType>().displacementBiasAndScaleFormat)>(*mlib));
    addFieldEx("displacementVectorFormat", "displacementVectorFormat", offsetof(ManagedType, displacementVectorFormat), das::makeFieldType<decltype(das::declval<ManagedType>().displacementVectorFormat)>(*mlib));
    addFieldEx("displacementBiasAndScaleBuffer", "displacementBiasAndScaleBuffer", offsetof(ManagedType, displacementBiasAndScaleBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().displacementBiasAndScaleBuffer)>(*mlib));
    addFieldEx("displacementBiasAndScaleStride", "displacementBiasAndScaleStride", offsetof(ManagedType, displacementBiasAndScaleStride), das::makeFieldType<decltype(das::declval<ManagedType>().displacementBiasAndScaleStride)>(*mlib));
    addFieldEx("displacementVectorBuffer", "displacementVectorBuffer", offsetof(ManagedType, displacementVectorBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().displacementVectorBuffer)>(*mlib));
    addFieldEx("displacementVectorStride", "displacementVectorStride", offsetof(ManagedType, displacementVectorStride), das::makeFieldType<decltype(das::declval<ManagedType>().displacementVectorStride)>(*mlib));
    addFieldEx("displacedMicromapPrimitiveFlags", "displacedMicromapPrimitiveFlags", offsetof(ManagedType, displacedMicromapPrimitiveFlags), das::makeFieldType<decltype(das::declval<ManagedType>().displacedMicromapPrimitiveFlags)>(*mlib));
    addFieldEx("displacedMicromapPrimitiveFlagsStride", "displacedMicromapPrimitiveFlagsStride", offsetof(ManagedType, displacedMicromapPrimitiveFlagsStride), das::makeFieldType<decltype(das::declval<ManagedType>().displacedMicromapPrimitiveFlagsStride)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
    addFieldEx("indexBuffer", "indexBuffer", offsetof(ManagedType, indexBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().indexBuffer)>(*mlib));
    addFieldEx("indexStride", "indexStride", offsetof(ManagedType, indexStride), das::makeFieldType<decltype(das::declval<ManagedType>().indexStride)>(*mlib));
    addFieldEx("baseTriangle", "baseTriangle", offsetof(ManagedType, baseTriangle), das::makeFieldType<decltype(das::declval<ManagedType>().baseTriangle)>(*mlib));
    addFieldEx("usageCountsCount", "usageCountsCount", offsetof(ManagedType, usageCountsCount), das::makeFieldType<decltype(das::declval<ManagedType>().usageCountsCount)>(*mlib));
    addFieldEx("pUsageCounts", "pUsageCounts", offsetof(ManagedType, pUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().pUsageCounts)>(*mlib));
    addFieldEx("ppUsageCounts", "ppUsageCounts", offsetof(ManagedType, ppUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().ppUsageCounts)>(*mlib));
    addFieldEx("micromap", "micromap", offsetof(ManagedType, micromap), das::makeFieldType<decltype(das::declval<ManagedType>().micromap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_displacement_micromap) */
#if defined(VK_EXT_opacity_micromap)
struct VkAccelerationStructureTrianglesOpacityMicromapEXTAnnotation : ManagedStructureAnnotation<VkAccelerationStructureTrianglesOpacityMicromapEXT> {
  VkAccelerationStructureTrianglesOpacityMicromapEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureTrianglesOpacityMicromapEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
    addFieldEx("indexBuffer", "indexBuffer", offsetof(ManagedType, indexBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().indexBuffer)>(*mlib));
    addFieldEx("indexStride", "indexStride", offsetof(ManagedType, indexStride), das::makeFieldType<decltype(das::declval<ManagedType>().indexStride)>(*mlib));
    addFieldEx("baseTriangle", "baseTriangle", offsetof(ManagedType, baseTriangle), das::makeFieldType<decltype(das::declval<ManagedType>().baseTriangle)>(*mlib));
    addFieldEx("usageCountsCount", "usageCountsCount", offsetof(ManagedType, usageCountsCount), das::makeFieldType<decltype(das::declval<ManagedType>().usageCountsCount)>(*mlib));
    addFieldEx("pUsageCounts", "pUsageCounts", offsetof(ManagedType, pUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().pUsageCounts)>(*mlib));
    addFieldEx("ppUsageCounts", "ppUsageCounts", offsetof(ManagedType, ppUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().ppUsageCounts)>(*mlib));
    addFieldEx("micromap", "micromap", offsetof(ManagedType, micromap), das::makeFieldType<decltype(das::declval<ManagedType>().micromap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_KHR_acceleration_structure)
struct VkAccelerationStructureVersionInfoKHRAnnotation : ManagedStructureAnnotation<VkAccelerationStructureVersionInfoKHR> {
  VkAccelerationStructureVersionInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAccelerationStructureVersionInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pVersionData", "pVersionData", offsetof(ManagedType, pVersionData), das::makeFieldType<decltype(das::declval<ManagedType>().pVersionData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkAcquireNextImageInfoKHRAnnotation : ManagedStructureAnnotation<VkAcquireNextImageInfoKHR> {
  VkAcquireNextImageInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAcquireNextImageInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchain", "swapchain", offsetof(ManagedType, swapchain), das::makeFieldType<decltype(das::declval<ManagedType>().swapchain)>(*mlib));
    addFieldEx("timeout", "timeout", offsetof(ManagedType, timeout), das::makeFieldType<decltype(das::declval<ManagedType>().timeout)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("fence", "fence", offsetof(ManagedType, fence), das::makeFieldType<decltype(das::declval<ManagedType>().fence)>(*mlib));
    addFieldEx("deviceMask", "deviceMask", offsetof(ManagedType, deviceMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_KHR_performance_query)
struct VkAcquireProfilingLockInfoKHRAnnotation : ManagedStructureAnnotation<VkAcquireProfilingLockInfoKHR> {
  VkAcquireProfilingLockInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAcquireProfilingLockInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("timeout", "timeout", offsetof(ManagedType, timeout), das::makeFieldType<decltype(das::declval<ManagedType>().timeout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_VERSION_1_0)
struct VkAllocationCallbacksAnnotation : ManagedStructureAnnotation<VkAllocationCallbacks> {
  VkAllocationCallbacksAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAllocationCallbacks", lib) {
    addFieldEx("pUserData", "pUserData", offsetof(ManagedType, pUserData), das::makeFieldType<decltype(das::declval<ManagedType>().pUserData)>(*mlib));
    addFieldEx("pfnAllocation", "pfnAllocation", offsetof(ManagedType, pfnAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().pfnAllocation)>(*mlib));
    addFieldEx("pfnReallocation", "pfnReallocation", offsetof(ManagedType, pfnReallocation), das::makeFieldType<decltype(das::declval<ManagedType>().pfnReallocation)>(*mlib));
    addFieldEx("pfnFree", "pfnFree", offsetof(ManagedType, pfnFree), das::makeFieldType<decltype(das::declval<ManagedType>().pfnFree)>(*mlib));
    addFieldEx("pfnInternalAllocation", "pfnInternalAllocation", offsetof(ManagedType, pfnInternalAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().pfnInternalAllocation)>(*mlib));
    addFieldEx("pfnInternalFree", "pfnInternalFree", offsetof(ManagedType, pfnInternalFree), das::makeFieldType<decltype(das::declval<ManagedType>().pfnInternalFree)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_SEC_amigo_profiling)
struct VkAmigoProfilingSubmitInfoSECAnnotation : ManagedStructureAnnotation<VkAmigoProfilingSubmitInfoSEC> {
  VkAmigoProfilingSubmitInfoSECAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAmigoProfilingSubmitInfoSEC", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("firstDrawTimestamp", "firstDrawTimestamp", offsetof(ManagedType, firstDrawTimestamp), das::makeFieldType<decltype(das::declval<ManagedType>().firstDrawTimestamp)>(*mlib));
    addFieldEx("swapBufferTimestamp", "swapBufferTimestamp", offsetof(ManagedType, swapBufferTimestamp), das::makeFieldType<decltype(das::declval<ManagedType>().swapBufferTimestamp)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_SEC_amigo_profiling) */
#if defined(VK_VERSION_1_0)
struct VkComponentMappingAnnotation : ManagedStructureAnnotation<VkComponentMapping> {
  VkComponentMappingAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkComponentMapping", lib) {
    addFieldEx("r", "r", offsetof(ManagedType, r), das::makeFieldType<decltype(das::declval<ManagedType>().r)>(*mlib));
    addFieldEx("g", "g", offsetof(ManagedType, g), das::makeFieldType<decltype(das::declval<ManagedType>().g)>(*mlib));
    addFieldEx("b", "b", offsetof(ManagedType, b), das::makeFieldType<decltype(das::declval<ManagedType>().b)>(*mlib));
    addFieldEx("a", "a", offsetof(ManagedType, a), das::makeFieldType<decltype(das::declval<ManagedType>().a)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
struct VkAndroidHardwareBufferFormatProperties2ANDROIDAnnotation : ManagedStructureAnnotation<VkAndroidHardwareBufferFormatProperties2ANDROID> {
  VkAndroidHardwareBufferFormatProperties2ANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidHardwareBufferFormatProperties2ANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("externalFormat", "externalFormat", offsetof(ManagedType, externalFormat), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormat)>(*mlib));
    addFieldEx("formatFeatures", "formatFeatures", offsetof(ManagedType, formatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().formatFeatures)>(*mlib));
    addFieldEx("samplerYcbcrConversionComponents", "samplerYcbcrConversionComponents", offsetof(ManagedType, samplerYcbcrConversionComponents), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversionComponents)>(*mlib));
    addFieldEx("suggestedYcbcrModel", "suggestedYcbcrModel", offsetof(ManagedType, suggestedYcbcrModel), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrModel)>(*mlib));
    addFieldEx("suggestedYcbcrRange", "suggestedYcbcrRange", offsetof(ManagedType, suggestedYcbcrRange), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrRange)>(*mlib));
    addFieldEx("suggestedXChromaOffset", "suggestedXChromaOffset", offsetof(ManagedType, suggestedXChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedXChromaOffset)>(*mlib));
    addFieldEx("suggestedYChromaOffset", "suggestedYChromaOffset", offsetof(ManagedType, suggestedYChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYChromaOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
struct VkAndroidHardwareBufferFormatPropertiesANDROIDAnnotation : ManagedStructureAnnotation<VkAndroidHardwareBufferFormatPropertiesANDROID> {
  VkAndroidHardwareBufferFormatPropertiesANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidHardwareBufferFormatPropertiesANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("externalFormat", "externalFormat", offsetof(ManagedType, externalFormat), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormat)>(*mlib));
    addFieldEx("formatFeatures", "formatFeatures", offsetof(ManagedType, formatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().formatFeatures)>(*mlib));
    addFieldEx("samplerYcbcrConversionComponents", "samplerYcbcrConversionComponents", offsetof(ManagedType, samplerYcbcrConversionComponents), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversionComponents)>(*mlib));
    addFieldEx("suggestedYcbcrModel", "suggestedYcbcrModel", offsetof(ManagedType, suggestedYcbcrModel), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrModel)>(*mlib));
    addFieldEx("suggestedYcbcrRange", "suggestedYcbcrRange", offsetof(ManagedType, suggestedYcbcrRange), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrRange)>(*mlib));
    addFieldEx("suggestedXChromaOffset", "suggestedXChromaOffset", offsetof(ManagedType, suggestedXChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedXChromaOffset)>(*mlib));
    addFieldEx("suggestedYChromaOffset", "suggestedYChromaOffset", offsetof(ManagedType, suggestedYChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYChromaOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_ANDROID_external_format_resolve)
struct VkAndroidHardwareBufferFormatResolvePropertiesANDROIDAnnotation : ManagedStructureAnnotation<VkAndroidHardwareBufferFormatResolvePropertiesANDROID> {
  VkAndroidHardwareBufferFormatResolvePropertiesANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidHardwareBufferFormatResolvePropertiesANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorAttachmentFormat", "colorAttachmentFormat", offsetof(ManagedType, colorAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_format_resolve) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
struct VkAndroidHardwareBufferPropertiesANDROIDAnnotation : ManagedStructureAnnotation<VkAndroidHardwareBufferPropertiesANDROID> {
  VkAndroidHardwareBufferPropertiesANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidHardwareBufferPropertiesANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("allocationSize", "allocationSize", offsetof(ManagedType, allocationSize), das::makeFieldType<decltype(das::declval<ManagedType>().allocationSize)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAndroidHardwareBufferUsageANDROIDAnnotation : ManagedStructureAnnotation<VkAndroidHardwareBufferUsageANDROID> {
  VkAndroidHardwareBufferUsageANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidHardwareBufferUsageANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("androidHardwareBufferUsage", "androidHardwareBufferUsage", offsetof(ManagedType, androidHardwareBufferUsage), das::makeFieldType<decltype(das::declval<ManagedType>().androidHardwareBufferUsage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_android_surface)
struct VkAndroidSurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkAndroidSurfaceCreateInfoKHR> {
  VkAndroidSurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAndroidSurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("window", "window", offsetof(ManagedType, window), das::makeFieldType<decltype(das::declval<ManagedType>().window)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_AMD_anti_lag)
struct VkAntiLagPresentationInfoAMDAnnotation : ManagedStructureAnnotation<VkAntiLagPresentationInfoAMD> {
  VkAntiLagPresentationInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAntiLagPresentationInfoAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("frameIndex", "frameIndex", offsetof(ManagedType, frameIndex), das::makeFieldType<decltype(das::declval<ManagedType>().frameIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAntiLagDataAMDAnnotation : ManagedStructureAnnotation<VkAntiLagDataAMD> {
  VkAntiLagDataAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAntiLagDataAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
    addFieldEx("maxFPS", "maxFPS", offsetof(ManagedType, maxFPS), das::makeFieldType<decltype(das::declval<ManagedType>().maxFPS)>(*mlib));
    addFieldEx("pPresentationInfo", "pPresentationInfo", offsetof(ManagedType, pPresentationInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentationInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_anti_lag) */
#if defined(VK_VERSION_1_0)
struct VkApplicationInfoAnnotation : ManagedStructureAnnotation<VkApplicationInfo> {
  VkApplicationInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkApplicationInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pApplicationName", "pApplicationName", offsetof(ManagedType, pApplicationName), das::makeFieldType<decltype(das::declval<ManagedType>().pApplicationName)>(*mlib));
    addFieldEx("applicationVersion", "applicationVersion", offsetof(ManagedType, applicationVersion), das::makeFieldType<decltype(das::declval<ManagedType>().applicationVersion)>(*mlib));
    addFieldEx("pEngineName", "pEngineName", offsetof(ManagedType, pEngineName), das::makeFieldType<decltype(das::declval<ManagedType>().pEngineName)>(*mlib));
    addFieldEx("engineVersion", "engineVersion", offsetof(ManagedType, engineVersion), das::makeFieldType<decltype(das::declval<ManagedType>().engineVersion)>(*mlib));
    addFieldEx("apiVersion", "apiVersion", offsetof(ManagedType, apiVersion), das::makeFieldType<decltype(das::declval<ManagedType>().apiVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAttachmentDescriptionAnnotation : ManagedStructureAnnotation<VkAttachmentDescription> {
  VkAttachmentDescriptionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentDescription", lib) {
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("samples", "samples", offsetof(ManagedType, samples), das::makeFieldType<decltype(das::declval<ManagedType>().samples)>(*mlib));
    addFieldEx("loadOp", "loadOp", offsetof(ManagedType, loadOp), das::makeFieldType<decltype(das::declval<ManagedType>().loadOp)>(*mlib));
    addFieldEx("storeOp", "storeOp", offsetof(ManagedType, storeOp), das::makeFieldType<decltype(das::declval<ManagedType>().storeOp)>(*mlib));
    addFieldEx("stencilLoadOp", "stencilLoadOp", offsetof(ManagedType, stencilLoadOp), das::makeFieldType<decltype(das::declval<ManagedType>().stencilLoadOp)>(*mlib));
    addFieldEx("stencilStoreOp", "stencilStoreOp", offsetof(ManagedType, stencilStoreOp), das::makeFieldType<decltype(das::declval<ManagedType>().stencilStoreOp)>(*mlib));
    addFieldEx("initialLayout", "initialLayout", offsetof(ManagedType, initialLayout), das::makeFieldType<decltype(das::declval<ManagedType>().initialLayout)>(*mlib));
    addFieldEx("finalLayout", "finalLayout", offsetof(ManagedType, finalLayout), das::makeFieldType<decltype(das::declval<ManagedType>().finalLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
struct VkAttachmentDescription2Annotation : ManagedStructureAnnotation<VkAttachmentDescription2> {
  VkAttachmentDescription2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentDescription2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("samples", "samples", offsetof(ManagedType, samples), das::makeFieldType<decltype(das::declval<ManagedType>().samples)>(*mlib));
    addFieldEx("loadOp", "loadOp", offsetof(ManagedType, loadOp), das::makeFieldType<decltype(das::declval<ManagedType>().loadOp)>(*mlib));
    addFieldEx("storeOp", "storeOp", offsetof(ManagedType, storeOp), das::makeFieldType<decltype(das::declval<ManagedType>().storeOp)>(*mlib));
    addFieldEx("stencilLoadOp", "stencilLoadOp", offsetof(ManagedType, stencilLoadOp), das::makeFieldType<decltype(das::declval<ManagedType>().stencilLoadOp)>(*mlib));
    addFieldEx("stencilStoreOp", "stencilStoreOp", offsetof(ManagedType, stencilStoreOp), das::makeFieldType<decltype(das::declval<ManagedType>().stencilStoreOp)>(*mlib));
    addFieldEx("initialLayout", "initialLayout", offsetof(ManagedType, initialLayout), das::makeFieldType<decltype(das::declval<ManagedType>().initialLayout)>(*mlib));
    addFieldEx("finalLayout", "finalLayout", offsetof(ManagedType, finalLayout), das::makeFieldType<decltype(das::declval<ManagedType>().finalLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAttachmentDescriptionStencilLayoutAnnotation : ManagedStructureAnnotation<VkAttachmentDescriptionStencilLayout> {
  VkAttachmentDescriptionStencilLayoutAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentDescriptionStencilLayout", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stencilInitialLayout", "stencilInitialLayout", offsetof(ManagedType, stencilInitialLayout), das::makeFieldType<decltype(das::declval<ManagedType>().stencilInitialLayout)>(*mlib));
    addFieldEx("stencilFinalLayout", "stencilFinalLayout", offsetof(ManagedType, stencilFinalLayout), das::makeFieldType<decltype(das::declval<ManagedType>().stencilFinalLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
struct VkAttachmentReferenceAnnotation : ManagedStructureAnnotation<VkAttachmentReference> {
  VkAttachmentReferenceAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentReference", lib) {
    addFieldEx("attachment", "attachment", offsetof(ManagedType, attachment), das::makeFieldType<decltype(das::declval<ManagedType>().attachment)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
struct VkAttachmentReference2Annotation : ManagedStructureAnnotation<VkAttachmentReference2> {
  VkAttachmentReference2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentReference2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachment", "attachment", offsetof(ManagedType, attachment), das::makeFieldType<decltype(das::declval<ManagedType>().attachment)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAttachmentReferenceStencilLayoutAnnotation : ManagedStructureAnnotation<VkAttachmentReferenceStencilLayout> {
  VkAttachmentReferenceStencilLayoutAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentReferenceStencilLayout", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stencilLayout", "stencilLayout", offsetof(ManagedType, stencilLayout), das::makeFieldType<decltype(das::declval<ManagedType>().stencilLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_AMD_mixed_attachment_samples) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
struct VkAttachmentSampleCountInfoAMDAnnotation : ManagedStructureAnnotation<VkAttachmentSampleCountInfoAMD> {
  VkAttachmentSampleCountInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentSampleCountInfoAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentSamples", "pColorAttachmentSamples", offsetof(ManagedType, pColorAttachmentSamples), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentSamples)>(*mlib));
    addFieldEx("depthStencilAttachmentSamples", "depthStencilAttachmentSamples", offsetof(ManagedType, depthStencilAttachmentSamples), das::makeFieldType<decltype(das::declval<ManagedType>().depthStencilAttachmentSamples)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_mixed_attachment_samples) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_VERSION_1_0)
struct VkExtent2DAnnotation : ManagedStructureAnnotation<VkExtent2D> {
  VkExtent2DAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExtent2D", lib) {
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_sample_locations)
struct VkSampleLocationEXTAnnotation : ManagedStructureAnnotation<VkSampleLocationEXT> {
  VkSampleLocationEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSampleLocationEXT", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSampleLocationsInfoEXTAnnotation : ManagedStructureAnnotation<VkSampleLocationsInfoEXT> {
  VkSampleLocationsInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSampleLocationsInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampleLocationsPerPixel", "sampleLocationsPerPixel", offsetof(ManagedType, sampleLocationsPerPixel), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsPerPixel)>(*mlib));
    addFieldEx("sampleLocationGridSize", "sampleLocationGridSize", offsetof(ManagedType, sampleLocationGridSize), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationGridSize)>(*mlib));
    addFieldEx("sampleLocationsCount", "sampleLocationsCount", offsetof(ManagedType, sampleLocationsCount), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsCount)>(*mlib));
    addFieldEx("pSampleLocations", "pSampleLocations", offsetof(ManagedType, pSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().pSampleLocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkAttachmentSampleLocationsEXTAnnotation : ManagedStructureAnnotation<VkAttachmentSampleLocationsEXT> {
  VkAttachmentSampleLocationsEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkAttachmentSampleLocationsEXT", lib) {
    addFieldEx("attachmentIndex", "attachmentIndex", offsetof(ManagedType, attachmentIndex), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentIndex)>(*mlib));
    addFieldEx("sampleLocationsInfo", "sampleLocationsInfo", offsetof(ManagedType, sampleLocationsInfo), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_VERSION_1_0)
struct VkBaseInStructureAnnotation : ManagedStructureAnnotation<VkBaseInStructure> {
  VkBaseInStructureAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBaseInStructure", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBaseOutStructureAnnotation : ManagedStructureAnnotation<VkBaseOutStructure> {
  VkBaseOutStructureAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBaseOutStructure", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_ray_tracing)
struct VkBindAccelerationStructureMemoryInfoNVAnnotation : ManagedStructureAnnotation<VkBindAccelerationStructureMemoryInfoNV> {
  VkBindAccelerationStructureMemoryInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindAccelerationStructureMemoryInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
    addFieldEx("deviceIndexCount", "deviceIndexCount", offsetof(ManagedType, deviceIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().deviceIndexCount)>(*mlib));
    addFieldEx("pDeviceIndices", "pDeviceIndices", offsetof(ManagedType, pDeviceIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pDeviceIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_VERSION_1_1)
struct VkBindBufferMemoryDeviceGroupInfoAnnotation : ManagedStructureAnnotation<VkBindBufferMemoryDeviceGroupInfo> {
  VkBindBufferMemoryDeviceGroupInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindBufferMemoryDeviceGroupInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceIndexCount", "deviceIndexCount", offsetof(ManagedType, deviceIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().deviceIndexCount)>(*mlib));
    addFieldEx("pDeviceIndices", "pDeviceIndices", offsetof(ManagedType, pDeviceIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pDeviceIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBindBufferMemoryInfoAnnotation : ManagedStructureAnnotation<VkBindBufferMemoryInfo> {
  VkBindBufferMemoryInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindBufferMemoryInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
struct VkBindDescriptorBufferEmbeddedSamplersInfoEXTAnnotation : ManagedStructureAnnotation<VkBindDescriptorBufferEmbeddedSamplersInfoEXT> {
  VkBindDescriptorBufferEmbeddedSamplersInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindDescriptorBufferEmbeddedSamplersInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("set", "set", offsetof(ManagedType, set), das::makeFieldType<decltype(das::declval<ManagedType>().set)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_4)
struct VkBindDescriptorSetsInfoAnnotation : ManagedStructureAnnotation<VkBindDescriptorSetsInfo> {
  VkBindDescriptorSetsInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindDescriptorSetsInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("firstSet", "firstSet", offsetof(ManagedType, firstSet), das::makeFieldType<decltype(das::declval<ManagedType>().firstSet)>(*mlib));
    addFieldEx("descriptorSetCount", "descriptorSetCount", offsetof(ManagedType, descriptorSetCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetCount)>(*mlib));
    addFieldEx("pDescriptorSets", "pDescriptorSets", offsetof(ManagedType, pDescriptorSets), das::makeFieldType<decltype(das::declval<ManagedType>().pDescriptorSets)>(*mlib));
    addFieldEx("dynamicOffsetCount", "dynamicOffsetCount", offsetof(ManagedType, dynamicOffsetCount), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicOffsetCount)>(*mlib));
    addFieldEx("pDynamicOffsets", "pDynamicOffsets", offsetof(ManagedType, pDynamicOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pDynamicOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
struct VkOffset2DAnnotation : ManagedStructureAnnotation<VkOffset2D> {
  VkOffset2DAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOffset2D", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRect2DAnnotation : ManagedStructureAnnotation<VkRect2D> {
  VkRect2DAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRect2D", lib) {
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkBindImageMemoryDeviceGroupInfoAnnotation : ManagedStructureAnnotation<VkBindImageMemoryDeviceGroupInfo> {
  VkBindImageMemoryDeviceGroupInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindImageMemoryDeviceGroupInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceIndexCount", "deviceIndexCount", offsetof(ManagedType, deviceIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().deviceIndexCount)>(*mlib));
    addFieldEx("pDeviceIndices", "pDeviceIndices", offsetof(ManagedType, pDeviceIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pDeviceIndices)>(*mlib));
    addFieldEx("splitInstanceBindRegionCount", "splitInstanceBindRegionCount", offsetof(ManagedType, splitInstanceBindRegionCount), das::makeFieldType<decltype(das::declval<ManagedType>().splitInstanceBindRegionCount)>(*mlib));
    addFieldEx("pSplitInstanceBindRegions", "pSplitInstanceBindRegions", offsetof(ManagedType, pSplitInstanceBindRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pSplitInstanceBindRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBindImageMemoryInfoAnnotation : ManagedStructureAnnotation<VkBindImageMemoryInfo> {
  VkBindImageMemoryInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindImageMemoryInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkBindImageMemorySwapchainInfoKHRAnnotation : ManagedStructureAnnotation<VkBindImageMemorySwapchainInfoKHR> {
  VkBindImageMemorySwapchainInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindImageMemorySwapchainInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchain", "swapchain", offsetof(ManagedType, swapchain), das::makeFieldType<decltype(das::declval<ManagedType>().swapchain)>(*mlib));
    addFieldEx("imageIndex", "imageIndex", offsetof(ManagedType, imageIndex), das::makeFieldType<decltype(das::declval<ManagedType>().imageIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_1)
struct VkBindImagePlaneMemoryInfoAnnotation : ManagedStructureAnnotation<VkBindImagePlaneMemoryInfo> {
  VkBindImagePlaneMemoryInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindImagePlaneMemoryInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("planeAspect", "planeAspect", offsetof(ManagedType, planeAspect), das::makeFieldType<decltype(das::declval<ManagedType>().planeAspect)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_generated_commands)
struct VkBindIndexBufferIndirectCommandEXTAnnotation : ManagedStructureAnnotation<VkBindIndexBufferIndirectCommandEXT> {
  VkBindIndexBufferIndirectCommandEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindIndexBufferIndirectCommandEXT", lib) {
    addFieldEx("bufferAddress", "bufferAddress", offsetof(ManagedType, bufferAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkBindIndexBufferIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkBindIndexBufferIndirectCommandNV> {
  VkBindIndexBufferIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindIndexBufferIndirectCommandNV", lib) {
    addFieldEx("bufferAddress", "bufferAddress", offsetof(ManagedType, bufferAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("indexType", "indexType", offsetof(ManagedType, indexType), das::makeFieldType<decltype(das::declval<ManagedType>().indexType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_VERSION_1_4)
struct VkBindMemoryStatusAnnotation : ManagedStructureAnnotation<VkBindMemoryStatus> {
  VkBindMemoryStatusAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindMemoryStatus", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pResult", "pResult", offsetof(ManagedType, pResult), das::makeFieldType<decltype(das::declval<ManagedType>().pResult)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_device_generated_commands_compute)
struct VkBindPipelineIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkBindPipelineIndirectCommandNV> {
  VkBindPipelineIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindPipelineIndirectCommandNV", lib) {
    addFieldEx("pipelineAddress", "pipelineAddress", offsetof(ManagedType, pipelineAddress), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_device_generated_commands)
struct VkBindShaderGroupIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkBindShaderGroupIndirectCommandNV> {
  VkBindShaderGroupIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindShaderGroupIndirectCommandNV", lib) {
    addFieldEx("groupIndex", "groupIndex", offsetof(ManagedType, groupIndex), das::makeFieldType<decltype(das::declval<ManagedType>().groupIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_VERSION_1_0)
struct VkSparseMemoryBindAnnotation : ManagedStructureAnnotation<VkSparseMemoryBind> {
  VkSparseMemoryBindAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseMemoryBind", lib) {
    addFieldEx("resourceOffset", "resourceOffset", offsetof(ManagedType, resourceOffset), das::makeFieldType<decltype(das::declval<ManagedType>().resourceOffset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSparseBufferMemoryBindInfoAnnotation : ManagedStructureAnnotation<VkSparseBufferMemoryBindInfo> {
  VkSparseBufferMemoryBindInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseBufferMemoryBindInfo", lib) {
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("bindCount", "bindCount", offsetof(ManagedType, bindCount), das::makeFieldType<decltype(das::declval<ManagedType>().bindCount)>(*mlib));
    addFieldEx("pBinds", "pBinds", offsetof(ManagedType, pBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pBinds)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkOffset3DAnnotation : ManagedStructureAnnotation<VkOffset3D> {
  VkOffset3DAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOffset3D", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
    addFieldEx("z", "z", offsetof(ManagedType, z), das::makeFieldType<decltype(das::declval<ManagedType>().z)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExtent3DAnnotation : ManagedStructureAnnotation<VkExtent3D> {
  VkExtent3DAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExtent3D", lib) {
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("depth", "depth", offsetof(ManagedType, depth), das::makeFieldType<decltype(das::declval<ManagedType>().depth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageSubresourceAnnotation : ManagedStructureAnnotation<VkImageSubresource> {
  VkImageSubresourceAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSubresource", lib) {
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
    addFieldEx("mipLevel", "mipLevel", offsetof(ManagedType, mipLevel), das::makeFieldType<decltype(das::declval<ManagedType>().mipLevel)>(*mlib));
    addFieldEx("arrayLayer", "arrayLayer", offsetof(ManagedType, arrayLayer), das::makeFieldType<decltype(das::declval<ManagedType>().arrayLayer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSparseImageMemoryBindAnnotation : ManagedStructureAnnotation<VkSparseImageMemoryBind> {
  VkSparseImageMemoryBindAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageMemoryBind", lib) {
    addFieldEx("subresource", "subresource", offsetof(ManagedType, subresource), das::makeFieldType<decltype(das::declval<ManagedType>().subresource)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSparseImageMemoryBindInfoAnnotation : ManagedStructureAnnotation<VkSparseImageMemoryBindInfo> {
  VkSparseImageMemoryBindInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageMemoryBindInfo", lib) {
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("bindCount", "bindCount", offsetof(ManagedType, bindCount), das::makeFieldType<decltype(das::declval<ManagedType>().bindCount)>(*mlib));
    addFieldEx("pBinds", "pBinds", offsetof(ManagedType, pBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pBinds)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSparseImageOpaqueMemoryBindInfoAnnotation : ManagedStructureAnnotation<VkSparseImageOpaqueMemoryBindInfo> {
  VkSparseImageOpaqueMemoryBindInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageOpaqueMemoryBindInfo", lib) {
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("bindCount", "bindCount", offsetof(ManagedType, bindCount), das::makeFieldType<decltype(das::declval<ManagedType>().bindCount)>(*mlib));
    addFieldEx("pBinds", "pBinds", offsetof(ManagedType, pBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pBinds)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBindSparseInfoAnnotation : ManagedStructureAnnotation<VkBindSparseInfo> {
  VkBindSparseInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindSparseInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreCount", "waitSemaphoreCount", offsetof(ManagedType, waitSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreCount)>(*mlib));
    addFieldEx("pWaitSemaphores", "pWaitSemaphores", offsetof(ManagedType, pWaitSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphores)>(*mlib));
    addFieldEx("bufferBindCount", "bufferBindCount", offsetof(ManagedType, bufferBindCount), das::makeFieldType<decltype(das::declval<ManagedType>().bufferBindCount)>(*mlib));
    addFieldEx("pBufferBinds", "pBufferBinds", offsetof(ManagedType, pBufferBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pBufferBinds)>(*mlib));
    addFieldEx("imageOpaqueBindCount", "imageOpaqueBindCount", offsetof(ManagedType, imageOpaqueBindCount), das::makeFieldType<decltype(das::declval<ManagedType>().imageOpaqueBindCount)>(*mlib));
    addFieldEx("pImageOpaqueBinds", "pImageOpaqueBinds", offsetof(ManagedType, pImageOpaqueBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pImageOpaqueBinds)>(*mlib));
    addFieldEx("imageBindCount", "imageBindCount", offsetof(ManagedType, imageBindCount), das::makeFieldType<decltype(das::declval<ManagedType>().imageBindCount)>(*mlib));
    addFieldEx("pImageBinds", "pImageBinds", offsetof(ManagedType, pImageBinds), das::makeFieldType<decltype(das::declval<ManagedType>().pImageBinds)>(*mlib));
    addFieldEx("signalSemaphoreCount", "signalSemaphoreCount", offsetof(ManagedType, signalSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreCount)>(*mlib));
    addFieldEx("pSignalSemaphores", "pSignalSemaphores", offsetof(ManagedType, pSignalSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphores)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
struct VkBindVertexBufferIndirectCommandEXTAnnotation : ManagedStructureAnnotation<VkBindVertexBufferIndirectCommandEXT> {
  VkBindVertexBufferIndirectCommandEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindVertexBufferIndirectCommandEXT", lib) {
    addFieldEx("bufferAddress", "bufferAddress", offsetof(ManagedType, bufferAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkBindVertexBufferIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkBindVertexBufferIndirectCommandNV> {
  VkBindVertexBufferIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindVertexBufferIndirectCommandNV", lib) {
    addFieldEx("bufferAddress", "bufferAddress", offsetof(ManagedType, bufferAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_KHR_video_queue)
struct VkBindVideoSessionMemoryInfoKHRAnnotation : ManagedStructureAnnotation<VkBindVideoSessionMemoryInfoKHR> {
  VkBindVideoSessionMemoryInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBindVideoSessionMemoryInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryBindIndex", "memoryBindIndex", offsetof(ManagedType, memoryBindIndex), das::makeFieldType<decltype(das::declval<ManagedType>().memoryBindIndex)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("memoryOffset", "memoryOffset", offsetof(ManagedType, memoryOffset), das::makeFieldType<decltype(das::declval<ManagedType>().memoryOffset)>(*mlib));
    addFieldEx("memorySize", "memorySize", offsetof(ManagedType, memorySize), das::makeFieldType<decltype(das::declval<ManagedType>().memorySize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_QCOM_filter_cubic_weights)
struct VkBlitImageCubicWeightsInfoQCOMAnnotation : ManagedStructureAnnotation<VkBlitImageCubicWeightsInfoQCOM> {
  VkBlitImageCubicWeightsInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBlitImageCubicWeightsInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cubicWeights", "cubicWeights", offsetof(ManagedType, cubicWeights), das::makeFieldType<decltype(das::declval<ManagedType>().cubicWeights)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_VERSION_1_0)
struct VkImageSubresourceLayersAnnotation : ManagedStructureAnnotation<VkImageSubresourceLayers> {
  VkImageSubresourceLayersAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSubresourceLayers", lib) {
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
    addFieldEx("mipLevel", "mipLevel", offsetof(ManagedType, mipLevel), das::makeFieldType<decltype(das::declval<ManagedType>().mipLevel)>(*mlib));
    addFieldEx("baseArrayLayer", "baseArrayLayer", offsetof(ManagedType, baseArrayLayer), das::makeFieldType<decltype(das::declval<ManagedType>().baseArrayLayer)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkImageBlit2Annotation : ManagedStructureAnnotation<VkImageBlit2> {
  VkImageBlit2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageBlit2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffsets", "srcOffsets", offsetof(ManagedType, srcOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffsets)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffsets", "dstOffsets", offsetof(ManagedType, dstOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBlitImageInfo2Annotation : ManagedStructureAnnotation<VkBlitImageInfo2> {
  VkBlitImageInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBlitImageInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
    addFieldEx("filter", "filter", offsetof(ManagedType, filter), das::makeFieldType<decltype(das::declval<ManagedType>().filter)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_descriptor_buffer)
struct VkBufferCaptureDescriptorDataInfoEXTAnnotation : ManagedStructureAnnotation<VkBufferCaptureDescriptorDataInfoEXT> {
  VkBufferCaptureDescriptorDataInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCaptureDescriptorDataInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_FUCHSIA_buffer_collection)
struct VkBufferCollectionBufferCreateInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferCollectionBufferCreateInfoFUCHSIA> {
  VkBufferCollectionBufferCreateInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCollectionBufferCreateInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("collection", "collection", offsetof(ManagedType, collection), das::makeFieldType<decltype(das::declval<ManagedType>().collection)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBufferCollectionConstraintsInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferCollectionConstraintsInfoFUCHSIA> {
  VkBufferCollectionConstraintsInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCollectionConstraintsInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minBufferCount", "minBufferCount", offsetof(ManagedType, minBufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().minBufferCount)>(*mlib));
    addFieldEx("maxBufferCount", "maxBufferCount", offsetof(ManagedType, maxBufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBufferCount)>(*mlib));
    addFieldEx("minBufferCountForCamping", "minBufferCountForCamping", offsetof(ManagedType, minBufferCountForCamping), das::makeFieldType<decltype(das::declval<ManagedType>().minBufferCountForCamping)>(*mlib));
    addFieldEx("minBufferCountForDedicatedSlack", "minBufferCountForDedicatedSlack", offsetof(ManagedType, minBufferCountForDedicatedSlack), das::makeFieldType<decltype(das::declval<ManagedType>().minBufferCountForDedicatedSlack)>(*mlib));
    addFieldEx("minBufferCountForSharedSlack", "minBufferCountForSharedSlack", offsetof(ManagedType, minBufferCountForSharedSlack), das::makeFieldType<decltype(das::declval<ManagedType>().minBufferCountForSharedSlack)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBufferCollectionCreateInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferCollectionCreateInfoFUCHSIA> {
  VkBufferCollectionCreateInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCollectionCreateInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("collectionToken", "collectionToken", offsetof(ManagedType, collectionToken), das::makeFieldType<decltype(das::declval<ManagedType>().collectionToken)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBufferCollectionImageCreateInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferCollectionImageCreateInfoFUCHSIA> {
  VkBufferCollectionImageCreateInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCollectionImageCreateInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("collection", "collection", offsetof(ManagedType, collection), das::makeFieldType<decltype(das::declval<ManagedType>().collection)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSysmemColorSpaceFUCHSIAAnnotation : ManagedStructureAnnotation<VkSysmemColorSpaceFUCHSIA> {
  VkSysmemColorSpaceFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSysmemColorSpaceFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorSpace", "colorSpace", offsetof(ManagedType, colorSpace), das::makeFieldType<decltype(das::declval<ManagedType>().colorSpace)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkBufferCollectionPropertiesFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferCollectionPropertiesFUCHSIA> {
  VkBufferCollectionPropertiesFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCollectionPropertiesFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
    addFieldEx("bufferCount", "bufferCount", offsetof(ManagedType, bufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().bufferCount)>(*mlib));
    addFieldEx("createInfoIndex", "createInfoIndex", offsetof(ManagedType, createInfoIndex), das::makeFieldType<decltype(das::declval<ManagedType>().createInfoIndex)>(*mlib));
    addFieldEx("sysmemPixelFormat", "sysmemPixelFormat", offsetof(ManagedType, sysmemPixelFormat), das::makeFieldType<decltype(das::declval<ManagedType>().sysmemPixelFormat)>(*mlib));
    addFieldEx("formatFeatures", "formatFeatures", offsetof(ManagedType, formatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().formatFeatures)>(*mlib));
    addFieldEx("sysmemColorSpaceIndex", "sysmemColorSpaceIndex", offsetof(ManagedType, sysmemColorSpaceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().sysmemColorSpaceIndex)>(*mlib));
    addFieldEx("samplerYcbcrConversionComponents", "samplerYcbcrConversionComponents", offsetof(ManagedType, samplerYcbcrConversionComponents), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversionComponents)>(*mlib));
    addFieldEx("suggestedYcbcrModel", "suggestedYcbcrModel", offsetof(ManagedType, suggestedYcbcrModel), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrModel)>(*mlib));
    addFieldEx("suggestedYcbcrRange", "suggestedYcbcrRange", offsetof(ManagedType, suggestedYcbcrRange), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrRange)>(*mlib));
    addFieldEx("suggestedXChromaOffset", "suggestedXChromaOffset", offsetof(ManagedType, suggestedXChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedXChromaOffset)>(*mlib));
    addFieldEx("suggestedYChromaOffset", "suggestedYChromaOffset", offsetof(ManagedType, suggestedYChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYChromaOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
struct VkBufferCreateInfoAnnotation : ManagedStructureAnnotation<VkBufferCreateInfo> {
  VkBufferCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("sharingMode", "sharingMode", offsetof(ManagedType, sharingMode), das::makeFieldType<decltype(das::declval<ManagedType>().sharingMode)>(*mlib));
    addFieldEx("queueFamilyIndexCount", "queueFamilyIndexCount", offsetof(ManagedType, queueFamilyIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndexCount)>(*mlib));
    addFieldEx("pQueueFamilyIndices", "pQueueFamilyIndices", offsetof(ManagedType, pQueueFamilyIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueFamilyIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_FUCHSIA_buffer_collection)
struct VkBufferConstraintsInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkBufferConstraintsInfoFUCHSIA> {
  VkBufferConstraintsInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferConstraintsInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("createInfo", "createInfo", offsetof(ManagedType, createInfo), das::makeFieldType<decltype(das::declval<ManagedType>().createInfo)>(*mlib));
    addFieldEx("requiredFormatFeatures", "requiredFormatFeatures", offsetof(ManagedType, requiredFormatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().requiredFormatFeatures)>(*mlib));
    addFieldEx("bufferCollectionConstraints", "bufferCollectionConstraints", offsetof(ManagedType, bufferCollectionConstraints), das::makeFieldType<decltype(das::declval<ManagedType>().bufferCollectionConstraints)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
struct VkBufferCopyAnnotation : ManagedStructureAnnotation<VkBufferCopy> {
  VkBufferCopyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCopy", lib) {
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkBufferCopy2Annotation : ManagedStructureAnnotation<VkBufferCopy2> {
  VkBufferCopy2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferCopy2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_buffer_device_address)
struct VkBufferDeviceAddressCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkBufferDeviceAddressCreateInfoEXT> {
  VkBufferDeviceAddressCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferDeviceAddressCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_VERSION_1_2)
struct VkBufferDeviceAddressInfoAnnotation : ManagedStructureAnnotation<VkBufferDeviceAddressInfo> {
  VkBufferDeviceAddressInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferDeviceAddressInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
struct VkBufferImageCopyAnnotation : ManagedStructureAnnotation<VkBufferImageCopy> {
  VkBufferImageCopyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferImageCopy", lib) {
    addFieldEx("bufferOffset", "bufferOffset", offsetof(ManagedType, bufferOffset), das::makeFieldType<decltype(das::declval<ManagedType>().bufferOffset)>(*mlib));
    addFieldEx("bufferRowLength", "bufferRowLength", offsetof(ManagedType, bufferRowLength), das::makeFieldType<decltype(das::declval<ManagedType>().bufferRowLength)>(*mlib));
    addFieldEx("bufferImageHeight", "bufferImageHeight", offsetof(ManagedType, bufferImageHeight), das::makeFieldType<decltype(das::declval<ManagedType>().bufferImageHeight)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
    addFieldEx("imageOffset", "imageOffset", offsetof(ManagedType, imageOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageOffset)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkBufferImageCopy2Annotation : ManagedStructureAnnotation<VkBufferImageCopy2> {
  VkBufferImageCopy2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferImageCopy2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("bufferOffset", "bufferOffset", offsetof(ManagedType, bufferOffset), das::makeFieldType<decltype(das::declval<ManagedType>().bufferOffset)>(*mlib));
    addFieldEx("bufferRowLength", "bufferRowLength", offsetof(ManagedType, bufferRowLength), das::makeFieldType<decltype(das::declval<ManagedType>().bufferRowLength)>(*mlib));
    addFieldEx("bufferImageHeight", "bufferImageHeight", offsetof(ManagedType, bufferImageHeight), das::makeFieldType<decltype(das::declval<ManagedType>().bufferImageHeight)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
    addFieldEx("imageOffset", "imageOffset", offsetof(ManagedType, imageOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageOffset)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
struct VkBufferMemoryBarrierAnnotation : ManagedStructureAnnotation<VkBufferMemoryBarrier> {
  VkBufferMemoryBarrierAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferMemoryBarrier", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("srcQueueFamilyIndex", "srcQueueFamilyIndex", offsetof(ManagedType, srcQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().srcQueueFamilyIndex)>(*mlib));
    addFieldEx("dstQueueFamilyIndex", "dstQueueFamilyIndex", offsetof(ManagedType, dstQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().dstQueueFamilyIndex)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkBufferMemoryBarrier2Annotation : ManagedStructureAnnotation<VkBufferMemoryBarrier2> {
  VkBufferMemoryBarrier2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferMemoryBarrier2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcStageMask", "srcStageMask", offsetof(ManagedType, srcStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcStageMask)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstStageMask", "dstStageMask", offsetof(ManagedType, dstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstStageMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("srcQueueFamilyIndex", "srcQueueFamilyIndex", offsetof(ManagedType, srcQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().srcQueueFamilyIndex)>(*mlib));
    addFieldEx("dstQueueFamilyIndex", "dstQueueFamilyIndex", offsetof(ManagedType, dstQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().dstQueueFamilyIndex)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkBufferMemoryRequirementsInfo2Annotation : ManagedStructureAnnotation<VkBufferMemoryRequirementsInfo2> {
  VkBufferMemoryRequirementsInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferMemoryRequirementsInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
struct VkBufferOpaqueCaptureAddressCreateInfoAnnotation : ManagedStructureAnnotation<VkBufferOpaqueCaptureAddressCreateInfo> {
  VkBufferOpaqueCaptureAddressCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferOpaqueCaptureAddressCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("opaqueCaptureAddress", "opaqueCaptureAddress", offsetof(ManagedType, opaqueCaptureAddress), das::makeFieldType<decltype(das::declval<ManagedType>().opaqueCaptureAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
struct VkBufferUsageFlags2CreateInfoAnnotation : ManagedStructureAnnotation<VkBufferUsageFlags2CreateInfo> {
  VkBufferUsageFlags2CreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferUsageFlags2CreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
struct VkBufferViewCreateInfoAnnotation : ManagedStructureAnnotation<VkBufferViewCreateInfo> {
  VkBufferViewCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkBufferViewCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("_range", "range", offsetof(ManagedType, range), das::makeFieldType<decltype(das::declval<ManagedType>().range)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_calibrated_timestamps)
struct VkCalibratedTimestampInfoKHRAnnotation : ManagedStructureAnnotation<VkCalibratedTimestampInfoKHR> {
  VkCalibratedTimestampInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCalibratedTimestampInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("timeDomain", "timeDomain", offsetof(ManagedType, timeDomain), das::makeFieldType<decltype(das::declval<ManagedType>().timeDomain)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2))
struct VkCheckpointData2NVAnnotation : ManagedStructureAnnotation<VkCheckpointData2NV> {
  VkCheckpointData2NVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCheckpointData2NV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("pCheckpointMarker", "pCheckpointMarker", offsetof(ManagedType, pCheckpointMarker), das::makeFieldType<decltype(das::declval<ManagedType>().pCheckpointMarker)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2)) */
#if defined(VK_NV_device_diagnostic_checkpoints)
struct VkCheckpointDataNVAnnotation : ManagedStructureAnnotation<VkCheckpointDataNV> {
  VkCheckpointDataNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCheckpointDataNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("pCheckpointMarker", "pCheckpointMarker", offsetof(ManagedType, pCheckpointMarker), das::makeFieldType<decltype(das::declval<ManagedType>().pCheckpointMarker)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_VERSION_1_0)
struct VkClearColorValueAnnotation : ManagedStructureAnnotation<VkClearColorValue> {
  VkClearColorValueAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkClearColorValue", lib) {
    addFieldEx("float32", "float32", offsetof(ManagedType, float32), das::makeFieldType<decltype(das::declval<ManagedType>().float32)>(*mlib));
    addFieldEx("int32", "int32", offsetof(ManagedType, int32), das::makeFieldType<decltype(das::declval<ManagedType>().int32)>(*mlib));
    addFieldEx("uint32", "uint32", offsetof(ManagedType, uint32), das::makeFieldType<decltype(das::declval<ManagedType>().uint32)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkClearDepthStencilValueAnnotation : ManagedStructureAnnotation<VkClearDepthStencilValue> {
  VkClearDepthStencilValueAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkClearDepthStencilValue", lib) {
    addFieldEx("depth", "depth", offsetof(ManagedType, depth), das::makeFieldType<decltype(das::declval<ManagedType>().depth)>(*mlib));
    addFieldEx("stencil", "stencil", offsetof(ManagedType, stencil), das::makeFieldType<decltype(das::declval<ManagedType>().stencil)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkClearValueAnnotation : ManagedStructureAnnotation<VkClearValue> {
  VkClearValueAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkClearValue", lib) {
    addFieldEx("color", "color", offsetof(ManagedType, color), das::makeFieldType<decltype(das::declval<ManagedType>().color)>(*mlib));
    addFieldEx("depthStencil", "depthStencil", offsetof(ManagedType, depthStencil), das::makeFieldType<decltype(das::declval<ManagedType>().depthStencil)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkClearAttachmentAnnotation : ManagedStructureAnnotation<VkClearAttachment> {
  VkClearAttachmentAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkClearAttachment", lib) {
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
    addFieldEx("colorAttachment", "colorAttachment", offsetof(ManagedType, colorAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachment)>(*mlib));
    addFieldEx("clearValue", "clearValue", offsetof(ManagedType, clearValue), das::makeFieldType<decltype(das::declval<ManagedType>().clearValue)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkClearRectAnnotation : ManagedStructureAnnotation<VkClearRect> {
  VkClearRectAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkClearRect", lib) {
    addFieldEx("rect", "rect", offsetof(ManagedType, rect), das::makeFieldType<decltype(das::declval<ManagedType>().rect)>(*mlib));
    addFieldEx("baseArrayLayer", "baseArrayLayer", offsetof(ManagedType, baseArrayLayer), das::makeFieldType<decltype(das::declval<ManagedType>().baseArrayLayer)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_shading_rate_image)
struct VkCoarseSampleLocationNVAnnotation : ManagedStructureAnnotation<VkCoarseSampleLocationNV> {
  VkCoarseSampleLocationNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCoarseSampleLocationNV", lib) {
    addFieldEx("pixelX", "pixelX", offsetof(ManagedType, pixelX), das::makeFieldType<decltype(das::declval<ManagedType>().pixelX)>(*mlib));
    addFieldEx("pixelY", "pixelY", offsetof(ManagedType, pixelY), das::makeFieldType<decltype(das::declval<ManagedType>().pixelY)>(*mlib));
    addFieldEx("sample", "sample", offsetof(ManagedType, sample), das::makeFieldType<decltype(das::declval<ManagedType>().sample)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCoarseSampleOrderCustomNVAnnotation : ManagedStructureAnnotation<VkCoarseSampleOrderCustomNV> {
  VkCoarseSampleOrderCustomNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCoarseSampleOrderCustomNV", lib) {
    addFieldEx("shadingRate", "shadingRate", offsetof(ManagedType, shadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRate)>(*mlib));
    addFieldEx("sampleCount", "sampleCount", offsetof(ManagedType, sampleCount), das::makeFieldType<decltype(das::declval<ManagedType>().sampleCount)>(*mlib));
    addFieldEx("sampleLocationCount", "sampleLocationCount", offsetof(ManagedType, sampleLocationCount), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationCount)>(*mlib));
    addFieldEx("pSampleLocations", "pSampleLocations", offsetof(ManagedType, pSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().pSampleLocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shading_rate_image) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
struct VkColorBlendAdvancedEXTAnnotation : ManagedStructureAnnotation<VkColorBlendAdvancedEXT> {
  VkColorBlendAdvancedEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkColorBlendAdvancedEXT", lib) {
    addFieldEx("advancedBlendOp", "advancedBlendOp", offsetof(ManagedType, advancedBlendOp), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendOp)>(*mlib));
    addFieldEx("srcPremultiplied", "srcPremultiplied", offsetof(ManagedType, srcPremultiplied), das::makeFieldType<decltype(das::declval<ManagedType>().srcPremultiplied)>(*mlib));
    addFieldEx("dstPremultiplied", "dstPremultiplied", offsetof(ManagedType, dstPremultiplied), das::makeFieldType<decltype(das::declval<ManagedType>().dstPremultiplied)>(*mlib));
    addFieldEx("blendOverlap", "blendOverlap", offsetof(ManagedType, blendOverlap), das::makeFieldType<decltype(das::declval<ManagedType>().blendOverlap)>(*mlib));
    addFieldEx("clampResults", "clampResults", offsetof(ManagedType, clampResults), das::makeFieldType<decltype(das::declval<ManagedType>().clampResults)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkColorBlendEquationEXTAnnotation : ManagedStructureAnnotation<VkColorBlendEquationEXT> {
  VkColorBlendEquationEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkColorBlendEquationEXT", lib) {
    addFieldEx("srcColorBlendFactor", "srcColorBlendFactor", offsetof(ManagedType, srcColorBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().srcColorBlendFactor)>(*mlib));
    addFieldEx("dstColorBlendFactor", "dstColorBlendFactor", offsetof(ManagedType, dstColorBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().dstColorBlendFactor)>(*mlib));
    addFieldEx("colorBlendOp", "colorBlendOp", offsetof(ManagedType, colorBlendOp), das::makeFieldType<decltype(das::declval<ManagedType>().colorBlendOp)>(*mlib));
    addFieldEx("srcAlphaBlendFactor", "srcAlphaBlendFactor", offsetof(ManagedType, srcAlphaBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().srcAlphaBlendFactor)>(*mlib));
    addFieldEx("dstAlphaBlendFactor", "dstAlphaBlendFactor", offsetof(ManagedType, dstAlphaBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().dstAlphaBlendFactor)>(*mlib));
    addFieldEx("alphaBlendOp", "alphaBlendOp", offsetof(ManagedType, alphaBlendOp), das::makeFieldType<decltype(das::declval<ManagedType>().alphaBlendOp)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if defined(VK_VERSION_1_0)
struct VkCommandBufferAllocateInfoAnnotation : ManagedStructureAnnotation<VkCommandBufferAllocateInfo> {
  VkCommandBufferAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("commandPool", "commandPool", offsetof(ManagedType, commandPool), das::makeFieldType<decltype(das::declval<ManagedType>().commandPool)>(*mlib));
    addFieldEx("level", "level", offsetof(ManagedType, level), das::makeFieldType<decltype(das::declval<ManagedType>().level)>(*mlib));
    addFieldEx("commandBufferCount", "commandBufferCount", offsetof(ManagedType, commandBufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().commandBufferCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCommandBufferInheritanceInfoAnnotation : ManagedStructureAnnotation<VkCommandBufferInheritanceInfo> {
  VkCommandBufferInheritanceInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferInheritanceInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("renderPass", "renderPass", offsetof(ManagedType, renderPass), das::makeFieldType<decltype(das::declval<ManagedType>().renderPass)>(*mlib));
    addFieldEx("subpass", "subpass", offsetof(ManagedType, subpass), das::makeFieldType<decltype(das::declval<ManagedType>().subpass)>(*mlib));
    addFieldEx("framebuffer", "framebuffer", offsetof(ManagedType, framebuffer), das::makeFieldType<decltype(das::declval<ManagedType>().framebuffer)>(*mlib));
    addFieldEx("occlusionQueryEnable", "occlusionQueryEnable", offsetof(ManagedType, occlusionQueryEnable), das::makeFieldType<decltype(das::declval<ManagedType>().occlusionQueryEnable)>(*mlib));
    addFieldEx("queryFlags", "queryFlags", offsetof(ManagedType, queryFlags), das::makeFieldType<decltype(das::declval<ManagedType>().queryFlags)>(*mlib));
    addFieldEx("pipelineStatistics", "pipelineStatistics", offsetof(ManagedType, pipelineStatistics), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineStatistics)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCommandBufferBeginInfoAnnotation : ManagedStructureAnnotation<VkCommandBufferBeginInfo> {
  VkCommandBufferBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pInheritanceInfo", "pInheritanceInfo", offsetof(ManagedType, pInheritanceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pInheritanceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_conditional_rendering)
struct VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation : ManagedStructureAnnotation<VkCommandBufferInheritanceConditionalRenderingInfoEXT> {
  VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferInheritanceConditionalRenderingInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("conditionalRenderingEnable", "conditionalRenderingEnable", offsetof(ManagedType, conditionalRenderingEnable), das::makeFieldType<decltype(das::declval<ManagedType>().conditionalRenderingEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_QCOM_render_pass_transform)
struct VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation : ManagedStructureAnnotation<VkCommandBufferInheritanceRenderPassTransformInfoQCOM> {
  VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferInheritanceRenderPassTransformInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("transform", "transform", offsetof(ManagedType, transform), das::makeFieldType<decltype(das::declval<ManagedType>().transform)>(*mlib));
    addFieldEx("renderArea", "renderArea", offsetof(ManagedType, renderArea), das::makeFieldType<decltype(das::declval<ManagedType>().renderArea)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_render_pass_transform) */
#if defined(VK_VERSION_1_3)
struct VkCommandBufferInheritanceRenderingInfoAnnotation : ManagedStructureAnnotation<VkCommandBufferInheritanceRenderingInfo> {
  VkCommandBufferInheritanceRenderingInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferInheritanceRenderingInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("viewMask", "viewMask", offsetof(ManagedType, viewMask), das::makeFieldType<decltype(das::declval<ManagedType>().viewMask)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentFormats", "pColorAttachmentFormats", offsetof(ManagedType, pColorAttachmentFormats), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentFormats)>(*mlib));
    addFieldEx("depthAttachmentFormat", "depthAttachmentFormat", offsetof(ManagedType, depthAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().depthAttachmentFormat)>(*mlib));
    addFieldEx("stencilAttachmentFormat", "stencilAttachmentFormat", offsetof(ManagedType, stencilAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().stencilAttachmentFormat)>(*mlib));
    addFieldEx("rasterizationSamples", "rasterizationSamples", offsetof(ManagedType, rasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationSamples)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
struct VkViewportAnnotation : ManagedStructureAnnotation<VkViewport> {
  VkViewportAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkViewport", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("minDepth", "minDepth", offsetof(ManagedType, minDepth), das::makeFieldType<decltype(das::declval<ManagedType>().minDepth)>(*mlib));
    addFieldEx("maxDepth", "maxDepth", offsetof(ManagedType, maxDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxDepth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_inherited_viewport_scissor)
struct VkCommandBufferInheritanceViewportScissorInfoNVAnnotation : ManagedStructureAnnotation<VkCommandBufferInheritanceViewportScissorInfoNV> {
  VkCommandBufferInheritanceViewportScissorInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferInheritanceViewportScissorInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("viewportScissor2D", "viewportScissor2D", offsetof(ManagedType, viewportScissor2D), das::makeFieldType<decltype(das::declval<ManagedType>().viewportScissor2D)>(*mlib));
    addFieldEx("viewportDepthCount", "viewportDepthCount", offsetof(ManagedType, viewportDepthCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewportDepthCount)>(*mlib));
    addFieldEx("pViewportDepths", "pViewportDepths", offsetof(ManagedType, pViewportDepths), das::makeFieldType<decltype(das::declval<ManagedType>().pViewportDepths)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_inherited_viewport_scissor) */
#if defined(VK_VERSION_1_3)
struct VkCommandBufferSubmitInfoAnnotation : ManagedStructureAnnotation<VkCommandBufferSubmitInfo> {
  VkCommandBufferSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandBufferSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("commandBuffer", "commandBuffer", offsetof(ManagedType, commandBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().commandBuffer)>(*mlib));
    addFieldEx("deviceMask", "deviceMask", offsetof(ManagedType, deviceMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
struct VkCommandPoolCreateInfoAnnotation : ManagedStructureAnnotation<VkCommandPoolCreateInfo> {
  VkCommandPoolCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCommandPoolCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("queueFamilyIndex", "queueFamilyIndex", offsetof(ManagedType, queueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSpecializationMapEntryAnnotation : ManagedStructureAnnotation<VkSpecializationMapEntry> {
  VkSpecializationMapEntryAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSpecializationMapEntry", lib) {
    addFieldEx("constantID", "constantID", offsetof(ManagedType, constantID), das::makeFieldType<decltype(das::declval<ManagedType>().constantID)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSpecializationInfoAnnotation : ManagedStructureAnnotation<VkSpecializationInfo> {
  VkSpecializationInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSpecializationInfo", lib) {
    addFieldEx("mapEntryCount", "mapEntryCount", offsetof(ManagedType, mapEntryCount), das::makeFieldType<decltype(das::declval<ManagedType>().mapEntryCount)>(*mlib));
    addFieldEx("pMapEntries", "pMapEntries", offsetof(ManagedType, pMapEntries), das::makeFieldType<decltype(das::declval<ManagedType>().pMapEntries)>(*mlib));
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineShaderStageCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineShaderStageCreateInfo> {
  VkPipelineShaderStageCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineShaderStageCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("_module", "module", offsetof(ManagedType, module), das::makeFieldType<decltype(das::declval<ManagedType>().module)>(*mlib));
    addFieldEx("pName", "pName", offsetof(ManagedType, pName), das::makeFieldType<decltype(das::declval<ManagedType>().pName)>(*mlib));
    addFieldEx("pSpecializationInfo", "pSpecializationInfo", offsetof(ManagedType, pSpecializationInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pSpecializationInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkComputePipelineCreateInfoAnnotation : ManagedStructureAnnotation<VkComputePipelineCreateInfo> {
  VkComputePipelineCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkComputePipelineCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("basePipelineHandle", "basePipelineHandle", offsetof(ManagedType, basePipelineHandle), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineHandle)>(*mlib));
    addFieldEx("basePipelineIndex", "basePipelineIndex", offsetof(ManagedType, basePipelineIndex), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_device_generated_commands_compute)
struct VkComputePipelineIndirectBufferInfoNVAnnotation : ManagedStructureAnnotation<VkComputePipelineIndirectBufferInfoNV> {
  VkComputePipelineIndirectBufferInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkComputePipelineIndirectBufferInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("pipelineDeviceAddressCaptureReplay", "pipelineDeviceAddressCaptureReplay", offsetof(ManagedType, pipelineDeviceAddressCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineDeviceAddressCaptureReplay)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_conditional_rendering)
struct VkConditionalRenderingBeginInfoEXTAnnotation : ManagedStructureAnnotation<VkConditionalRenderingBeginInfoEXT> {
  VkConditionalRenderingBeginInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkConditionalRenderingBeginInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_VERSION_1_2)
struct VkConformanceVersionAnnotation : ManagedStructureAnnotation<VkConformanceVersion> {
  VkConformanceVersionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkConformanceVersion", lib) {
    addFieldEx("major", "major", offsetof(ManagedType, major), das::makeFieldType<decltype(das::declval<ManagedType>().major)>(*mlib));
    addFieldEx("minor", "minor", offsetof(ManagedType, minor), das::makeFieldType<decltype(das::declval<ManagedType>().minor)>(*mlib));
    addFieldEx("subminor", "subminor", offsetof(ManagedType, subminor), das::makeFieldType<decltype(das::declval<ManagedType>().subminor)>(*mlib));
    addFieldEx("patch", "patch", offsetof(ManagedType, patch), das::makeFieldType<decltype(das::declval<ManagedType>().patch)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_cooperative_matrix2)
struct VkCooperativeMatrixFlexibleDimensionsPropertiesNVAnnotation : ManagedStructureAnnotation<VkCooperativeMatrixFlexibleDimensionsPropertiesNV> {
  VkCooperativeMatrixFlexibleDimensionsPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCooperativeMatrixFlexibleDimensionsPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("MGranularity", "MGranularity", offsetof(ManagedType, MGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().MGranularity)>(*mlib));
    addFieldEx("NGranularity", "NGranularity", offsetof(ManagedType, NGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().NGranularity)>(*mlib));
    addFieldEx("KGranularity", "KGranularity", offsetof(ManagedType, KGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().KGranularity)>(*mlib));
    addFieldEx("AType", "AType", offsetof(ManagedType, AType), das::makeFieldType<decltype(das::declval<ManagedType>().AType)>(*mlib));
    addFieldEx("BType", "BType", offsetof(ManagedType, BType), das::makeFieldType<decltype(das::declval<ManagedType>().BType)>(*mlib));
    addFieldEx("CType", "CType", offsetof(ManagedType, CType), das::makeFieldType<decltype(das::declval<ManagedType>().CType)>(*mlib));
    addFieldEx("ResultType", "ResultType", offsetof(ManagedType, ResultType), das::makeFieldType<decltype(das::declval<ManagedType>().ResultType)>(*mlib));
    addFieldEx("saturatingAccumulation", "saturatingAccumulation", offsetof(ManagedType, saturatingAccumulation), das::makeFieldType<decltype(das::declval<ManagedType>().saturatingAccumulation)>(*mlib));
    addFieldEx("scope", "scope", offsetof(ManagedType, scope), das::makeFieldType<decltype(das::declval<ManagedType>().scope)>(*mlib));
    addFieldEx("workgroupInvocations", "workgroupInvocations", offsetof(ManagedType, workgroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().workgroupInvocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cooperative_matrix2) */
#if defined(VK_KHR_cooperative_matrix)
struct VkCooperativeMatrixPropertiesKHRAnnotation : ManagedStructureAnnotation<VkCooperativeMatrixPropertiesKHR> {
  VkCooperativeMatrixPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCooperativeMatrixPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("MSize", "MSize", offsetof(ManagedType, MSize), das::makeFieldType<decltype(das::declval<ManagedType>().MSize)>(*mlib));
    addFieldEx("NSize", "NSize", offsetof(ManagedType, NSize), das::makeFieldType<decltype(das::declval<ManagedType>().NSize)>(*mlib));
    addFieldEx("KSize", "KSize", offsetof(ManagedType, KSize), das::makeFieldType<decltype(das::declval<ManagedType>().KSize)>(*mlib));
    addFieldEx("AType", "AType", offsetof(ManagedType, AType), das::makeFieldType<decltype(das::declval<ManagedType>().AType)>(*mlib));
    addFieldEx("BType", "BType", offsetof(ManagedType, BType), das::makeFieldType<decltype(das::declval<ManagedType>().BType)>(*mlib));
    addFieldEx("CType", "CType", offsetof(ManagedType, CType), das::makeFieldType<decltype(das::declval<ManagedType>().CType)>(*mlib));
    addFieldEx("ResultType", "ResultType", offsetof(ManagedType, ResultType), das::makeFieldType<decltype(das::declval<ManagedType>().ResultType)>(*mlib));
    addFieldEx("saturatingAccumulation", "saturatingAccumulation", offsetof(ManagedType, saturatingAccumulation), das::makeFieldType<decltype(das::declval<ManagedType>().saturatingAccumulation)>(*mlib));
    addFieldEx("scope", "scope", offsetof(ManagedType, scope), das::makeFieldType<decltype(das::declval<ManagedType>().scope)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
struct VkCooperativeMatrixPropertiesNVAnnotation : ManagedStructureAnnotation<VkCooperativeMatrixPropertiesNV> {
  VkCooperativeMatrixPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCooperativeMatrixPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("MSize", "MSize", offsetof(ManagedType, MSize), das::makeFieldType<decltype(das::declval<ManagedType>().MSize)>(*mlib));
    addFieldEx("NSize", "NSize", offsetof(ManagedType, NSize), das::makeFieldType<decltype(das::declval<ManagedType>().NSize)>(*mlib));
    addFieldEx("KSize", "KSize", offsetof(ManagedType, KSize), das::makeFieldType<decltype(das::declval<ManagedType>().KSize)>(*mlib));
    addFieldEx("AType", "AType", offsetof(ManagedType, AType), das::makeFieldType<decltype(das::declval<ManagedType>().AType)>(*mlib));
    addFieldEx("BType", "BType", offsetof(ManagedType, BType), das::makeFieldType<decltype(das::declval<ManagedType>().BType)>(*mlib));
    addFieldEx("CType", "CType", offsetof(ManagedType, CType), das::makeFieldType<decltype(das::declval<ManagedType>().CType)>(*mlib));
    addFieldEx("DType", "DType", offsetof(ManagedType, DType), das::makeFieldType<decltype(das::declval<ManagedType>().DType)>(*mlib));
    addFieldEx("scope", "scope", offsetof(ManagedType, scope), das::makeFieldType<decltype(das::declval<ManagedType>().scope)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_KHR_acceleration_structure)
struct VkCopyAccelerationStructureInfoKHRAnnotation : ManagedStructureAnnotation<VkCopyAccelerationStructureInfoKHR> {
  VkCopyAccelerationStructureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyAccelerationStructureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyAccelerationStructureToMemoryInfoKHRAnnotation : ManagedStructureAnnotation<VkCopyAccelerationStructureToMemoryInfoKHR> {
  VkCopyAccelerationStructureToMemoryInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyAccelerationStructureToMemoryInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_VERSION_1_3)
struct VkCopyBufferInfo2Annotation : ManagedStructureAnnotation<VkCopyBufferInfo2> {
  VkCopyBufferInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyBufferInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcBuffer", "srcBuffer", offsetof(ManagedType, srcBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().srcBuffer)>(*mlib));
    addFieldEx("dstBuffer", "dstBuffer", offsetof(ManagedType, dstBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().dstBuffer)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyBufferToImageInfo2Annotation : ManagedStructureAnnotation<VkCopyBufferToImageInfo2> {
  VkCopyBufferToImageInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyBufferToImageInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcBuffer", "srcBuffer", offsetof(ManagedType, srcBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().srcBuffer)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_QCOM_rotated_copy_commands)
struct VkCopyCommandTransformInfoQCOMAnnotation : ManagedStructureAnnotation<VkCopyCommandTransformInfoQCOM> {
  VkCopyCommandTransformInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyCommandTransformInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("transform", "transform", offsetof(ManagedType, transform), das::makeFieldType<decltype(das::declval<ManagedType>().transform)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_rotated_copy_commands) */
#if defined(VK_VERSION_1_0)
struct VkCopyDescriptorSetAnnotation : ManagedStructureAnnotation<VkCopyDescriptorSet> {
  VkCopyDescriptorSetAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyDescriptorSet", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcSet", "srcSet", offsetof(ManagedType, srcSet), das::makeFieldType<decltype(das::declval<ManagedType>().srcSet)>(*mlib));
    addFieldEx("srcBinding", "srcBinding", offsetof(ManagedType, srcBinding), das::makeFieldType<decltype(das::declval<ManagedType>().srcBinding)>(*mlib));
    addFieldEx("srcArrayElement", "srcArrayElement", offsetof(ManagedType, srcArrayElement), das::makeFieldType<decltype(das::declval<ManagedType>().srcArrayElement)>(*mlib));
    addFieldEx("dstSet", "dstSet", offsetof(ManagedType, dstSet), das::makeFieldType<decltype(das::declval<ManagedType>().dstSet)>(*mlib));
    addFieldEx("dstBinding", "dstBinding", offsetof(ManagedType, dstBinding), das::makeFieldType<decltype(das::declval<ManagedType>().dstBinding)>(*mlib));
    addFieldEx("dstArrayElement", "dstArrayElement", offsetof(ManagedType, dstArrayElement), das::makeFieldType<decltype(das::declval<ManagedType>().dstArrayElement)>(*mlib));
    addFieldEx("descriptorCount", "descriptorCount", offsetof(ManagedType, descriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkImageCopy2Annotation : ManagedStructureAnnotation<VkImageCopy2> {
  VkImageCopy2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCopy2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyImageInfo2Annotation : ManagedStructureAnnotation<VkCopyImageInfo2> {
  VkCopyImageInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyImageInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyImageToBufferInfo2Annotation : ManagedStructureAnnotation<VkCopyImageToBufferInfo2> {
  VkCopyImageToBufferInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyImageToBufferInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("dstBuffer", "dstBuffer", offsetof(ManagedType, dstBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().dstBuffer)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkCopyImageToImageInfoAnnotation : ManagedStructureAnnotation<VkCopyImageToImageInfo> {
  VkCopyImageToImageInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyImageToImageInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageToMemoryCopyAnnotation : ManagedStructureAnnotation<VkImageToMemoryCopy> {
  VkImageToMemoryCopyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageToMemoryCopy", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pHostPointer", "pHostPointer", offsetof(ManagedType, pHostPointer), das::makeFieldType<decltype(das::declval<ManagedType>().pHostPointer)>(*mlib));
    addFieldEx("memoryRowLength", "memoryRowLength", offsetof(ManagedType, memoryRowLength), das::makeFieldType<decltype(das::declval<ManagedType>().memoryRowLength)>(*mlib));
    addFieldEx("memoryImageHeight", "memoryImageHeight", offsetof(ManagedType, memoryImageHeight), das::makeFieldType<decltype(das::declval<ManagedType>().memoryImageHeight)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
    addFieldEx("imageOffset", "imageOffset", offsetof(ManagedType, imageOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageOffset)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyImageToMemoryInfoAnnotation : ManagedStructureAnnotation<VkCopyImageToMemoryInfo> {
  VkCopyImageToMemoryInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyImageToMemoryInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_copy_memory_indirect)
struct VkCopyMemoryIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkCopyMemoryIndirectCommandNV> {
  VkCopyMemoryIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMemoryIndirectCommandNV", lib) {
    addFieldEx("srcAddress", "srcAddress", offsetof(ManagedType, srcAddress), das::makeFieldType<decltype(das::declval<ManagedType>().srcAddress)>(*mlib));
    addFieldEx("dstAddress", "dstAddress", offsetof(ManagedType, dstAddress), das::makeFieldType<decltype(das::declval<ManagedType>().dstAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_KHR_acceleration_structure)
struct VkCopyMemoryToAccelerationStructureInfoKHRAnnotation : ManagedStructureAnnotation<VkCopyMemoryToAccelerationStructureInfoKHR> {
  VkCopyMemoryToAccelerationStructureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMemoryToAccelerationStructureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_copy_memory_indirect)
struct VkCopyMemoryToImageIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkCopyMemoryToImageIndirectCommandNV> {
  VkCopyMemoryToImageIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMemoryToImageIndirectCommandNV", lib) {
    addFieldEx("srcAddress", "srcAddress", offsetof(ManagedType, srcAddress), das::makeFieldType<decltype(das::declval<ManagedType>().srcAddress)>(*mlib));
    addFieldEx("bufferRowLength", "bufferRowLength", offsetof(ManagedType, bufferRowLength), das::makeFieldType<decltype(das::declval<ManagedType>().bufferRowLength)>(*mlib));
    addFieldEx("bufferImageHeight", "bufferImageHeight", offsetof(ManagedType, bufferImageHeight), das::makeFieldType<decltype(das::declval<ManagedType>().bufferImageHeight)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
    addFieldEx("imageOffset", "imageOffset", offsetof(ManagedType, imageOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageOffset)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_VERSION_1_4)
struct VkMemoryToImageCopyAnnotation : ManagedStructureAnnotation<VkMemoryToImageCopy> {
  VkMemoryToImageCopyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryToImageCopy", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pHostPointer", "pHostPointer", offsetof(ManagedType, pHostPointer), das::makeFieldType<decltype(das::declval<ManagedType>().pHostPointer)>(*mlib));
    addFieldEx("memoryRowLength", "memoryRowLength", offsetof(ManagedType, memoryRowLength), das::makeFieldType<decltype(das::declval<ManagedType>().memoryRowLength)>(*mlib));
    addFieldEx("memoryImageHeight", "memoryImageHeight", offsetof(ManagedType, memoryImageHeight), das::makeFieldType<decltype(das::declval<ManagedType>().memoryImageHeight)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
    addFieldEx("imageOffset", "imageOffset", offsetof(ManagedType, imageOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageOffset)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyMemoryToImageInfoAnnotation : ManagedStructureAnnotation<VkCopyMemoryToImageInfo> {
  VkCopyMemoryToImageInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMemoryToImageInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_opacity_micromap)
struct VkCopyMemoryToMicromapInfoEXTAnnotation : ManagedStructureAnnotation<VkCopyMemoryToMicromapInfoEXT> {
  VkCopyMemoryToMicromapInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMemoryToMicromapInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyMicromapInfoEXTAnnotation : ManagedStructureAnnotation<VkCopyMicromapInfoEXT> {
  VkCopyMicromapInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMicromapInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCopyMicromapToMemoryInfoEXTAnnotation : ManagedStructureAnnotation<VkCopyMicromapToMemoryInfoEXT> {
  VkCopyMicromapToMemoryInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCopyMicromapToMemoryInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("src", "src", offsetof(ManagedType, src), das::makeFieldType<decltype(das::declval<ManagedType>().src)>(*mlib));
    addFieldEx("dst", "dst", offsetof(ManagedType, dst), das::makeFieldType<decltype(das::declval<ManagedType>().dst)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NVX_binary_import)
struct VkCuFunctionCreateInfoNVXAnnotation : ManagedStructureAnnotation<VkCuFunctionCreateInfoNVX> {
  VkCuFunctionCreateInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCuFunctionCreateInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_module", "module", offsetof(ManagedType, module), das::makeFieldType<decltype(das::declval<ManagedType>().module)>(*mlib));
    addFieldEx("pName", "pName", offsetof(ManagedType, pName), das::makeFieldType<decltype(das::declval<ManagedType>().pName)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCuLaunchInfoNVXAnnotation : ManagedStructureAnnotation<VkCuLaunchInfoNVX> {
  VkCuLaunchInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCuLaunchInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("function", "function", offsetof(ManagedType, function), das::makeFieldType<decltype(das::declval<ManagedType>().function)>(*mlib));
    addFieldEx("gridDimX", "gridDimX", offsetof(ManagedType, gridDimX), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimX)>(*mlib));
    addFieldEx("gridDimY", "gridDimY", offsetof(ManagedType, gridDimY), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimY)>(*mlib));
    addFieldEx("gridDimZ", "gridDimZ", offsetof(ManagedType, gridDimZ), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimZ)>(*mlib));
    addFieldEx("blockDimX", "blockDimX", offsetof(ManagedType, blockDimX), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimX)>(*mlib));
    addFieldEx("blockDimY", "blockDimY", offsetof(ManagedType, blockDimY), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimY)>(*mlib));
    addFieldEx("blockDimZ", "blockDimZ", offsetof(ManagedType, blockDimZ), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimZ)>(*mlib));
    addFieldEx("sharedMemBytes", "sharedMemBytes", offsetof(ManagedType, sharedMemBytes), das::makeFieldType<decltype(das::declval<ManagedType>().sharedMemBytes)>(*mlib));
    addFieldEx("paramCount", "paramCount", offsetof(ManagedType, paramCount), das::makeFieldType<decltype(das::declval<ManagedType>().paramCount)>(*mlib));
    addFieldEx("pParams", "pParams", offsetof(ManagedType, pParams), das::makeFieldType<decltype(das::declval<ManagedType>().pParams)>(*mlib));
    addFieldEx("extraCount", "extraCount", offsetof(ManagedType, extraCount), das::makeFieldType<decltype(das::declval<ManagedType>().extraCount)>(*mlib));
    addFieldEx("pExtras", "pExtras", offsetof(ManagedType, pExtras), das::makeFieldType<decltype(das::declval<ManagedType>().pExtras)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCuModuleCreateInfoNVXAnnotation : ManagedStructureAnnotation<VkCuModuleCreateInfoNVX> {
  VkCuModuleCreateInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCuModuleCreateInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCuModuleTexturingModeCreateInfoNVXAnnotation : ManagedStructureAnnotation<VkCuModuleTexturingModeCreateInfoNVX> {
  VkCuModuleTexturingModeCreateInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCuModuleTexturingModeCreateInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("use64bitTexturing", "use64bitTexturing", offsetof(ManagedType, use64bitTexturing), das::makeFieldType<decltype(das::declval<ManagedType>().use64bitTexturing)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NV_cuda_kernel_launch)
struct VkCudaFunctionCreateInfoNVAnnotation : ManagedStructureAnnotation<VkCudaFunctionCreateInfoNV> {
  VkCudaFunctionCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCudaFunctionCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_module", "module", offsetof(ManagedType, module), das::makeFieldType<decltype(das::declval<ManagedType>().module)>(*mlib));
    addFieldEx("pName", "pName", offsetof(ManagedType, pName), das::makeFieldType<decltype(das::declval<ManagedType>().pName)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCudaLaunchInfoNVAnnotation : ManagedStructureAnnotation<VkCudaLaunchInfoNV> {
  VkCudaLaunchInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCudaLaunchInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("function", "function", offsetof(ManagedType, function), das::makeFieldType<decltype(das::declval<ManagedType>().function)>(*mlib));
    addFieldEx("gridDimX", "gridDimX", offsetof(ManagedType, gridDimX), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimX)>(*mlib));
    addFieldEx("gridDimY", "gridDimY", offsetof(ManagedType, gridDimY), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimY)>(*mlib));
    addFieldEx("gridDimZ", "gridDimZ", offsetof(ManagedType, gridDimZ), das::makeFieldType<decltype(das::declval<ManagedType>().gridDimZ)>(*mlib));
    addFieldEx("blockDimX", "blockDimX", offsetof(ManagedType, blockDimX), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimX)>(*mlib));
    addFieldEx("blockDimY", "blockDimY", offsetof(ManagedType, blockDimY), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimY)>(*mlib));
    addFieldEx("blockDimZ", "blockDimZ", offsetof(ManagedType, blockDimZ), das::makeFieldType<decltype(das::declval<ManagedType>().blockDimZ)>(*mlib));
    addFieldEx("sharedMemBytes", "sharedMemBytes", offsetof(ManagedType, sharedMemBytes), das::makeFieldType<decltype(das::declval<ManagedType>().sharedMemBytes)>(*mlib));
    addFieldEx("paramCount", "paramCount", offsetof(ManagedType, paramCount), das::makeFieldType<decltype(das::declval<ManagedType>().paramCount)>(*mlib));
    addFieldEx("pParams", "pParams", offsetof(ManagedType, pParams), das::makeFieldType<decltype(das::declval<ManagedType>().pParams)>(*mlib));
    addFieldEx("extraCount", "extraCount", offsetof(ManagedType, extraCount), das::makeFieldType<decltype(das::declval<ManagedType>().extraCount)>(*mlib));
    addFieldEx("pExtras", "pExtras", offsetof(ManagedType, pExtras), das::makeFieldType<decltype(das::declval<ManagedType>().pExtras)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkCudaModuleCreateInfoNVAnnotation : ManagedStructureAnnotation<VkCudaModuleCreateInfoNV> {
  VkCudaModuleCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkCudaModuleCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_KHR_external_semaphore_win32)
struct VkD3D12FenceSubmitInfoKHRAnnotation : ManagedStructureAnnotation<VkD3D12FenceSubmitInfoKHR> {
  VkD3D12FenceSubmitInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkD3D12FenceSubmitInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreValuesCount", "waitSemaphoreValuesCount", offsetof(ManagedType, waitSemaphoreValuesCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreValuesCount)>(*mlib));
    addFieldEx("pWaitSemaphoreValues", "pWaitSemaphoreValues", offsetof(ManagedType, pWaitSemaphoreValues), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphoreValues)>(*mlib));
    addFieldEx("signalSemaphoreValuesCount", "signalSemaphoreValuesCount", offsetof(ManagedType, signalSemaphoreValuesCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreValuesCount)>(*mlib));
    addFieldEx("pSignalSemaphoreValues", "pSignalSemaphoreValues", offsetof(ManagedType, pSignalSemaphoreValues), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphoreValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_EXT_debug_marker)
struct VkDebugMarkerMarkerInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugMarkerMarkerInfoEXT> {
  VkDebugMarkerMarkerInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugMarkerMarkerInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pMarkerName", "pMarkerName", offsetof(ManagedType, pMarkerName), das::makeFieldType<decltype(das::declval<ManagedType>().pMarkerName)>(*mlib));
    addFieldEx("color", "color", offsetof(ManagedType, color), das::makeFieldType<decltype(das::declval<ManagedType>().color)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugMarkerObjectNameInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugMarkerObjectNameInfoEXT> {
  VkDebugMarkerObjectNameInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugMarkerObjectNameInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("objectType", "objectType", offsetof(ManagedType, objectType), das::makeFieldType<decltype(das::declval<ManagedType>().objectType)>(*mlib));
    addFieldEx("object", "object", offsetof(ManagedType, object), das::makeFieldType<decltype(das::declval<ManagedType>().object)>(*mlib));
    addFieldEx("pObjectName", "pObjectName", offsetof(ManagedType, pObjectName), das::makeFieldType<decltype(das::declval<ManagedType>().pObjectName)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugMarkerObjectTagInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugMarkerObjectTagInfoEXT> {
  VkDebugMarkerObjectTagInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugMarkerObjectTagInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("objectType", "objectType", offsetof(ManagedType, objectType), das::makeFieldType<decltype(das::declval<ManagedType>().objectType)>(*mlib));
    addFieldEx("object", "object", offsetof(ManagedType, object), das::makeFieldType<decltype(das::declval<ManagedType>().object)>(*mlib));
    addFieldEx("tagName", "tagName", offsetof(ManagedType, tagName), das::makeFieldType<decltype(das::declval<ManagedType>().tagName)>(*mlib));
    addFieldEx("tagSize", "tagSize", offsetof(ManagedType, tagSize), das::makeFieldType<decltype(das::declval<ManagedType>().tagSize)>(*mlib));
    addFieldEx("pTag", "pTag", offsetof(ManagedType, pTag), das::makeFieldType<decltype(das::declval<ManagedType>().pTag)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_debug_report)
struct VkDebugReportCallbackCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugReportCallbackCreateInfoEXT> {
  VkDebugReportCallbackCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugReportCallbackCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pfnCallback", "pfnCallback", offsetof(ManagedType, pfnCallback), das::makeFieldType<decltype(das::declval<ManagedType>().pfnCallback)>(*mlib));
    addFieldEx("pUserData", "pUserData", offsetof(ManagedType, pUserData), das::makeFieldType<decltype(das::declval<ManagedType>().pUserData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
struct VkDebugUtilsLabelEXTAnnotation : ManagedStructureAnnotation<VkDebugUtilsLabelEXT> {
  VkDebugUtilsLabelEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugUtilsLabelEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pLabelName", "pLabelName", offsetof(ManagedType, pLabelName), das::makeFieldType<decltype(das::declval<ManagedType>().pLabelName)>(*mlib));
    addFieldEx("color", "color", offsetof(ManagedType, color), das::makeFieldType<decltype(das::declval<ManagedType>().color)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugUtilsObjectNameInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugUtilsObjectNameInfoEXT> {
  VkDebugUtilsObjectNameInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugUtilsObjectNameInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("objectType", "objectType", offsetof(ManagedType, objectType), das::makeFieldType<decltype(das::declval<ManagedType>().objectType)>(*mlib));
    addFieldEx("objectHandle", "objectHandle", offsetof(ManagedType, objectHandle), das::makeFieldType<decltype(das::declval<ManagedType>().objectHandle)>(*mlib));
    addFieldEx("pObjectName", "pObjectName", offsetof(ManagedType, pObjectName), das::makeFieldType<decltype(das::declval<ManagedType>().pObjectName)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugUtilsMessengerCallbackDataEXTAnnotation : ManagedStructureAnnotation<VkDebugUtilsMessengerCallbackDataEXT> {
  VkDebugUtilsMessengerCallbackDataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugUtilsMessengerCallbackDataEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pMessageIdName", "pMessageIdName", offsetof(ManagedType, pMessageIdName), das::makeFieldType<decltype(das::declval<ManagedType>().pMessageIdName)>(*mlib));
    addFieldEx("messageIdNumber", "messageIdNumber", offsetof(ManagedType, messageIdNumber), das::makeFieldType<decltype(das::declval<ManagedType>().messageIdNumber)>(*mlib));
    addFieldEx("pMessage", "pMessage", offsetof(ManagedType, pMessage), das::makeFieldType<decltype(das::declval<ManagedType>().pMessage)>(*mlib));
    addFieldEx("queueLabelCount", "queueLabelCount", offsetof(ManagedType, queueLabelCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueLabelCount)>(*mlib));
    addFieldEx("pQueueLabels", "pQueueLabels", offsetof(ManagedType, pQueueLabels), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueLabels)>(*mlib));
    addFieldEx("cmdBufLabelCount", "cmdBufLabelCount", offsetof(ManagedType, cmdBufLabelCount), das::makeFieldType<decltype(das::declval<ManagedType>().cmdBufLabelCount)>(*mlib));
    addFieldEx("pCmdBufLabels", "pCmdBufLabels", offsetof(ManagedType, pCmdBufLabels), das::makeFieldType<decltype(das::declval<ManagedType>().pCmdBufLabels)>(*mlib));
    addFieldEx("objectCount", "objectCount", offsetof(ManagedType, objectCount), das::makeFieldType<decltype(das::declval<ManagedType>().objectCount)>(*mlib));
    addFieldEx("pObjects", "pObjects", offsetof(ManagedType, pObjects), das::makeFieldType<decltype(das::declval<ManagedType>().pObjects)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugUtilsMessengerCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugUtilsMessengerCreateInfoEXT> {
  VkDebugUtilsMessengerCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugUtilsMessengerCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("messageSeverity", "messageSeverity", offsetof(ManagedType, messageSeverity), das::makeFieldType<decltype(das::declval<ManagedType>().messageSeverity)>(*mlib));
    addFieldEx("messageType", "messageType", offsetof(ManagedType, messageType), das::makeFieldType<decltype(das::declval<ManagedType>().messageType)>(*mlib));
    addFieldEx("pfnUserCallback", "pfnUserCallback", offsetof(ManagedType, pfnUserCallback), das::makeFieldType<decltype(das::declval<ManagedType>().pfnUserCallback)>(*mlib));
    addFieldEx("pUserData", "pUserData", offsetof(ManagedType, pUserData), das::makeFieldType<decltype(das::declval<ManagedType>().pUserData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDebugUtilsObjectTagInfoEXTAnnotation : ManagedStructureAnnotation<VkDebugUtilsObjectTagInfoEXT> {
  VkDebugUtilsObjectTagInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDebugUtilsObjectTagInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("objectType", "objectType", offsetof(ManagedType, objectType), das::makeFieldType<decltype(das::declval<ManagedType>().objectType)>(*mlib));
    addFieldEx("objectHandle", "objectHandle", offsetof(ManagedType, objectHandle), das::makeFieldType<decltype(das::declval<ManagedType>().objectHandle)>(*mlib));
    addFieldEx("tagName", "tagName", offsetof(ManagedType, tagName), das::makeFieldType<decltype(das::declval<ManagedType>().tagName)>(*mlib));
    addFieldEx("tagSize", "tagSize", offsetof(ManagedType, tagSize), das::makeFieldType<decltype(das::declval<ManagedType>().tagSize)>(*mlib));
    addFieldEx("pTag", "pTag", offsetof(ManagedType, pTag), das::makeFieldType<decltype(das::declval<ManagedType>().pTag)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_NV_memory_decompression)
struct VkDecompressMemoryRegionNVAnnotation : ManagedStructureAnnotation<VkDecompressMemoryRegionNV> {
  VkDecompressMemoryRegionNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDecompressMemoryRegionNV", lib) {
    addFieldEx("srcAddress", "srcAddress", offsetof(ManagedType, srcAddress), das::makeFieldType<decltype(das::declval<ManagedType>().srcAddress)>(*mlib));
    addFieldEx("dstAddress", "dstAddress", offsetof(ManagedType, dstAddress), das::makeFieldType<decltype(das::declval<ManagedType>().dstAddress)>(*mlib));
    addFieldEx("compressedSize", "compressedSize", offsetof(ManagedType, compressedSize), das::makeFieldType<decltype(das::declval<ManagedType>().compressedSize)>(*mlib));
    addFieldEx("decompressedSize", "decompressedSize", offsetof(ManagedType, decompressedSize), das::makeFieldType<decltype(das::declval<ManagedType>().decompressedSize)>(*mlib));
    addFieldEx("decompressionMethod", "decompressionMethod", offsetof(ManagedType, decompressionMethod), das::makeFieldType<decltype(das::declval<ManagedType>().decompressionMethod)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_dedicated_allocation)
struct VkDedicatedAllocationBufferCreateInfoNVAnnotation : ManagedStructureAnnotation<VkDedicatedAllocationBufferCreateInfoNV> {
  VkDedicatedAllocationBufferCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDedicatedAllocationBufferCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dedicatedAllocation", "dedicatedAllocation", offsetof(ManagedType, dedicatedAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().dedicatedAllocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDedicatedAllocationImageCreateInfoNVAnnotation : ManagedStructureAnnotation<VkDedicatedAllocationImageCreateInfoNV> {
  VkDedicatedAllocationImageCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDedicatedAllocationImageCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dedicatedAllocation", "dedicatedAllocation", offsetof(ManagedType, dedicatedAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().dedicatedAllocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDedicatedAllocationMemoryAllocateInfoNVAnnotation : ManagedStructureAnnotation<VkDedicatedAllocationMemoryAllocateInfoNV> {
  VkDedicatedAllocationMemoryAllocateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDedicatedAllocationMemoryAllocateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_dedicated_allocation) */
#if defined(VK_VERSION_1_0)
struct VkImageSubresourceRangeAnnotation : ManagedStructureAnnotation<VkImageSubresourceRange> {
  VkImageSubresourceRangeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSubresourceRange", lib) {
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
    addFieldEx("baseMipLevel", "baseMipLevel", offsetof(ManagedType, baseMipLevel), das::makeFieldType<decltype(das::declval<ManagedType>().baseMipLevel)>(*mlib));
    addFieldEx("levelCount", "levelCount", offsetof(ManagedType, levelCount), das::makeFieldType<decltype(das::declval<ManagedType>().levelCount)>(*mlib));
    addFieldEx("baseArrayLayer", "baseArrayLayer", offsetof(ManagedType, baseArrayLayer), das::makeFieldType<decltype(das::declval<ManagedType>().baseArrayLayer)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkImageMemoryBarrier2Annotation : ManagedStructureAnnotation<VkImageMemoryBarrier2> {
  VkImageMemoryBarrier2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageMemoryBarrier2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcStageMask", "srcStageMask", offsetof(ManagedType, srcStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcStageMask)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstStageMask", "dstStageMask", offsetof(ManagedType, dstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstStageMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("oldLayout", "oldLayout", offsetof(ManagedType, oldLayout), das::makeFieldType<decltype(das::declval<ManagedType>().oldLayout)>(*mlib));
    addFieldEx("newLayout", "newLayout", offsetof(ManagedType, newLayout), das::makeFieldType<decltype(das::declval<ManagedType>().newLayout)>(*mlib));
    addFieldEx("srcQueueFamilyIndex", "srcQueueFamilyIndex", offsetof(ManagedType, srcQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().srcQueueFamilyIndex)>(*mlib));
    addFieldEx("dstQueueFamilyIndex", "dstQueueFamilyIndex", offsetof(ManagedType, dstQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().dstQueueFamilyIndex)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("subresourceRange", "subresourceRange", offsetof(ManagedType, subresourceRange), das::makeFieldType<decltype(das::declval<ManagedType>().subresourceRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMemoryBarrier2Annotation : ManagedStructureAnnotation<VkMemoryBarrier2> {
  VkMemoryBarrier2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryBarrier2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcStageMask", "srcStageMask", offsetof(ManagedType, srcStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcStageMask)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstStageMask", "dstStageMask", offsetof(ManagedType, dstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstStageMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDependencyInfoAnnotation : ManagedStructureAnnotation<VkDependencyInfo> {
  VkDependencyInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDependencyInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dependencyFlags", "dependencyFlags", offsetof(ManagedType, dependencyFlags), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyFlags)>(*mlib));
    addFieldEx("memoryBarrierCount", "memoryBarrierCount", offsetof(ManagedType, memoryBarrierCount), das::makeFieldType<decltype(das::declval<ManagedType>().memoryBarrierCount)>(*mlib));
    addFieldEx("pMemoryBarriers", "pMemoryBarriers", offsetof(ManagedType, pMemoryBarriers), das::makeFieldType<decltype(das::declval<ManagedType>().pMemoryBarriers)>(*mlib));
    addFieldEx("bufferMemoryBarrierCount", "bufferMemoryBarrierCount", offsetof(ManagedType, bufferMemoryBarrierCount), das::makeFieldType<decltype(das::declval<ManagedType>().bufferMemoryBarrierCount)>(*mlib));
    addFieldEx("pBufferMemoryBarriers", "pBufferMemoryBarriers", offsetof(ManagedType, pBufferMemoryBarriers), das::makeFieldType<decltype(das::declval<ManagedType>().pBufferMemoryBarriers)>(*mlib));
    addFieldEx("imageMemoryBarrierCount", "imageMemoryBarrierCount", offsetof(ManagedType, imageMemoryBarrierCount), das::makeFieldType<decltype(das::declval<ManagedType>().imageMemoryBarrierCount)>(*mlib));
    addFieldEx("pImageMemoryBarriers", "pImageMemoryBarriers", offsetof(ManagedType, pImageMemoryBarriers), das::makeFieldType<decltype(das::declval<ManagedType>().pImageMemoryBarriers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_depth_bias_control)
struct VkDepthBiasInfoEXTAnnotation : ManagedStructureAnnotation<VkDepthBiasInfoEXT> {
  VkDepthBiasInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDepthBiasInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthBiasConstantFactor", "depthBiasConstantFactor", offsetof(ManagedType, depthBiasConstantFactor), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasConstantFactor)>(*mlib));
    addFieldEx("depthBiasClamp", "depthBiasClamp", offsetof(ManagedType, depthBiasClamp), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasClamp)>(*mlib));
    addFieldEx("depthBiasSlopeFactor", "depthBiasSlopeFactor", offsetof(ManagedType, depthBiasSlopeFactor), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasSlopeFactor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDepthBiasRepresentationInfoEXTAnnotation : ManagedStructureAnnotation<VkDepthBiasRepresentationInfoEXT> {
  VkDepthBiasRepresentationInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDepthBiasRepresentationInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthBiasRepresentation", "depthBiasRepresentation", offsetof(ManagedType, depthBiasRepresentation), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasRepresentation)>(*mlib));
    addFieldEx("depthBiasExact", "depthBiasExact", offsetof(ManagedType, depthBiasExact), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasExact)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_depth_clamp_control)
struct VkDepthClampRangeEXTAnnotation : ManagedStructureAnnotation<VkDepthClampRangeEXT> {
  VkDepthClampRangeEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDepthClampRangeEXT", lib) {
    addFieldEx("minDepthClamp", "minDepthClamp", offsetof(ManagedType, minDepthClamp), das::makeFieldType<decltype(das::declval<ManagedType>().minDepthClamp)>(*mlib));
    addFieldEx("maxDepthClamp", "maxDepthClamp", offsetof(ManagedType, maxDepthClamp), das::makeFieldType<decltype(das::declval<ManagedType>().maxDepthClamp)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_descriptor_buffer)
struct VkDescriptorAddressInfoEXTAnnotation : ManagedStructureAnnotation<VkDescriptorAddressInfoEXT> {
  VkDescriptorAddressInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorAddressInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("address", "address", offsetof(ManagedType, address), das::makeFieldType<decltype(das::declval<ManagedType>().address)>(*mlib));
    addFieldEx("_range", "range", offsetof(ManagedType, range), das::makeFieldType<decltype(das::declval<ManagedType>().range)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorBufferBindingInfoEXTAnnotation : ManagedStructureAnnotation<VkDescriptorBufferBindingInfoEXT> {
  VkDescriptorBufferBindingInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorBufferBindingInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("address", "address", offsetof(ManagedType, address), das::makeFieldType<decltype(das::declval<ManagedType>().address)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXTAnnotation : ManagedStructureAnnotation<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT> {
  VkDescriptorBufferBindingPushDescriptorBufferHandleEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorBufferBindingPushDescriptorBufferHandleEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
struct VkDescriptorBufferInfoAnnotation : ManagedStructureAnnotation<VkDescriptorBufferInfo> {
  VkDescriptorBufferInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorBufferInfo", lib) {
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("_range", "range", offsetof(ManagedType, range), das::makeFieldType<decltype(das::declval<ManagedType>().range)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorImageInfoAnnotation : ManagedStructureAnnotation<VkDescriptorImageInfo> {
  VkDescriptorImageInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorImageInfo", lib) {
    addFieldEx("sampler", "sampler", offsetof(ManagedType, sampler), das::makeFieldType<decltype(das::declval<ManagedType>().sampler)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("imageLayout", "imageLayout", offsetof(ManagedType, imageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().imageLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_descriptor_buffer)
struct VkDescriptorDataEXTAnnotation : ManagedStructureAnnotation<VkDescriptorDataEXT> {
  VkDescriptorDataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorDataEXT", lib) {
    addFieldEx("pSampler", "pSampler", offsetof(ManagedType, pSampler), das::makeFieldType<decltype(das::declval<ManagedType>().pSampler)>(*mlib));
    addFieldEx("pCombinedImageSampler", "pCombinedImageSampler", offsetof(ManagedType, pCombinedImageSampler), das::makeFieldType<decltype(das::declval<ManagedType>().pCombinedImageSampler)>(*mlib));
    addFieldEx("pInputAttachmentImage", "pInputAttachmentImage", offsetof(ManagedType, pInputAttachmentImage), das::makeFieldType<decltype(das::declval<ManagedType>().pInputAttachmentImage)>(*mlib));
    addFieldEx("pSampledImage", "pSampledImage", offsetof(ManagedType, pSampledImage), das::makeFieldType<decltype(das::declval<ManagedType>().pSampledImage)>(*mlib));
    addFieldEx("pStorageImage", "pStorageImage", offsetof(ManagedType, pStorageImage), das::makeFieldType<decltype(das::declval<ManagedType>().pStorageImage)>(*mlib));
    addFieldEx("pUniformTexelBuffer", "pUniformTexelBuffer", offsetof(ManagedType, pUniformTexelBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pUniformTexelBuffer)>(*mlib));
    addFieldEx("pStorageTexelBuffer", "pStorageTexelBuffer", offsetof(ManagedType, pStorageTexelBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pStorageTexelBuffer)>(*mlib));
    addFieldEx("pUniformBuffer", "pUniformBuffer", offsetof(ManagedType, pUniformBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pUniformBuffer)>(*mlib));
    addFieldEx("pStorageBuffer", "pStorageBuffer", offsetof(ManagedType, pStorageBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pStorageBuffer)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorGetInfoEXTAnnotation : ManagedStructureAnnotation<VkDescriptorGetInfoEXT> {
  VkDescriptorGetInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorGetInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
struct VkDescriptorPoolSizeAnnotation : ManagedStructureAnnotation<VkDescriptorPoolSize> {
  VkDescriptorPoolSizeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorPoolSize", lib) {
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("descriptorCount", "descriptorCount", offsetof(ManagedType, descriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorPoolCreateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorPoolCreateInfo> {
  VkDescriptorPoolCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorPoolCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("maxSets", "maxSets", offsetof(ManagedType, maxSets), das::makeFieldType<decltype(das::declval<ManagedType>().maxSets)>(*mlib));
    addFieldEx("poolSizeCount", "poolSizeCount", offsetof(ManagedType, poolSizeCount), das::makeFieldType<decltype(das::declval<ManagedType>().poolSizeCount)>(*mlib));
    addFieldEx("pPoolSizes", "pPoolSizes", offsetof(ManagedType, pPoolSizes), das::makeFieldType<decltype(das::declval<ManagedType>().pPoolSizes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkDescriptorPoolInlineUniformBlockCreateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorPoolInlineUniformBlockCreateInfo> {
  VkDescriptorPoolInlineUniformBlockCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorPoolInlineUniformBlockCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxInlineUniformBlockBindings", "maxInlineUniformBlockBindings", offsetof(ManagedType, maxInlineUniformBlockBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxInlineUniformBlockBindings)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
struct VkDescriptorSetAllocateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorSetAllocateInfo> {
  VkDescriptorSetAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorPool", "descriptorPool", offsetof(ManagedType, descriptorPool), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorPool)>(*mlib));
    addFieldEx("descriptorSetCount", "descriptorSetCount", offsetof(ManagedType, descriptorSetCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetCount)>(*mlib));
    addFieldEx("pSetLayouts", "pSetLayouts", offsetof(ManagedType, pSetLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pSetLayouts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
struct VkDescriptorSetBindingReferenceVALVEAnnotation : ManagedStructureAnnotation<VkDescriptorSetBindingReferenceVALVE> {
  VkDescriptorSetBindingReferenceVALVEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetBindingReferenceVALVE", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorSetLayout", "descriptorSetLayout", offsetof(ManagedType, descriptorSetLayout), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetLayout)>(*mlib));
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_VERSION_1_0)
struct VkDescriptorSetLayoutBindingAnnotation : ManagedStructureAnnotation<VkDescriptorSetLayoutBinding> {
  VkDescriptorSetLayoutBindingAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetLayoutBinding", lib) {
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("descriptorType", "descriptorType", offsetof(ManagedType, descriptorType), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorType)>(*mlib));
    addFieldEx("descriptorCount", "descriptorCount", offsetof(ManagedType, descriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorCount)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("pImmutableSamplers", "pImmutableSamplers", offsetof(ManagedType, pImmutableSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().pImmutableSamplers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
struct VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorSetLayoutBindingFlagsCreateInfo> {
  VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetLayoutBindingFlagsCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("bindingCount", "bindingCount", offsetof(ManagedType, bindingCount), das::makeFieldType<decltype(das::declval<ManagedType>().bindingCount)>(*mlib));
    addFieldEx("pBindingFlags", "pBindingFlags", offsetof(ManagedType, pBindingFlags), das::makeFieldType<decltype(das::declval<ManagedType>().pBindingFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
struct VkDescriptorSetLayoutCreateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorSetLayoutCreateInfo> {
  VkDescriptorSetLayoutCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetLayoutCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("bindingCount", "bindingCount", offsetof(ManagedType, bindingCount), das::makeFieldType<decltype(das::declval<ManagedType>().bindingCount)>(*mlib));
    addFieldEx("pBindings", "pBindings", offsetof(ManagedType, pBindings), das::makeFieldType<decltype(das::declval<ManagedType>().pBindings)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
struct VkDescriptorSetLayoutHostMappingInfoVALVEAnnotation : ManagedStructureAnnotation<VkDescriptorSetLayoutHostMappingInfoVALVE> {
  VkDescriptorSetLayoutHostMappingInfoVALVEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetLayoutHostMappingInfoVALVE", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorOffset", "descriptorOffset", offsetof(ManagedType, descriptorOffset), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorOffset)>(*mlib));
    addFieldEx("descriptorSize", "descriptorSize", offsetof(ManagedType, descriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_VERSION_1_1)
struct VkDescriptorSetLayoutSupportAnnotation : ManagedStructureAnnotation<VkDescriptorSetLayoutSupport> {
  VkDescriptorSetLayoutSupportAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetLayoutSupport", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supported", "supported", offsetof(ManagedType, supported), das::makeFieldType<decltype(das::declval<ManagedType>().supported)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
struct VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorSetVariableDescriptorCountAllocateInfo> {
  VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetVariableDescriptorCountAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorSetCount", "descriptorSetCount", offsetof(ManagedType, descriptorSetCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetCount)>(*mlib));
    addFieldEx("pDescriptorCounts", "pDescriptorCounts", offsetof(ManagedType, pDescriptorCounts), das::makeFieldType<decltype(das::declval<ManagedType>().pDescriptorCounts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation : ManagedStructureAnnotation<VkDescriptorSetVariableDescriptorCountLayoutSupport> {
  VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorSetVariableDescriptorCountLayoutSupport", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxVariableDescriptorCount", "maxVariableDescriptorCount", offsetof(ManagedType, maxVariableDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxVariableDescriptorCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkDescriptorUpdateTemplateEntryAnnotation : ManagedStructureAnnotation<VkDescriptorUpdateTemplateEntry> {
  VkDescriptorUpdateTemplateEntryAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorUpdateTemplateEntry", lib) {
    addFieldEx("dstBinding", "dstBinding", offsetof(ManagedType, dstBinding), das::makeFieldType<decltype(das::declval<ManagedType>().dstBinding)>(*mlib));
    addFieldEx("dstArrayElement", "dstArrayElement", offsetof(ManagedType, dstArrayElement), das::makeFieldType<decltype(das::declval<ManagedType>().dstArrayElement)>(*mlib));
    addFieldEx("descriptorCount", "descriptorCount", offsetof(ManagedType, descriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorCount)>(*mlib));
    addFieldEx("descriptorType", "descriptorType", offsetof(ManagedType, descriptorType), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorType)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDescriptorUpdateTemplateCreateInfoAnnotation : ManagedStructureAnnotation<VkDescriptorUpdateTemplateCreateInfo> {
  VkDescriptorUpdateTemplateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDescriptorUpdateTemplateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("descriptorUpdateEntryCount", "descriptorUpdateEntryCount", offsetof(ManagedType, descriptorUpdateEntryCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorUpdateEntryCount)>(*mlib));
    addFieldEx("pDescriptorUpdateEntries", "pDescriptorUpdateEntries", offsetof(ManagedType, pDescriptorUpdateEntries), das::makeFieldType<decltype(das::declval<ManagedType>().pDescriptorUpdateEntries)>(*mlib));
    addFieldEx("templateType", "templateType", offsetof(ManagedType, templateType), das::makeFieldType<decltype(das::declval<ManagedType>().templateType)>(*mlib));
    addFieldEx("descriptorSetLayout", "descriptorSetLayout", offsetof(ManagedType, descriptorSetLayout), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetLayout)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("pipelineLayout", "pipelineLayout", offsetof(ManagedType, pipelineLayout), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineLayout)>(*mlib));
    addFieldEx("set", "set", offsetof(ManagedType, set), das::makeFieldType<decltype(das::declval<ManagedType>().set)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_address_binding_report)
struct VkDeviceAddressBindingCallbackDataEXTAnnotation : ManagedStructureAnnotation<VkDeviceAddressBindingCallbackDataEXT> {
  VkDeviceAddressBindingCallbackDataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceAddressBindingCallbackDataEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("baseAddress", "baseAddress", offsetof(ManagedType, baseAddress), das::makeFieldType<decltype(das::declval<ManagedType>().baseAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("bindingType", "bindingType", offsetof(ManagedType, bindingType), das::makeFieldType<decltype(das::declval<ManagedType>().bindingType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_address_binding_report) */
#if defined(VK_VERSION_1_3)
struct VkDeviceBufferMemoryRequirementsAnnotation : ManagedStructureAnnotation<VkDeviceBufferMemoryRequirements> {
  VkDeviceBufferMemoryRequirementsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceBufferMemoryRequirements", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pCreateInfo", "pCreateInfo", offsetof(ManagedType, pCreateInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pCreateInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
struct VkDeviceQueueCreateInfoAnnotation : ManagedStructureAnnotation<VkDeviceQueueCreateInfo> {
  VkDeviceQueueCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceQueueCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("queueFamilyIndex", "queueFamilyIndex", offsetof(ManagedType, queueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndex)>(*mlib));
    addFieldEx("queueCount", "queueCount", offsetof(ManagedType, queueCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueCount)>(*mlib));
    addFieldEx("pQueuePriorities", "pQueuePriorities", offsetof(ManagedType, pQueuePriorities), das::makeFieldType<decltype(das::declval<ManagedType>().pQueuePriorities)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFeatures> {
  VkPhysicalDeviceFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFeatures", lib) {
    addFieldEx("robustBufferAccess", "robustBufferAccess", offsetof(ManagedType, robustBufferAccess), das::makeFieldType<decltype(das::declval<ManagedType>().robustBufferAccess)>(*mlib));
    addFieldEx("fullDrawIndexUint32", "fullDrawIndexUint32", offsetof(ManagedType, fullDrawIndexUint32), das::makeFieldType<decltype(das::declval<ManagedType>().fullDrawIndexUint32)>(*mlib));
    addFieldEx("imageCubeArray", "imageCubeArray", offsetof(ManagedType, imageCubeArray), das::makeFieldType<decltype(das::declval<ManagedType>().imageCubeArray)>(*mlib));
    addFieldEx("independentBlend", "independentBlend", offsetof(ManagedType, independentBlend), das::makeFieldType<decltype(das::declval<ManagedType>().independentBlend)>(*mlib));
    addFieldEx("geometryShader", "geometryShader", offsetof(ManagedType, geometryShader), das::makeFieldType<decltype(das::declval<ManagedType>().geometryShader)>(*mlib));
    addFieldEx("tessellationShader", "tessellationShader", offsetof(ManagedType, tessellationShader), das::makeFieldType<decltype(das::declval<ManagedType>().tessellationShader)>(*mlib));
    addFieldEx("sampleRateShading", "sampleRateShading", offsetof(ManagedType, sampleRateShading), das::makeFieldType<decltype(das::declval<ManagedType>().sampleRateShading)>(*mlib));
    addFieldEx("dualSrcBlend", "dualSrcBlend", offsetof(ManagedType, dualSrcBlend), das::makeFieldType<decltype(das::declval<ManagedType>().dualSrcBlend)>(*mlib));
    addFieldEx("logicOp", "logicOp", offsetof(ManagedType, logicOp), das::makeFieldType<decltype(das::declval<ManagedType>().logicOp)>(*mlib));
    addFieldEx("multiDrawIndirect", "multiDrawIndirect", offsetof(ManagedType, multiDrawIndirect), das::makeFieldType<decltype(das::declval<ManagedType>().multiDrawIndirect)>(*mlib));
    addFieldEx("drawIndirectFirstInstance", "drawIndirectFirstInstance", offsetof(ManagedType, drawIndirectFirstInstance), das::makeFieldType<decltype(das::declval<ManagedType>().drawIndirectFirstInstance)>(*mlib));
    addFieldEx("depthClamp", "depthClamp", offsetof(ManagedType, depthClamp), das::makeFieldType<decltype(das::declval<ManagedType>().depthClamp)>(*mlib));
    addFieldEx("depthBiasClamp", "depthBiasClamp", offsetof(ManagedType, depthBiasClamp), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasClamp)>(*mlib));
    addFieldEx("fillModeNonSolid", "fillModeNonSolid", offsetof(ManagedType, fillModeNonSolid), das::makeFieldType<decltype(das::declval<ManagedType>().fillModeNonSolid)>(*mlib));
    addFieldEx("depthBounds", "depthBounds", offsetof(ManagedType, depthBounds), das::makeFieldType<decltype(das::declval<ManagedType>().depthBounds)>(*mlib));
    addFieldEx("wideLines", "wideLines", offsetof(ManagedType, wideLines), das::makeFieldType<decltype(das::declval<ManagedType>().wideLines)>(*mlib));
    addFieldEx("largePoints", "largePoints", offsetof(ManagedType, largePoints), das::makeFieldType<decltype(das::declval<ManagedType>().largePoints)>(*mlib));
    addFieldEx("alphaToOne", "alphaToOne", offsetof(ManagedType, alphaToOne), das::makeFieldType<decltype(das::declval<ManagedType>().alphaToOne)>(*mlib));
    addFieldEx("multiViewport", "multiViewport", offsetof(ManagedType, multiViewport), das::makeFieldType<decltype(das::declval<ManagedType>().multiViewport)>(*mlib));
    addFieldEx("samplerAnisotropy", "samplerAnisotropy", offsetof(ManagedType, samplerAnisotropy), das::makeFieldType<decltype(das::declval<ManagedType>().samplerAnisotropy)>(*mlib));
    addFieldEx("textureCompressionETC2", "textureCompressionETC2", offsetof(ManagedType, textureCompressionETC2), das::makeFieldType<decltype(das::declval<ManagedType>().textureCompressionETC2)>(*mlib));
    addFieldEx("textureCompressionASTC_LDR", "textureCompressionASTC_LDR", offsetof(ManagedType, textureCompressionASTC_LDR), das::makeFieldType<decltype(das::declval<ManagedType>().textureCompressionASTC_LDR)>(*mlib));
    addFieldEx("textureCompressionBC", "textureCompressionBC", offsetof(ManagedType, textureCompressionBC), das::makeFieldType<decltype(das::declval<ManagedType>().textureCompressionBC)>(*mlib));
    addFieldEx("occlusionQueryPrecise", "occlusionQueryPrecise", offsetof(ManagedType, occlusionQueryPrecise), das::makeFieldType<decltype(das::declval<ManagedType>().occlusionQueryPrecise)>(*mlib));
    addFieldEx("pipelineStatisticsQuery", "pipelineStatisticsQuery", offsetof(ManagedType, pipelineStatisticsQuery), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineStatisticsQuery)>(*mlib));
    addFieldEx("vertexPipelineStoresAndAtomics", "vertexPipelineStoresAndAtomics", offsetof(ManagedType, vertexPipelineStoresAndAtomics), das::makeFieldType<decltype(das::declval<ManagedType>().vertexPipelineStoresAndAtomics)>(*mlib));
    addFieldEx("fragmentStoresAndAtomics", "fragmentStoresAndAtomics", offsetof(ManagedType, fragmentStoresAndAtomics), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentStoresAndAtomics)>(*mlib));
    addFieldEx("shaderTessellationAndGeometryPointSize", "shaderTessellationAndGeometryPointSize", offsetof(ManagedType, shaderTessellationAndGeometryPointSize), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTessellationAndGeometryPointSize)>(*mlib));
    addFieldEx("shaderImageGatherExtended", "shaderImageGatherExtended", offsetof(ManagedType, shaderImageGatherExtended), das::makeFieldType<decltype(das::declval<ManagedType>().shaderImageGatherExtended)>(*mlib));
    addFieldEx("shaderStorageImageExtendedFormats", "shaderStorageImageExtendedFormats", offsetof(ManagedType, shaderStorageImageExtendedFormats), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageExtendedFormats)>(*mlib));
    addFieldEx("shaderStorageImageMultisample", "shaderStorageImageMultisample", offsetof(ManagedType, shaderStorageImageMultisample), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageMultisample)>(*mlib));
    addFieldEx("shaderStorageImageReadWithoutFormat", "shaderStorageImageReadWithoutFormat", offsetof(ManagedType, shaderStorageImageReadWithoutFormat), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageReadWithoutFormat)>(*mlib));
    addFieldEx("shaderStorageImageWriteWithoutFormat", "shaderStorageImageWriteWithoutFormat", offsetof(ManagedType, shaderStorageImageWriteWithoutFormat), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageWriteWithoutFormat)>(*mlib));
    addFieldEx("shaderUniformBufferArrayDynamicIndexing", "shaderUniformBufferArrayDynamicIndexing", offsetof(ManagedType, shaderUniformBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderSampledImageArrayDynamicIndexing", "shaderSampledImageArrayDynamicIndexing", offsetof(ManagedType, shaderSampledImageArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampledImageArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderStorageBufferArrayDynamicIndexing", "shaderStorageBufferArrayDynamicIndexing", offsetof(ManagedType, shaderStorageBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderStorageImageArrayDynamicIndexing", "shaderStorageImageArrayDynamicIndexing", offsetof(ManagedType, shaderStorageImageArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderClipDistance", "shaderClipDistance", offsetof(ManagedType, shaderClipDistance), das::makeFieldType<decltype(das::declval<ManagedType>().shaderClipDistance)>(*mlib));
    addFieldEx("shaderCullDistance", "shaderCullDistance", offsetof(ManagedType, shaderCullDistance), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCullDistance)>(*mlib));
    addFieldEx("shaderFloat64", "shaderFloat64", offsetof(ManagedType, shaderFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloat64)>(*mlib));
    addFieldEx("shaderInt64", "shaderInt64", offsetof(ManagedType, shaderInt64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInt64)>(*mlib));
    addFieldEx("shaderInt16", "shaderInt16", offsetof(ManagedType, shaderInt16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInt16)>(*mlib));
    addFieldEx("shaderResourceResidency", "shaderResourceResidency", offsetof(ManagedType, shaderResourceResidency), das::makeFieldType<decltype(das::declval<ManagedType>().shaderResourceResidency)>(*mlib));
    addFieldEx("shaderResourceMinLod", "shaderResourceMinLod", offsetof(ManagedType, shaderResourceMinLod), das::makeFieldType<decltype(das::declval<ManagedType>().shaderResourceMinLod)>(*mlib));
    addFieldEx("sparseBinding", "sparseBinding", offsetof(ManagedType, sparseBinding), das::makeFieldType<decltype(das::declval<ManagedType>().sparseBinding)>(*mlib));
    addFieldEx("sparseResidencyBuffer", "sparseResidencyBuffer", offsetof(ManagedType, sparseResidencyBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidencyBuffer)>(*mlib));
    addFieldEx("sparseResidencyImage2D", "sparseResidencyImage2D", offsetof(ManagedType, sparseResidencyImage2D), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidencyImage2D)>(*mlib));
    addFieldEx("sparseResidencyImage3D", "sparseResidencyImage3D", offsetof(ManagedType, sparseResidencyImage3D), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidencyImage3D)>(*mlib));
    addFieldEx("sparseResidency2Samples", "sparseResidency2Samples", offsetof(ManagedType, sparseResidency2Samples), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidency2Samples)>(*mlib));
    addFieldEx("sparseResidency4Samples", "sparseResidency4Samples", offsetof(ManagedType, sparseResidency4Samples), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidency4Samples)>(*mlib));
    addFieldEx("sparseResidency8Samples", "sparseResidency8Samples", offsetof(ManagedType, sparseResidency8Samples), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidency8Samples)>(*mlib));
    addFieldEx("sparseResidency16Samples", "sparseResidency16Samples", offsetof(ManagedType, sparseResidency16Samples), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidency16Samples)>(*mlib));
    addFieldEx("sparseResidencyAliased", "sparseResidencyAliased", offsetof(ManagedType, sparseResidencyAliased), das::makeFieldType<decltype(das::declval<ManagedType>().sparseResidencyAliased)>(*mlib));
    addFieldEx("variableMultisampleRate", "variableMultisampleRate", offsetof(ManagedType, variableMultisampleRate), das::makeFieldType<decltype(das::declval<ManagedType>().variableMultisampleRate)>(*mlib));
    addFieldEx("inheritedQueries", "inheritedQueries", offsetof(ManagedType, inheritedQueries), das::makeFieldType<decltype(das::declval<ManagedType>().inheritedQueries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceCreateInfoAnnotation : ManagedStructureAnnotation<VkDeviceCreateInfo> {
  VkDeviceCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("queueCreateInfoCount", "queueCreateInfoCount", offsetof(ManagedType, queueCreateInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueCreateInfoCount)>(*mlib));
    addFieldEx("pQueueCreateInfos", "pQueueCreateInfos", offsetof(ManagedType, pQueueCreateInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueCreateInfos)>(*mlib));
    addFieldEx("enabledLayerCount", "enabledLayerCount", offsetof(ManagedType, enabledLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().enabledLayerCount)>(*mlib));
    addFieldEx("ppEnabledLayerNames", "ppEnabledLayerNames", offsetof(ManagedType, ppEnabledLayerNames), das::makeFieldType<decltype(das::declval<ManagedType>().ppEnabledLayerNames)>(*mlib));
    addFieldEx("enabledExtensionCount", "enabledExtensionCount", offsetof(ManagedType, enabledExtensionCount), das::makeFieldType<decltype(das::declval<ManagedType>().enabledExtensionCount)>(*mlib));
    addFieldEx("ppEnabledExtensionNames", "ppEnabledExtensionNames", offsetof(ManagedType, ppEnabledExtensionNames), das::makeFieldType<decltype(das::declval<ManagedType>().ppEnabledExtensionNames)>(*mlib));
    addFieldEx("pEnabledFeatures", "pEnabledFeatures", offsetof(ManagedType, pEnabledFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().pEnabledFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_memory_report)
struct VkDeviceDeviceMemoryReportCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkDeviceDeviceMemoryReportCreateInfoEXT> {
  VkDeviceDeviceMemoryReportCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceDeviceMemoryReportCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pfnUserCallback", "pfnUserCallback", offsetof(ManagedType, pfnUserCallback), das::makeFieldType<decltype(das::declval<ManagedType>().pfnUserCallback)>(*mlib));
    addFieldEx("pUserData", "pUserData", offsetof(ManagedType, pUserData), das::makeFieldType<decltype(das::declval<ManagedType>().pUserData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_NV_device_diagnostics_config)
struct VkDeviceDiagnosticsConfigCreateInfoNVAnnotation : ManagedStructureAnnotation<VkDeviceDiagnosticsConfigCreateInfoNV> {
  VkDeviceDiagnosticsConfigCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceDiagnosticsConfigCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostics_config) */
#if defined(VK_EXT_display_control)
struct VkDeviceEventInfoEXTAnnotation : ManagedStructureAnnotation<VkDeviceEventInfoEXT> {
  VkDeviceEventInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceEventInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceEvent", "deviceEvent", offsetof(ManagedType, deviceEvent), das::makeFieldType<decltype(das::declval<ManagedType>().deviceEvent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_device_fault)
struct VkDeviceFaultAddressInfoEXTAnnotation : ManagedStructureAnnotation<VkDeviceFaultAddressInfoEXT> {
  VkDeviceFaultAddressInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceFaultAddressInfoEXT", lib) {
    addFieldEx("addressType", "addressType", offsetof(ManagedType, addressType), das::makeFieldType<decltype(das::declval<ManagedType>().addressType)>(*mlib));
    addFieldEx("reportedAddress", "reportedAddress", offsetof(ManagedType, reportedAddress), das::makeFieldType<decltype(das::declval<ManagedType>().reportedAddress)>(*mlib));
    addFieldEx("addressPrecision", "addressPrecision", offsetof(ManagedType, addressPrecision), das::makeFieldType<decltype(das::declval<ManagedType>().addressPrecision)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceFaultCountsEXTAnnotation : ManagedStructureAnnotation<VkDeviceFaultCountsEXT> {
  VkDeviceFaultCountsEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceFaultCountsEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("addressInfoCount", "addressInfoCount", offsetof(ManagedType, addressInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().addressInfoCount)>(*mlib));
    addFieldEx("vendorInfoCount", "vendorInfoCount", offsetof(ManagedType, vendorInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().vendorInfoCount)>(*mlib));
    addFieldEx("vendorBinarySize", "vendorBinarySize", offsetof(ManagedType, vendorBinarySize), das::makeFieldType<decltype(das::declval<ManagedType>().vendorBinarySize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceFaultVendorInfoEXTAnnotation : ManagedStructureAnnotation<VkDeviceFaultVendorInfoEXT> {
  VkDeviceFaultVendorInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceFaultVendorInfoEXT", lib) {
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("vendorFaultCode", "vendorFaultCode", offsetof(ManagedType, vendorFaultCode), das::makeFieldType<decltype(das::declval<ManagedType>().vendorFaultCode)>(*mlib));
    addFieldEx("vendorFaultData", "vendorFaultData", offsetof(ManagedType, vendorFaultData), das::makeFieldType<decltype(das::declval<ManagedType>().vendorFaultData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceFaultInfoEXTAnnotation : ManagedStructureAnnotation<VkDeviceFaultInfoEXT> {
  VkDeviceFaultInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceFaultInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("pAddressInfos", "pAddressInfos", offsetof(ManagedType, pAddressInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pAddressInfos)>(*mlib));
    addFieldEx("pVendorInfos", "pVendorInfos", offsetof(ManagedType, pVendorInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pVendorInfos)>(*mlib));
    addFieldEx("pVendorBinaryData", "pVendorBinaryData", offsetof(ManagedType, pVendorBinaryData), das::makeFieldType<decltype(das::declval<ManagedType>().pVendorBinaryData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceFaultVendorBinaryHeaderVersionOneEXTAnnotation : ManagedStructureAnnotation<VkDeviceFaultVendorBinaryHeaderVersionOneEXT> {
  VkDeviceFaultVendorBinaryHeaderVersionOneEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceFaultVendorBinaryHeaderVersionOneEXT", lib) {
    addFieldEx("headerSize", "headerSize", offsetof(ManagedType, headerSize), das::makeFieldType<decltype(das::declval<ManagedType>().headerSize)>(*mlib));
    addFieldEx("headerVersion", "headerVersion", offsetof(ManagedType, headerVersion), das::makeFieldType<decltype(das::declval<ManagedType>().headerVersion)>(*mlib));
    addFieldEx("vendorID", "vendorID", offsetof(ManagedType, vendorID), das::makeFieldType<decltype(das::declval<ManagedType>().vendorID)>(*mlib));
    addFieldEx("deviceID", "deviceID", offsetof(ManagedType, deviceID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceID)>(*mlib));
    addFieldEx("driverVersion", "driverVersion", offsetof(ManagedType, driverVersion), das::makeFieldType<decltype(das::declval<ManagedType>().driverVersion)>(*mlib));
    addFieldEx("pipelineCacheUUID", "pipelineCacheUUID", offsetof(ManagedType, pipelineCacheUUID), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCacheUUID)>(*mlib));
    addFieldEx("applicationNameOffset", "applicationNameOffset", offsetof(ManagedType, applicationNameOffset), das::makeFieldType<decltype(das::declval<ManagedType>().applicationNameOffset)>(*mlib));
    addFieldEx("applicationVersion", "applicationVersion", offsetof(ManagedType, applicationVersion), das::makeFieldType<decltype(das::declval<ManagedType>().applicationVersion)>(*mlib));
    addFieldEx("engineNameOffset", "engineNameOffset", offsetof(ManagedType, engineNameOffset), das::makeFieldType<decltype(das::declval<ManagedType>().engineNameOffset)>(*mlib));
    addFieldEx("engineVersion", "engineVersion", offsetof(ManagedType, engineVersion), das::makeFieldType<decltype(das::declval<ManagedType>().engineVersion)>(*mlib));
    addFieldEx("apiVersion", "apiVersion", offsetof(ManagedType, apiVersion), das::makeFieldType<decltype(das::declval<ManagedType>().apiVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_VERSION_1_1)
struct VkDeviceGroupBindSparseInfoAnnotation : ManagedStructureAnnotation<VkDeviceGroupBindSparseInfo> {
  VkDeviceGroupBindSparseInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupBindSparseInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("resourceDeviceIndex", "resourceDeviceIndex", offsetof(ManagedType, resourceDeviceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().resourceDeviceIndex)>(*mlib));
    addFieldEx("memoryDeviceIndex", "memoryDeviceIndex", offsetof(ManagedType, memoryDeviceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().memoryDeviceIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceGroupCommandBufferBeginInfoAnnotation : ManagedStructureAnnotation<VkDeviceGroupCommandBufferBeginInfo> {
  VkDeviceGroupCommandBufferBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupCommandBufferBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceMask", "deviceMask", offsetof(ManagedType, deviceMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceGroupDeviceCreateInfoAnnotation : ManagedStructureAnnotation<VkDeviceGroupDeviceCreateInfo> {
  VkDeviceGroupDeviceCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupDeviceCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("physicalDeviceCount", "physicalDeviceCount", offsetof(ManagedType, physicalDeviceCount), das::makeFieldType<decltype(das::declval<ManagedType>().physicalDeviceCount)>(*mlib));
    addFieldEx("pPhysicalDevices", "pPhysicalDevices", offsetof(ManagedType, pPhysicalDevices), das::makeFieldType<decltype(das::declval<ManagedType>().pPhysicalDevices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkDeviceGroupPresentCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkDeviceGroupPresentCapabilitiesKHR> {
  VkDeviceGroupPresentCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupPresentCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentMask", "presentMask", offsetof(ManagedType, presentMask), das::makeFieldType<decltype(das::declval<ManagedType>().presentMask)>(*mlib));
    addFieldEx("modes", "modes", offsetof(ManagedType, modes), das::makeFieldType<decltype(das::declval<ManagedType>().modes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkDeviceGroupPresentInfoKHRAnnotation : ManagedStructureAnnotation<VkDeviceGroupPresentInfoKHR> {
  VkDeviceGroupPresentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupPresentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pDeviceMasks", "pDeviceMasks", offsetof(ManagedType, pDeviceMasks), das::makeFieldType<decltype(das::declval<ManagedType>().pDeviceMasks)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_1)
struct VkDeviceGroupRenderPassBeginInfoAnnotation : ManagedStructureAnnotation<VkDeviceGroupRenderPassBeginInfo> {
  VkDeviceGroupRenderPassBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupRenderPassBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceMask", "deviceMask", offsetof(ManagedType, deviceMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMask)>(*mlib));
    addFieldEx("deviceRenderAreaCount", "deviceRenderAreaCount", offsetof(ManagedType, deviceRenderAreaCount), das::makeFieldType<decltype(das::declval<ManagedType>().deviceRenderAreaCount)>(*mlib));
    addFieldEx("pDeviceRenderAreas", "pDeviceRenderAreas", offsetof(ManagedType, pDeviceRenderAreas), das::makeFieldType<decltype(das::declval<ManagedType>().pDeviceRenderAreas)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceGroupSubmitInfoAnnotation : ManagedStructureAnnotation<VkDeviceGroupSubmitInfo> {
  VkDeviceGroupSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreCount", "waitSemaphoreCount", offsetof(ManagedType, waitSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreCount)>(*mlib));
    addFieldEx("pWaitSemaphoreDeviceIndices", "pWaitSemaphoreDeviceIndices", offsetof(ManagedType, pWaitSemaphoreDeviceIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphoreDeviceIndices)>(*mlib));
    addFieldEx("commandBufferCount", "commandBufferCount", offsetof(ManagedType, commandBufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().commandBufferCount)>(*mlib));
    addFieldEx("pCommandBufferDeviceMasks", "pCommandBufferDeviceMasks", offsetof(ManagedType, pCommandBufferDeviceMasks), das::makeFieldType<decltype(das::declval<ManagedType>().pCommandBufferDeviceMasks)>(*mlib));
    addFieldEx("signalSemaphoreCount", "signalSemaphoreCount", offsetof(ManagedType, signalSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreCount)>(*mlib));
    addFieldEx("pSignalSemaphoreDeviceIndices", "pSignalSemaphoreDeviceIndices", offsetof(ManagedType, pSignalSemaphoreDeviceIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphoreDeviceIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkDeviceGroupSwapchainCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkDeviceGroupSwapchainCreateInfoKHR> {
  VkDeviceGroupSwapchainCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceGroupSwapchainCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("modes", "modes", offsetof(ManagedType, modes), das::makeFieldType<decltype(das::declval<ManagedType>().modes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_0)
struct VkImageCreateInfoAnnotation : ManagedStructureAnnotation<VkImageCreateInfo> {
  VkImageCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("imageType", "imageType", offsetof(ManagedType, imageType), das::makeFieldType<decltype(das::declval<ManagedType>().imageType)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
    addFieldEx("mipLevels", "mipLevels", offsetof(ManagedType, mipLevels), das::makeFieldType<decltype(das::declval<ManagedType>().mipLevels)>(*mlib));
    addFieldEx("arrayLayers", "arrayLayers", offsetof(ManagedType, arrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().arrayLayers)>(*mlib));
    addFieldEx("samples", "samples", offsetof(ManagedType, samples), das::makeFieldType<decltype(das::declval<ManagedType>().samples)>(*mlib));
    addFieldEx("tiling", "tiling", offsetof(ManagedType, tiling), das::makeFieldType<decltype(das::declval<ManagedType>().tiling)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("sharingMode", "sharingMode", offsetof(ManagedType, sharingMode), das::makeFieldType<decltype(das::declval<ManagedType>().sharingMode)>(*mlib));
    addFieldEx("queueFamilyIndexCount", "queueFamilyIndexCount", offsetof(ManagedType, queueFamilyIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndexCount)>(*mlib));
    addFieldEx("pQueueFamilyIndices", "pQueueFamilyIndices", offsetof(ManagedType, pQueueFamilyIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueFamilyIndices)>(*mlib));
    addFieldEx("initialLayout", "initialLayout", offsetof(ManagedType, initialLayout), das::makeFieldType<decltype(das::declval<ManagedType>().initialLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkDeviceImageMemoryRequirementsAnnotation : ManagedStructureAnnotation<VkDeviceImageMemoryRequirements> {
  VkDeviceImageMemoryRequirementsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceImageMemoryRequirements", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pCreateInfo", "pCreateInfo", offsetof(ManagedType, pCreateInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pCreateInfo)>(*mlib));
    addFieldEx("planeAspect", "planeAspect", offsetof(ManagedType, planeAspect), das::makeFieldType<decltype(das::declval<ManagedType>().planeAspect)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkImageSubresource2Annotation : ManagedStructureAnnotation<VkImageSubresource2> {
  VkImageSubresource2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSubresource2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageSubresource", "imageSubresource", offsetof(ManagedType, imageSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().imageSubresource)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDeviceImageSubresourceInfoAnnotation : ManagedStructureAnnotation<VkDeviceImageSubresourceInfo> {
  VkDeviceImageSubresourceInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceImageSubresourceInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pCreateInfo", "pCreateInfo", offsetof(ManagedType, pCreateInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pCreateInfo)>(*mlib));
    addFieldEx("pSubresource", "pSubresource", offsetof(ManagedType, pSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().pSubresource)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
struct VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation : ManagedStructureAnnotation<VkDeviceMemoryOpaqueCaptureAddressInfo> {
  VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceMemoryOpaqueCaptureAddressInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_AMD_memory_overallocation_behavior)
struct VkDeviceMemoryOverallocationCreateInfoAMDAnnotation : ManagedStructureAnnotation<VkDeviceMemoryOverallocationCreateInfoAMD> {
  VkDeviceMemoryOverallocationCreateInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceMemoryOverallocationCreateInfoAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("overallocationBehavior", "overallocationBehavior", offsetof(ManagedType, overallocationBehavior), das::makeFieldType<decltype(das::declval<ManagedType>().overallocationBehavior)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_memory_overallocation_behavior) */
#if defined(VK_EXT_device_memory_report)
struct VkDeviceMemoryReportCallbackDataEXTAnnotation : ManagedStructureAnnotation<VkDeviceMemoryReportCallbackDataEXT> {
  VkDeviceMemoryReportCallbackDataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceMemoryReportCallbackDataEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("memoryObjectId", "memoryObjectId", offsetof(ManagedType, memoryObjectId), das::makeFieldType<decltype(das::declval<ManagedType>().memoryObjectId)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("objectType", "objectType", offsetof(ManagedType, objectType), das::makeFieldType<decltype(das::declval<ManagedType>().objectType)>(*mlib));
    addFieldEx("objectHandle", "objectHandle", offsetof(ManagedType, objectHandle), das::makeFieldType<decltype(das::declval<ManagedType>().objectHandle)>(*mlib));
    addFieldEx("heapIndex", "heapIndex", offsetof(ManagedType, heapIndex), das::makeFieldType<decltype(das::declval<ManagedType>().heapIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_AMDX_shader_enqueue)
struct VkDeviceOrHostAddressConstAMDXAnnotation : ManagedStructureAnnotation<VkDeviceOrHostAddressConstAMDX> {
  VkDeviceOrHostAddressConstAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceOrHostAddressConstAMDX", lib) {
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("hostAddress", "hostAddress", offsetof(ManagedType, hostAddress), das::makeFieldType<decltype(das::declval<ManagedType>().hostAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_KHR_pipeline_binary)
struct VkDevicePipelineBinaryInternalCacheControlKHRAnnotation : ManagedStructureAnnotation<VkDevicePipelineBinaryInternalCacheControlKHR> {
  VkDevicePipelineBinaryInternalCacheControlKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDevicePipelineBinaryInternalCacheControlKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("disableInternalCache", "disableInternalCache", offsetof(ManagedType, disableInternalCache), das::makeFieldType<decltype(das::declval<ManagedType>().disableInternalCache)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_3)
struct VkDevicePrivateDataCreateInfoAnnotation : ManagedStructureAnnotation<VkDevicePrivateDataCreateInfo> {
  VkDevicePrivateDataCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDevicePrivateDataCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("privateDataSlotRequestCount", "privateDataSlotRequestCount", offsetof(ManagedType, privateDataSlotRequestCount), das::makeFieldType<decltype(das::declval<ManagedType>().privateDataSlotRequestCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkDeviceQueueGlobalPriorityCreateInfoAnnotation : ManagedStructureAnnotation<VkDeviceQueueGlobalPriorityCreateInfo> {
  VkDeviceQueueGlobalPriorityCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceQueueGlobalPriorityCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("globalPriority", "globalPriority", offsetof(ManagedType, globalPriority), das::makeFieldType<decltype(das::declval<ManagedType>().globalPriority)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_1)
struct VkDeviceQueueInfo2Annotation : ManagedStructureAnnotation<VkDeviceQueueInfo2> {
  VkDeviceQueueInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceQueueInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("queueFamilyIndex", "queueFamilyIndex", offsetof(ManagedType, queueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndex)>(*mlib));
    addFieldEx("queueIndex", "queueIndex", offsetof(ManagedType, queueIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ARM_scheduling_controls)
struct VkDeviceQueueShaderCoreControlCreateInfoARMAnnotation : ManagedStructureAnnotation<VkDeviceQueueShaderCoreControlCreateInfoARM> {
  VkDeviceQueueShaderCoreControlCreateInfoARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDeviceQueueShaderCoreControlCreateInfoARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCoreCount", "shaderCoreCount", offsetof(ManagedType, shaderCoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCoreCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_scheduling_controls) */
#if defined(VK_LUNARG_direct_driver_loading)
struct VkDirectDriverLoadingInfoLUNARGAnnotation : ManagedStructureAnnotation<VkDirectDriverLoadingInfoLUNARG> {
  VkDirectDriverLoadingInfoLUNARGAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDirectDriverLoadingInfoLUNARG", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pfnGetInstanceProcAddr", "pfnGetInstanceProcAddr", offsetof(ManagedType, pfnGetInstanceProcAddr), das::makeFieldType<decltype(das::declval<ManagedType>().pfnGetInstanceProcAddr)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDirectDriverLoadingListLUNARGAnnotation : ManagedStructureAnnotation<VkDirectDriverLoadingListLUNARG> {
  VkDirectDriverLoadingListLUNARGAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDirectDriverLoadingListLUNARG", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
    addFieldEx("driverCount", "driverCount", offsetof(ManagedType, driverCount), das::makeFieldType<decltype(das::declval<ManagedType>().driverCount)>(*mlib));
    addFieldEx("pDrivers", "pDrivers", offsetof(ManagedType, pDrivers), das::makeFieldType<decltype(das::declval<ManagedType>().pDrivers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_LUNARG_direct_driver_loading) */
#if defined(VK_EXT_directfb_surface)
struct VkDirectFBSurfaceCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkDirectFBSurfaceCreateInfoEXT> {
  VkDirectFBSurfaceCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDirectFBSurfaceCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("dfb", "dfb", offsetof(ManagedType, dfb), das::makeFieldType<decltype(das::declval<ManagedType>().dfb)>(*mlib));
    addFieldEx("surface", "surface", offsetof(ManagedType, surface), das::makeFieldType<decltype(das::declval<ManagedType>().surface)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_AMDX_shader_enqueue)
struct VkDispatchGraphCountInfoAMDXAnnotation : ManagedStructureAnnotation<VkDispatchGraphCountInfoAMDX> {
  VkDispatchGraphCountInfoAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDispatchGraphCountInfoAMDX", lib) {
    addFieldEx("count", "count", offsetof(ManagedType, count), das::makeFieldType<decltype(das::declval<ManagedType>().count)>(*mlib));
    addFieldEx("infos", "infos", offsetof(ManagedType, infos), das::makeFieldType<decltype(das::declval<ManagedType>().infos)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDispatchGraphInfoAMDXAnnotation : ManagedStructureAnnotation<VkDispatchGraphInfoAMDX> {
  VkDispatchGraphInfoAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDispatchGraphInfoAMDX", lib) {
    addFieldEx("nodeIndex", "nodeIndex", offsetof(ManagedType, nodeIndex), das::makeFieldType<decltype(das::declval<ManagedType>().nodeIndex)>(*mlib));
    addFieldEx("payloadCount", "payloadCount", offsetof(ManagedType, payloadCount), das::makeFieldType<decltype(das::declval<ManagedType>().payloadCount)>(*mlib));
    addFieldEx("payloads", "payloads", offsetof(ManagedType, payloads), das::makeFieldType<decltype(das::declval<ManagedType>().payloads)>(*mlib));
    addFieldEx("payloadStride", "payloadStride", offsetof(ManagedType, payloadStride), das::makeFieldType<decltype(das::declval<ManagedType>().payloadStride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_0)
struct VkDispatchIndirectCommandAnnotation : ManagedStructureAnnotation<VkDispatchIndirectCommand> {
  VkDispatchIndirectCommandAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDispatchIndirectCommand", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
    addFieldEx("z", "z", offsetof(ManagedType, z), das::makeFieldType<decltype(das::declval<ManagedType>().z)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_display_control)
struct VkDisplayEventInfoEXTAnnotation : ManagedStructureAnnotation<VkDisplayEventInfoEXT> {
  VkDisplayEventInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayEventInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displayEvent", "displayEvent", offsetof(ManagedType, displayEvent), das::makeFieldType<decltype(das::declval<ManagedType>().displayEvent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_display)
struct VkDisplayModeParametersKHRAnnotation : ManagedStructureAnnotation<VkDisplayModeParametersKHR> {
  VkDisplayModeParametersKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayModeParametersKHR", lib) {
    addFieldEx("visibleRegion", "visibleRegion", offsetof(ManagedType, visibleRegion), das::makeFieldType<decltype(das::declval<ManagedType>().visibleRegion)>(*mlib));
    addFieldEx("refreshRate", "refreshRate", offsetof(ManagedType, refreshRate), das::makeFieldType<decltype(das::declval<ManagedType>().refreshRate)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDisplayModeCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkDisplayModeCreateInfoKHR> {
  VkDisplayModeCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayModeCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("parameters", "parameters", offsetof(ManagedType, parameters), das::makeFieldType<decltype(das::declval<ManagedType>().parameters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDisplayModePropertiesKHRAnnotation : ManagedStructureAnnotation<VkDisplayModePropertiesKHR> {
  VkDisplayModePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayModePropertiesKHR", lib) {
    addFieldEx("displayMode", "displayMode", offsetof(ManagedType, displayMode), das::makeFieldType<decltype(das::declval<ManagedType>().displayMode)>(*mlib));
    addFieldEx("parameters", "parameters", offsetof(ManagedType, parameters), das::makeFieldType<decltype(das::declval<ManagedType>().parameters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
struct VkDisplayModeProperties2KHRAnnotation : ManagedStructureAnnotation<VkDisplayModeProperties2KHR> {
  VkDisplayModeProperties2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayModeProperties2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displayModeProperties", "displayModeProperties", offsetof(ManagedType, displayModeProperties), das::makeFieldType<decltype(das::declval<ManagedType>().displayModeProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_NV_display_stereo)
struct VkDisplayModeStereoPropertiesNVAnnotation : ManagedStructureAnnotation<VkDisplayModeStereoPropertiesNV> {
  VkDisplayModeStereoPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayModeStereoPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hdmi3DSupported", "hdmi3DSupported", offsetof(ManagedType, hdmi3DSupported), das::makeFieldType<decltype(das::declval<ManagedType>().hdmi3DSupported)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_display_stereo) */
#if defined(VK_AMD_display_native_hdr)
struct VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation : ManagedStructureAnnotation<VkDisplayNativeHdrSurfaceCapabilitiesAMD> {
  VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayNativeHdrSurfaceCapabilitiesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("localDimmingSupport", "localDimmingSupport", offsetof(ManagedType, localDimmingSupport), das::makeFieldType<decltype(das::declval<ManagedType>().localDimmingSupport)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_KHR_display)
struct VkDisplayPlaneCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkDisplayPlaneCapabilitiesKHR> {
  VkDisplayPlaneCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPlaneCapabilitiesKHR", lib) {
    addFieldEx("supportedAlpha", "supportedAlpha", offsetof(ManagedType, supportedAlpha), das::makeFieldType<decltype(das::declval<ManagedType>().supportedAlpha)>(*mlib));
    addFieldEx("minSrcPosition", "minSrcPosition", offsetof(ManagedType, minSrcPosition), das::makeFieldType<decltype(das::declval<ManagedType>().minSrcPosition)>(*mlib));
    addFieldEx("maxSrcPosition", "maxSrcPosition", offsetof(ManagedType, maxSrcPosition), das::makeFieldType<decltype(das::declval<ManagedType>().maxSrcPosition)>(*mlib));
    addFieldEx("minSrcExtent", "minSrcExtent", offsetof(ManagedType, minSrcExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minSrcExtent)>(*mlib));
    addFieldEx("maxSrcExtent", "maxSrcExtent", offsetof(ManagedType, maxSrcExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxSrcExtent)>(*mlib));
    addFieldEx("minDstPosition", "minDstPosition", offsetof(ManagedType, minDstPosition), das::makeFieldType<decltype(das::declval<ManagedType>().minDstPosition)>(*mlib));
    addFieldEx("maxDstPosition", "maxDstPosition", offsetof(ManagedType, maxDstPosition), das::makeFieldType<decltype(das::declval<ManagedType>().maxDstPosition)>(*mlib));
    addFieldEx("minDstExtent", "minDstExtent", offsetof(ManagedType, minDstExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minDstExtent)>(*mlib));
    addFieldEx("maxDstExtent", "maxDstExtent", offsetof(ManagedType, maxDstExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxDstExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
struct VkDisplayPlaneCapabilities2KHRAnnotation : ManagedStructureAnnotation<VkDisplayPlaneCapabilities2KHR> {
  VkDisplayPlaneCapabilities2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPlaneCapabilities2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("capabilities", "capabilities", offsetof(ManagedType, capabilities), das::makeFieldType<decltype(das::declval<ManagedType>().capabilities)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDisplayPlaneInfo2KHRAnnotation : ManagedStructureAnnotation<VkDisplayPlaneInfo2KHR> {
  VkDisplayPlaneInfo2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPlaneInfo2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
    addFieldEx("planeIndex", "planeIndex", offsetof(ManagedType, planeIndex), das::makeFieldType<decltype(das::declval<ManagedType>().planeIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_display)
struct VkDisplayPlanePropertiesKHRAnnotation : ManagedStructureAnnotation<VkDisplayPlanePropertiesKHR> {
  VkDisplayPlanePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPlanePropertiesKHR", lib) {
    addFieldEx("currentDisplay", "currentDisplay", offsetof(ManagedType, currentDisplay), das::makeFieldType<decltype(das::declval<ManagedType>().currentDisplay)>(*mlib));
    addFieldEx("currentStackIndex", "currentStackIndex", offsetof(ManagedType, currentStackIndex), das::makeFieldType<decltype(das::declval<ManagedType>().currentStackIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
struct VkDisplayPlaneProperties2KHRAnnotation : ManagedStructureAnnotation<VkDisplayPlaneProperties2KHR> {
  VkDisplayPlaneProperties2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPlaneProperties2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displayPlaneProperties", "displayPlaneProperties", offsetof(ManagedType, displayPlaneProperties), das::makeFieldType<decltype(das::declval<ManagedType>().displayPlaneProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_EXT_display_control)
struct VkDisplayPowerInfoEXTAnnotation : ManagedStructureAnnotation<VkDisplayPowerInfoEXT> {
  VkDisplayPowerInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPowerInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("powerState", "powerState", offsetof(ManagedType, powerState), das::makeFieldType<decltype(das::declval<ManagedType>().powerState)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_display_swapchain)
struct VkDisplayPresentInfoKHRAnnotation : ManagedStructureAnnotation<VkDisplayPresentInfoKHR> {
  VkDisplayPresentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPresentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcRect", "srcRect", offsetof(ManagedType, srcRect), das::makeFieldType<decltype(das::declval<ManagedType>().srcRect)>(*mlib));
    addFieldEx("dstRect", "dstRect", offsetof(ManagedType, dstRect), das::makeFieldType<decltype(das::declval<ManagedType>().dstRect)>(*mlib));
    addFieldEx("persistent", "persistent", offsetof(ManagedType, persistent), das::makeFieldType<decltype(das::declval<ManagedType>().persistent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_display)
struct VkDisplayPropertiesKHRAnnotation : ManagedStructureAnnotation<VkDisplayPropertiesKHR> {
  VkDisplayPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayPropertiesKHR", lib) {
    addFieldEx("display", "display", offsetof(ManagedType, display), das::makeFieldType<decltype(das::declval<ManagedType>().display)>(*mlib));
    addFieldEx("displayName", "displayName", offsetof(ManagedType, displayName), das::makeFieldType<decltype(das::declval<ManagedType>().displayName)>(*mlib));
    addFieldEx("physicalDimensions", "physicalDimensions", offsetof(ManagedType, physicalDimensions), das::makeFieldType<decltype(das::declval<ManagedType>().physicalDimensions)>(*mlib));
    addFieldEx("physicalResolution", "physicalResolution", offsetof(ManagedType, physicalResolution), das::makeFieldType<decltype(das::declval<ManagedType>().physicalResolution)>(*mlib));
    addFieldEx("supportedTransforms", "supportedTransforms", offsetof(ManagedType, supportedTransforms), das::makeFieldType<decltype(das::declval<ManagedType>().supportedTransforms)>(*mlib));
    addFieldEx("planeReorderPossible", "planeReorderPossible", offsetof(ManagedType, planeReorderPossible), das::makeFieldType<decltype(das::declval<ManagedType>().planeReorderPossible)>(*mlib));
    addFieldEx("persistentContent", "persistentContent", offsetof(ManagedType, persistentContent), das::makeFieldType<decltype(das::declval<ManagedType>().persistentContent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
struct VkDisplayProperties2KHRAnnotation : ManagedStructureAnnotation<VkDisplayProperties2KHR> {
  VkDisplayProperties2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplayProperties2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displayProperties", "displayProperties", offsetof(ManagedType, displayProperties), das::makeFieldType<decltype(das::declval<ManagedType>().displayProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_display)
struct VkDisplaySurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkDisplaySurfaceCreateInfoKHR> {
  VkDisplaySurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplaySurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("displayMode", "displayMode", offsetof(ManagedType, displayMode), das::makeFieldType<decltype(das::declval<ManagedType>().displayMode)>(*mlib));
    addFieldEx("planeIndex", "planeIndex", offsetof(ManagedType, planeIndex), das::makeFieldType<decltype(das::declval<ManagedType>().planeIndex)>(*mlib));
    addFieldEx("planeStackIndex", "planeStackIndex", offsetof(ManagedType, planeStackIndex), das::makeFieldType<decltype(das::declval<ManagedType>().planeStackIndex)>(*mlib));
    addFieldEx("transform", "transform", offsetof(ManagedType, transform), das::makeFieldType<decltype(das::declval<ManagedType>().transform)>(*mlib));
    addFieldEx("globalAlpha", "globalAlpha", offsetof(ManagedType, globalAlpha), das::makeFieldType<decltype(das::declval<ManagedType>().globalAlpha)>(*mlib));
    addFieldEx("alphaMode", "alphaMode", offsetof(ManagedType, alphaMode), das::makeFieldType<decltype(das::declval<ManagedType>().alphaMode)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_display) */
#if defined(VK_NV_display_stereo)
struct VkDisplaySurfaceStereoCreateInfoNVAnnotation : ManagedStructureAnnotation<VkDisplaySurfaceStereoCreateInfoNV> {
  VkDisplaySurfaceStereoCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDisplaySurfaceStereoCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stereoType", "stereoType", offsetof(ManagedType, stereoType), das::makeFieldType<decltype(das::declval<ManagedType>().stereoType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_display_stereo) */
#if defined(VK_VERSION_1_0)
struct VkDrawIndexedIndirectCommandAnnotation : ManagedStructureAnnotation<VkDrawIndexedIndirectCommand> {
  VkDrawIndexedIndirectCommandAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrawIndexedIndirectCommand", lib) {
    addFieldEx("indexCount", "indexCount", offsetof(ManagedType, indexCount), das::makeFieldType<decltype(das::declval<ManagedType>().indexCount)>(*mlib));
    addFieldEx("instanceCount", "instanceCount", offsetof(ManagedType, instanceCount), das::makeFieldType<decltype(das::declval<ManagedType>().instanceCount)>(*mlib));
    addFieldEx("firstIndex", "firstIndex", offsetof(ManagedType, firstIndex), das::makeFieldType<decltype(das::declval<ManagedType>().firstIndex)>(*mlib));
    addFieldEx("vertexOffset", "vertexOffset", offsetof(ManagedType, vertexOffset), das::makeFieldType<decltype(das::declval<ManagedType>().vertexOffset)>(*mlib));
    addFieldEx("firstInstance", "firstInstance", offsetof(ManagedType, firstInstance), das::makeFieldType<decltype(das::declval<ManagedType>().firstInstance)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkDrawIndirectCommandAnnotation : ManagedStructureAnnotation<VkDrawIndirectCommand> {
  VkDrawIndirectCommandAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrawIndirectCommand", lib) {
    addFieldEx("vertexCount", "vertexCount", offsetof(ManagedType, vertexCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexCount)>(*mlib));
    addFieldEx("instanceCount", "instanceCount", offsetof(ManagedType, instanceCount), das::makeFieldType<decltype(das::declval<ManagedType>().instanceCount)>(*mlib));
    addFieldEx("firstVertex", "firstVertex", offsetof(ManagedType, firstVertex), das::makeFieldType<decltype(das::declval<ManagedType>().firstVertex)>(*mlib));
    addFieldEx("firstInstance", "firstInstance", offsetof(ManagedType, firstInstance), das::makeFieldType<decltype(das::declval<ManagedType>().firstInstance)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
struct VkDrawIndirectCountIndirectCommandEXTAnnotation : ManagedStructureAnnotation<VkDrawIndirectCountIndirectCommandEXT> {
  VkDrawIndirectCountIndirectCommandEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrawIndirectCountIndirectCommandEXT", lib) {
    addFieldEx("bufferAddress", "bufferAddress", offsetof(ManagedType, bufferAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferAddress)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
    addFieldEx("commandCount", "commandCount", offsetof(ManagedType, commandCount), das::makeFieldType<decltype(das::declval<ManagedType>().commandCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_EXT_mesh_shader)
struct VkDrawMeshTasksIndirectCommandEXTAnnotation : ManagedStructureAnnotation<VkDrawMeshTasksIndirectCommandEXT> {
  VkDrawMeshTasksIndirectCommandEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrawMeshTasksIndirectCommandEXT", lib) {
    addFieldEx("groupCountX", "groupCountX", offsetof(ManagedType, groupCountX), das::makeFieldType<decltype(das::declval<ManagedType>().groupCountX)>(*mlib));
    addFieldEx("groupCountY", "groupCountY", offsetof(ManagedType, groupCountY), das::makeFieldType<decltype(das::declval<ManagedType>().groupCountY)>(*mlib));
    addFieldEx("groupCountZ", "groupCountZ", offsetof(ManagedType, groupCountZ), das::makeFieldType<decltype(das::declval<ManagedType>().groupCountZ)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
struct VkDrawMeshTasksIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkDrawMeshTasksIndirectCommandNV> {
  VkDrawMeshTasksIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrawMeshTasksIndirectCommandNV", lib) {
    addFieldEx("taskCount", "taskCount", offsetof(ManagedType, taskCount), das::makeFieldType<decltype(das::declval<ManagedType>().taskCount)>(*mlib));
    addFieldEx("firstTask", "firstTask", offsetof(ManagedType, firstTask), das::makeFieldType<decltype(das::declval<ManagedType>().firstTask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
struct VkDrmFormatModifierProperties2EXTAnnotation : ManagedStructureAnnotation<VkDrmFormatModifierProperties2EXT> {
  VkDrmFormatModifierProperties2EXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrmFormatModifierProperties2EXT", lib) {
    addFieldEx("drmFormatModifier", "drmFormatModifier", offsetof(ManagedType, drmFormatModifier), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifier)>(*mlib));
    addFieldEx("drmFormatModifierPlaneCount", "drmFormatModifierPlaneCount", offsetof(ManagedType, drmFormatModifierPlaneCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierPlaneCount)>(*mlib));
    addFieldEx("drmFormatModifierTilingFeatures", "drmFormatModifierTilingFeatures", offsetof(ManagedType, drmFormatModifierTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierTilingFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_EXT_image_drm_format_modifier)
struct VkDrmFormatModifierPropertiesEXTAnnotation : ManagedStructureAnnotation<VkDrmFormatModifierPropertiesEXT> {
  VkDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrmFormatModifierPropertiesEXT", lib) {
    addFieldEx("drmFormatModifier", "drmFormatModifier", offsetof(ManagedType, drmFormatModifier), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifier)>(*mlib));
    addFieldEx("drmFormatModifierPlaneCount", "drmFormatModifierPlaneCount", offsetof(ManagedType, drmFormatModifierPlaneCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierPlaneCount)>(*mlib));
    addFieldEx("drmFormatModifierTilingFeatures", "drmFormatModifierTilingFeatures", offsetof(ManagedType, drmFormatModifierTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierTilingFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
struct VkDrmFormatModifierPropertiesList2EXTAnnotation : ManagedStructureAnnotation<VkDrmFormatModifierPropertiesList2EXT> {
  VkDrmFormatModifierPropertiesList2EXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrmFormatModifierPropertiesList2EXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifierCount", "drmFormatModifierCount", offsetof(ManagedType, drmFormatModifierCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierCount)>(*mlib));
    addFieldEx("pDrmFormatModifierProperties", "pDrmFormatModifierProperties", offsetof(ManagedType, pDrmFormatModifierProperties), das::makeFieldType<decltype(das::declval<ManagedType>().pDrmFormatModifierProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_EXT_image_drm_format_modifier)
struct VkDrmFormatModifierPropertiesListEXTAnnotation : ManagedStructureAnnotation<VkDrmFormatModifierPropertiesListEXT> {
  VkDrmFormatModifierPropertiesListEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkDrmFormatModifierPropertiesListEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifierCount", "drmFormatModifierCount", offsetof(ManagedType, drmFormatModifierCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierCount)>(*mlib));
    addFieldEx("pDrmFormatModifierProperties", "pDrmFormatModifierProperties", offsetof(ManagedType, pDrmFormatModifierProperties), das::makeFieldType<decltype(das::declval<ManagedType>().pDrmFormatModifierProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_0)
struct VkEventCreateInfoAnnotation : ManagedStructureAnnotation<VkEventCreateInfo> {
  VkEventCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkEventCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_pipeline_library)
struct VkPipelineLibraryCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineLibraryCreateInfoKHR> {
  VkPipelineLibraryCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineLibraryCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("libraryCount", "libraryCount", offsetof(ManagedType, libraryCount), das::makeFieldType<decltype(das::declval<ManagedType>().libraryCount)>(*mlib));
    addFieldEx("pLibraries", "pLibraries", offsetof(ManagedType, pLibraries), das::makeFieldType<decltype(das::declval<ManagedType>().pLibraries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_library) */
#if defined(VK_AMDX_shader_enqueue)
struct VkExecutionGraphPipelineCreateInfoAMDXAnnotation : ManagedStructureAnnotation<VkExecutionGraphPipelineCreateInfoAMDX> {
  VkExecutionGraphPipelineCreateInfoAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExecutionGraphPipelineCreateInfoAMDX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stageCount", "stageCount", offsetof(ManagedType, stageCount), das::makeFieldType<decltype(das::declval<ManagedType>().stageCount)>(*mlib));
    addFieldEx("pStages", "pStages", offsetof(ManagedType, pStages), das::makeFieldType<decltype(das::declval<ManagedType>().pStages)>(*mlib));
    addFieldEx("pLibraryInfo", "pLibraryInfo", offsetof(ManagedType, pLibraryInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pLibraryInfo)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("basePipelineHandle", "basePipelineHandle", offsetof(ManagedType, basePipelineHandle), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineHandle)>(*mlib));
    addFieldEx("basePipelineIndex", "basePipelineIndex", offsetof(ManagedType, basePipelineIndex), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExecutionGraphPipelineScratchSizeAMDXAnnotation : ManagedStructureAnnotation<VkExecutionGraphPipelineScratchSizeAMDX> {
  VkExecutionGraphPipelineScratchSizeAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExecutionGraphPipelineScratchSizeAMDX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minSize", "minSize", offsetof(ManagedType, minSize), das::makeFieldType<decltype(das::declval<ManagedType>().minSize)>(*mlib));
    addFieldEx("maxSize", "maxSize", offsetof(ManagedType, maxSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxSize)>(*mlib));
    addFieldEx("sizeGranularity", "sizeGranularity", offsetof(ManagedType, sizeGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().sizeGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_1)
struct VkExportFenceCreateInfoAnnotation : ManagedStructureAnnotation<VkExportFenceCreateInfo> {
  VkExportFenceCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportFenceCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_fence_win32)
struct VkExportFenceWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkExportFenceWin32HandleInfoKHR> {
  VkExportFenceWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportFenceWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pAttributes", "pAttributes", offsetof(ManagedType, pAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().pAttributes)>(*mlib));
    addFieldEx("dwAccess", "dwAccess", offsetof(ManagedType, dwAccess), das::makeFieldType<decltype(das::declval<ManagedType>().dwAccess)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_VERSION_1_1)
struct VkExportMemoryAllocateInfoAnnotation : ManagedStructureAnnotation<VkExportMemoryAllocateInfo> {
  VkExportMemoryAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMemoryAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NV_external_memory)
struct VkExportMemoryAllocateInfoNVAnnotation : ManagedStructureAnnotation<VkExportMemoryAllocateInfoNV> {
  VkExportMemoryAllocateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMemoryAllocateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory) */
#if defined(VK_KHR_external_memory_win32)
struct VkExportMemoryWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkExportMemoryWin32HandleInfoKHR> {
  VkExportMemoryWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMemoryWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pAttributes", "pAttributes", offsetof(ManagedType, pAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().pAttributes)>(*mlib));
    addFieldEx("dwAccess", "dwAccess", offsetof(ManagedType, dwAccess), das::makeFieldType<decltype(das::declval<ManagedType>().dwAccess)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_NV_external_memory_win32)
struct VkExportMemoryWin32HandleInfoNVAnnotation : ManagedStructureAnnotation<VkExportMemoryWin32HandleInfoNV> {
  VkExportMemoryWin32HandleInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMemoryWin32HandleInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pAttributes", "pAttributes", offsetof(ManagedType, pAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().pAttributes)>(*mlib));
    addFieldEx("dwAccess", "dwAccess", offsetof(ManagedType, dwAccess), das::makeFieldType<decltype(das::declval<ManagedType>().dwAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_EXT_metal_objects)
struct VkExportMetalBufferInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalBufferInfoEXT> {
  VkExportMetalBufferInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalBufferInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("mtlBuffer", "mtlBuffer", offsetof(ManagedType, mtlBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().mtlBuffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalCommandQueueInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalCommandQueueInfoEXT> {
  VkExportMetalCommandQueueInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalCommandQueueInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queue", "queue", offsetof(ManagedType, queue), das::makeFieldType<decltype(das::declval<ManagedType>().queue)>(*mlib));
    addFieldEx("mtlCommandQueue", "mtlCommandQueue", offsetof(ManagedType, mtlCommandQueue), das::makeFieldType<decltype(das::declval<ManagedType>().mtlCommandQueue)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalDeviceInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalDeviceInfoEXT> {
  VkExportMetalDeviceInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalDeviceInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mtlDevice", "mtlDevice", offsetof(ManagedType, mtlDevice), das::makeFieldType<decltype(das::declval<ManagedType>().mtlDevice)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalIOSurfaceInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalIOSurfaceInfoEXT> {
  VkExportMetalIOSurfaceInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalIOSurfaceInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("ioSurface", "ioSurface", offsetof(ManagedType, ioSurface), das::makeFieldType<decltype(das::declval<ManagedType>().ioSurface)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalObjectCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalObjectCreateInfoEXT> {
  VkExportMetalObjectCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalObjectCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("exportObjectType", "exportObjectType", offsetof(ManagedType, exportObjectType), das::makeFieldType<decltype(das::declval<ManagedType>().exportObjectType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalObjectsInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalObjectsInfoEXT> {
  VkExportMetalObjectsInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalObjectsInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalSharedEventInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalSharedEventInfoEXT> {
  VkExportMetalSharedEventInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalSharedEventInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("event", "event", offsetof(ManagedType, event), das::makeFieldType<decltype(das::declval<ManagedType>().event)>(*mlib));
    addFieldEx("mtlSharedEvent", "mtlSharedEvent", offsetof(ManagedType, mtlSharedEvent), das::makeFieldType<decltype(das::declval<ManagedType>().mtlSharedEvent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExportMetalTextureInfoEXTAnnotation : ManagedStructureAnnotation<VkExportMetalTextureInfoEXT> {
  VkExportMetalTextureInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportMetalTextureInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("bufferView", "bufferView", offsetof(ManagedType, bufferView), das::makeFieldType<decltype(das::declval<ManagedType>().bufferView)>(*mlib));
    addFieldEx("plane", "plane", offsetof(ManagedType, plane), das::makeFieldType<decltype(das::declval<ManagedType>().plane)>(*mlib));
    addFieldEx("mtlTexture", "mtlTexture", offsetof(ManagedType, mtlTexture), das::makeFieldType<decltype(das::declval<ManagedType>().mtlTexture)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_VERSION_1_1)
struct VkExportSemaphoreCreateInfoAnnotation : ManagedStructureAnnotation<VkExportSemaphoreCreateInfo> {
  VkExportSemaphoreCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportSemaphoreCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_semaphore_win32)
struct VkExportSemaphoreWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkExportSemaphoreWin32HandleInfoKHR> {
  VkExportSemaphoreWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExportSemaphoreWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pAttributes", "pAttributes", offsetof(ManagedType, pAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().pAttributes)>(*mlib));
    addFieldEx("dwAccess", "dwAccess", offsetof(ManagedType, dwAccess), das::makeFieldType<decltype(das::declval<ManagedType>().dwAccess)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_VERSION_1_0)
struct VkExtensionPropertiesAnnotation : ManagedStructureAnnotation<VkExtensionProperties> {
  VkExtensionPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExtensionProperties", lib) {
    addFieldEx("extensionName", "extensionName", offsetof(ManagedType, extensionName), das::makeFieldType<decltype(das::declval<ManagedType>().extensionName)>(*mlib));
    addFieldEx("specVersion", "specVersion", offsetof(ManagedType, specVersion), das::makeFieldType<decltype(das::declval<ManagedType>().specVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkExternalMemoryPropertiesAnnotation : ManagedStructureAnnotation<VkExternalMemoryProperties> {
  VkExternalMemoryPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalMemoryProperties", lib) {
    addFieldEx("externalMemoryFeatures", "externalMemoryFeatures", offsetof(ManagedType, externalMemoryFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().externalMemoryFeatures)>(*mlib));
    addFieldEx("exportFromImportedHandleTypes", "exportFromImportedHandleTypes", offsetof(ManagedType, exportFromImportedHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().exportFromImportedHandleTypes)>(*mlib));
    addFieldEx("compatibleHandleTypes", "compatibleHandleTypes", offsetof(ManagedType, compatibleHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleHandleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExternalBufferPropertiesAnnotation : ManagedStructureAnnotation<VkExternalBufferProperties> {
  VkExternalBufferPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalBufferProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalMemoryProperties", "externalMemoryProperties", offsetof(ManagedType, externalMemoryProperties), das::makeFieldType<decltype(das::declval<ManagedType>().externalMemoryProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExternalFencePropertiesAnnotation : ManagedStructureAnnotation<VkExternalFenceProperties> {
  VkExternalFencePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalFenceProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("exportFromImportedHandleTypes", "exportFromImportedHandleTypes", offsetof(ManagedType, exportFromImportedHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().exportFromImportedHandleTypes)>(*mlib));
    addFieldEx("compatibleHandleTypes", "compatibleHandleTypes", offsetof(ManagedType, compatibleHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleHandleTypes)>(*mlib));
    addFieldEx("externalFenceFeatures", "externalFenceFeatures", offsetof(ManagedType, externalFenceFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().externalFenceFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
struct VkExternalFormatANDROIDAnnotation : ManagedStructureAnnotation<VkExternalFormatANDROID> {
  VkExternalFormatANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalFormatANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalFormat", "externalFormat", offsetof(ManagedType, externalFormat), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_QNX_external_memory_screen_buffer)
struct VkExternalFormatQNXAnnotation : ManagedStructureAnnotation<VkExternalFormatQNX> {
  VkExternalFormatQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalFormatQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalFormat", "externalFormat", offsetof(ManagedType, externalFormat), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_VERSION_1_1)
struct VkExternalImageFormatPropertiesAnnotation : ManagedStructureAnnotation<VkExternalImageFormatProperties> {
  VkExternalImageFormatPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalImageFormatProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalMemoryProperties", "externalMemoryProperties", offsetof(ManagedType, externalMemoryProperties), das::makeFieldType<decltype(das::declval<ManagedType>().externalMemoryProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkImageFormatPropertiesAnnotation : ManagedStructureAnnotation<VkImageFormatProperties> {
  VkImageFormatPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageFormatProperties", lib) {
    addFieldEx("maxExtent", "maxExtent", offsetof(ManagedType, maxExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxExtent)>(*mlib));
    addFieldEx("maxMipLevels", "maxMipLevels", offsetof(ManagedType, maxMipLevels), das::makeFieldType<decltype(das::declval<ManagedType>().maxMipLevels)>(*mlib));
    addFieldEx("maxArrayLayers", "maxArrayLayers", offsetof(ManagedType, maxArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxArrayLayers)>(*mlib));
    addFieldEx("sampleCounts", "sampleCounts", offsetof(ManagedType, sampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampleCounts)>(*mlib));
    addFieldEx("maxResourceSize", "maxResourceSize", offsetof(ManagedType, maxResourceSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxResourceSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_external_memory_capabilities)
struct VkExternalImageFormatPropertiesNVAnnotation : ManagedStructureAnnotation<VkExternalImageFormatPropertiesNV> {
  VkExternalImageFormatPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalImageFormatPropertiesNV", lib) {
    addFieldEx("imageFormatProperties", "imageFormatProperties", offsetof(ManagedType, imageFormatProperties), das::makeFieldType<decltype(das::declval<ManagedType>().imageFormatProperties)>(*mlib));
    addFieldEx("externalMemoryFeatures", "externalMemoryFeatures", offsetof(ManagedType, externalMemoryFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().externalMemoryFeatures)>(*mlib));
    addFieldEx("exportFromImportedHandleTypes", "exportFromImportedHandleTypes", offsetof(ManagedType, exportFromImportedHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().exportFromImportedHandleTypes)>(*mlib));
    addFieldEx("compatibleHandleTypes", "compatibleHandleTypes", offsetof(ManagedType, compatibleHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleHandleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_EXT_external_memory_acquire_unmodified)
struct VkExternalMemoryAcquireUnmodifiedEXTAnnotation : ManagedStructureAnnotation<VkExternalMemoryAcquireUnmodifiedEXT> {
  VkExternalMemoryAcquireUnmodifiedEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalMemoryAcquireUnmodifiedEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("acquireUnmodifiedMemory", "acquireUnmodifiedMemory", offsetof(ManagedType, acquireUnmodifiedMemory), das::makeFieldType<decltype(das::declval<ManagedType>().acquireUnmodifiedMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_external_memory_acquire_unmodified) */
#if defined(VK_VERSION_1_1)
struct VkExternalMemoryBufferCreateInfoAnnotation : ManagedStructureAnnotation<VkExternalMemoryBufferCreateInfo> {
  VkExternalMemoryBufferCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalMemoryBufferCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkExternalMemoryImageCreateInfoAnnotation : ManagedStructureAnnotation<VkExternalMemoryImageCreateInfo> {
  VkExternalMemoryImageCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalMemoryImageCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NV_external_memory)
struct VkExternalMemoryImageCreateInfoNVAnnotation : ManagedStructureAnnotation<VkExternalMemoryImageCreateInfoNV> {
  VkExternalMemoryImageCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalMemoryImageCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleTypes", "handleTypes", offsetof(ManagedType, handleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().handleTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory) */
#if defined(VK_VERSION_1_1)
struct VkExternalSemaphorePropertiesAnnotation : ManagedStructureAnnotation<VkExternalSemaphoreProperties> {
  VkExternalSemaphorePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkExternalSemaphoreProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("exportFromImportedHandleTypes", "exportFromImportedHandleTypes", offsetof(ManagedType, exportFromImportedHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().exportFromImportedHandleTypes)>(*mlib));
    addFieldEx("compatibleHandleTypes", "compatibleHandleTypes", offsetof(ManagedType, compatibleHandleTypes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleHandleTypes)>(*mlib));
    addFieldEx("externalSemaphoreFeatures", "externalSemaphoreFeatures", offsetof(ManagedType, externalSemaphoreFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().externalSemaphoreFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkFenceCreateInfoAnnotation : ManagedStructureAnnotation<VkFenceCreateInfo> {
  VkFenceCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFenceCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_external_fence_fd)
struct VkFenceGetFdInfoKHRAnnotation : ManagedStructureAnnotation<VkFenceGetFdInfoKHR> {
  VkFenceGetFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFenceGetFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fence", "fence", offsetof(ManagedType, fence), das::makeFieldType<decltype(das::declval<ManagedType>().fence)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
struct VkFenceGetWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkFenceGetWin32HandleInfoKHR> {
  VkFenceGetWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFenceGetWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fence", "fence", offsetof(ManagedType, fence), das::makeFieldType<decltype(das::declval<ManagedType>().fence)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_EXT_filter_cubic)
struct VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation : ManagedStructureAnnotation<VkFilterCubicImageViewImageFormatPropertiesEXT> {
  VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFilterCubicImageViewImageFormatPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("filterCubic", "filterCubic", offsetof(ManagedType, filterCubic), das::makeFieldType<decltype(das::declval<ManagedType>().filterCubic)>(*mlib));
    addFieldEx("filterCubicMinmax", "filterCubicMinmax", offsetof(ManagedType, filterCubicMinmax), das::makeFieldType<decltype(das::declval<ManagedType>().filterCubicMinmax)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_filter_cubic) */
#if defined(VK_VERSION_1_0)
struct VkFormatPropertiesAnnotation : ManagedStructureAnnotation<VkFormatProperties> {
  VkFormatPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFormatProperties", lib) {
    addFieldEx("linearTilingFeatures", "linearTilingFeatures", offsetof(ManagedType, linearTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().linearTilingFeatures)>(*mlib));
    addFieldEx("optimalTilingFeatures", "optimalTilingFeatures", offsetof(ManagedType, optimalTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().optimalTilingFeatures)>(*mlib));
    addFieldEx("bufferFeatures", "bufferFeatures", offsetof(ManagedType, bufferFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().bufferFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkFormatProperties2Annotation : ManagedStructureAnnotation<VkFormatProperties2> {
  VkFormatProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFormatProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("formatProperties", "formatProperties", offsetof(ManagedType, formatProperties), das::makeFieldType<decltype(das::declval<ManagedType>().formatProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
struct VkFormatProperties3Annotation : ManagedStructureAnnotation<VkFormatProperties3> {
  VkFormatProperties3Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFormatProperties3", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("linearTilingFeatures", "linearTilingFeatures", offsetof(ManagedType, linearTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().linearTilingFeatures)>(*mlib));
    addFieldEx("optimalTilingFeatures", "optimalTilingFeatures", offsetof(ManagedType, optimalTilingFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().optimalTilingFeatures)>(*mlib));
    addFieldEx("bufferFeatures", "bufferFeatures", offsetof(ManagedType, bufferFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().bufferFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_fragment_shading_rate)
struct VkFragmentShadingRateAttachmentInfoKHRAnnotation : ManagedStructureAnnotation<VkFragmentShadingRateAttachmentInfoKHR> {
  VkFragmentShadingRateAttachmentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFragmentShadingRateAttachmentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pFragmentShadingRateAttachment", "pFragmentShadingRateAttachment", offsetof(ManagedType, pFragmentShadingRateAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pFragmentShadingRateAttachment)>(*mlib));
    addFieldEx("shadingRateAttachmentTexelSize", "shadingRateAttachmentTexelSize", offsetof(ManagedType, shadingRateAttachmentTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateAttachmentTexelSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_frame_boundary)
struct VkFrameBoundaryEXTAnnotation : ManagedStructureAnnotation<VkFrameBoundaryEXT> {
  VkFrameBoundaryEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFrameBoundaryEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("frameID", "frameID", offsetof(ManagedType, frameID), das::makeFieldType<decltype(das::declval<ManagedType>().frameID)>(*mlib));
    addFieldEx("imageCount", "imageCount", offsetof(ManagedType, imageCount), das::makeFieldType<decltype(das::declval<ManagedType>().imageCount)>(*mlib));
    addFieldEx("pImages", "pImages", offsetof(ManagedType, pImages), das::makeFieldType<decltype(das::declval<ManagedType>().pImages)>(*mlib));
    addFieldEx("bufferCount", "bufferCount", offsetof(ManagedType, bufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().bufferCount)>(*mlib));
    addFieldEx("pBuffers", "pBuffers", offsetof(ManagedType, pBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().pBuffers)>(*mlib));
    addFieldEx("tagName", "tagName", offsetof(ManagedType, tagName), das::makeFieldType<decltype(das::declval<ManagedType>().tagName)>(*mlib));
    addFieldEx("tagSize", "tagSize", offsetof(ManagedType, tagSize), das::makeFieldType<decltype(das::declval<ManagedType>().tagSize)>(*mlib));
    addFieldEx("pTag", "pTag", offsetof(ManagedType, pTag), das::makeFieldType<decltype(das::declval<ManagedType>().pTag)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_frame_boundary) */
#if defined(VK_VERSION_1_2)
struct VkFramebufferAttachmentImageInfoAnnotation : ManagedStructureAnnotation<VkFramebufferAttachmentImageInfo> {
  VkFramebufferAttachmentImageInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFramebufferAttachmentImageInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
    addFieldEx("viewFormatCount", "viewFormatCount", offsetof(ManagedType, viewFormatCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewFormatCount)>(*mlib));
    addFieldEx("pViewFormats", "pViewFormats", offsetof(ManagedType, pViewFormats), das::makeFieldType<decltype(das::declval<ManagedType>().pViewFormats)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkFramebufferAttachmentsCreateInfoAnnotation : ManagedStructureAnnotation<VkFramebufferAttachmentsCreateInfo> {
  VkFramebufferAttachmentsCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFramebufferAttachmentsCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentImageInfoCount", "attachmentImageInfoCount", offsetof(ManagedType, attachmentImageInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentImageInfoCount)>(*mlib));
    addFieldEx("pAttachmentImageInfos", "pAttachmentImageInfos", offsetof(ManagedType, pAttachmentImageInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachmentImageInfos)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
struct VkFramebufferCreateInfoAnnotation : ManagedStructureAnnotation<VkFramebufferCreateInfo> {
  VkFramebufferCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFramebufferCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("renderPass", "renderPass", offsetof(ManagedType, renderPass), das::makeFieldType<decltype(das::declval<ManagedType>().renderPass)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pAttachments", "pAttachments", offsetof(ManagedType, pAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachments)>(*mlib));
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("layers", "layers", offsetof(ManagedType, layers), das::makeFieldType<decltype(das::declval<ManagedType>().layers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_coverage_reduction_mode)
struct VkFramebufferMixedSamplesCombinationNVAnnotation : ManagedStructureAnnotation<VkFramebufferMixedSamplesCombinationNV> {
  VkFramebufferMixedSamplesCombinationNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkFramebufferMixedSamplesCombinationNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("coverageReductionMode", "coverageReductionMode", offsetof(ManagedType, coverageReductionMode), das::makeFieldType<decltype(das::declval<ManagedType>().coverageReductionMode)>(*mlib));
    addFieldEx("rasterizationSamples", "rasterizationSamples", offsetof(ManagedType, rasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationSamples)>(*mlib));
    addFieldEx("depthStencilSamples", "depthStencilSamples", offsetof(ManagedType, depthStencilSamples), das::makeFieldType<decltype(das::declval<ManagedType>().depthStencilSamples)>(*mlib));
    addFieldEx("colorSamples", "colorSamples", offsetof(ManagedType, colorSamples), das::makeFieldType<decltype(das::declval<ManagedType>().colorSamples)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_EXT_device_generated_commands)
struct VkGeneratedCommandsInfoEXTAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsInfoEXT> {
  VkGeneratedCommandsInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderStages", "shaderStages", offsetof(ManagedType, shaderStages), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStages)>(*mlib));
    addFieldEx("indirectExecutionSet", "indirectExecutionSet", offsetof(ManagedType, indirectExecutionSet), das::makeFieldType<decltype(das::declval<ManagedType>().indirectExecutionSet)>(*mlib));
    addFieldEx("indirectCommandsLayout", "indirectCommandsLayout", offsetof(ManagedType, indirectCommandsLayout), das::makeFieldType<decltype(das::declval<ManagedType>().indirectCommandsLayout)>(*mlib));
    addFieldEx("indirectAddress", "indirectAddress", offsetof(ManagedType, indirectAddress), das::makeFieldType<decltype(das::declval<ManagedType>().indirectAddress)>(*mlib));
    addFieldEx("indirectAddressSize", "indirectAddressSize", offsetof(ManagedType, indirectAddressSize), das::makeFieldType<decltype(das::declval<ManagedType>().indirectAddressSize)>(*mlib));
    addFieldEx("preprocessAddress", "preprocessAddress", offsetof(ManagedType, preprocessAddress), das::makeFieldType<decltype(das::declval<ManagedType>().preprocessAddress)>(*mlib));
    addFieldEx("preprocessSize", "preprocessSize", offsetof(ManagedType, preprocessSize), das::makeFieldType<decltype(das::declval<ManagedType>().preprocessSize)>(*mlib));
    addFieldEx("maxSequenceCount", "maxSequenceCount", offsetof(ManagedType, maxSequenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSequenceCount)>(*mlib));
    addFieldEx("sequenceCountAddress", "sequenceCountAddress", offsetof(ManagedType, sequenceCountAddress), das::makeFieldType<decltype(das::declval<ManagedType>().sequenceCountAddress)>(*mlib));
    addFieldEx("maxDrawCount", "maxDrawCount", offsetof(ManagedType, maxDrawCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxDrawCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkIndirectCommandsStreamNVAnnotation : ManagedStructureAnnotation<VkIndirectCommandsStreamNV> {
  VkIndirectCommandsStreamNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsStreamNV", lib) {
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGeneratedCommandsInfoNVAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsInfoNV> {
  VkGeneratedCommandsInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
    addFieldEx("indirectCommandsLayout", "indirectCommandsLayout", offsetof(ManagedType, indirectCommandsLayout), das::makeFieldType<decltype(das::declval<ManagedType>().indirectCommandsLayout)>(*mlib));
    addFieldEx("streamCount", "streamCount", offsetof(ManagedType, streamCount), das::makeFieldType<decltype(das::declval<ManagedType>().streamCount)>(*mlib));
    addFieldEx("pStreams", "pStreams", offsetof(ManagedType, pStreams), das::makeFieldType<decltype(das::declval<ManagedType>().pStreams)>(*mlib));
    addFieldEx("sequencesCount", "sequencesCount", offsetof(ManagedType, sequencesCount), das::makeFieldType<decltype(das::declval<ManagedType>().sequencesCount)>(*mlib));
    addFieldEx("preprocessBuffer", "preprocessBuffer", offsetof(ManagedType, preprocessBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().preprocessBuffer)>(*mlib));
    addFieldEx("preprocessOffset", "preprocessOffset", offsetof(ManagedType, preprocessOffset), das::makeFieldType<decltype(das::declval<ManagedType>().preprocessOffset)>(*mlib));
    addFieldEx("preprocessSize", "preprocessSize", offsetof(ManagedType, preprocessSize), das::makeFieldType<decltype(das::declval<ManagedType>().preprocessSize)>(*mlib));
    addFieldEx("sequencesCountBuffer", "sequencesCountBuffer", offsetof(ManagedType, sequencesCountBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().sequencesCountBuffer)>(*mlib));
    addFieldEx("sequencesCountOffset", "sequencesCountOffset", offsetof(ManagedType, sequencesCountOffset), das::makeFieldType<decltype(das::declval<ManagedType>().sequencesCountOffset)>(*mlib));
    addFieldEx("sequencesIndexBuffer", "sequencesIndexBuffer", offsetof(ManagedType, sequencesIndexBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().sequencesIndexBuffer)>(*mlib));
    addFieldEx("sequencesIndexOffset", "sequencesIndexOffset", offsetof(ManagedType, sequencesIndexOffset), das::makeFieldType<decltype(das::declval<ManagedType>().sequencesIndexOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
struct VkGeneratedCommandsMemoryRequirementsInfoEXTAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsMemoryRequirementsInfoEXT> {
  VkGeneratedCommandsMemoryRequirementsInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsMemoryRequirementsInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("indirectExecutionSet", "indirectExecutionSet", offsetof(ManagedType, indirectExecutionSet), das::makeFieldType<decltype(das::declval<ManagedType>().indirectExecutionSet)>(*mlib));
    addFieldEx("indirectCommandsLayout", "indirectCommandsLayout", offsetof(ManagedType, indirectCommandsLayout), das::makeFieldType<decltype(das::declval<ManagedType>().indirectCommandsLayout)>(*mlib));
    addFieldEx("maxSequenceCount", "maxSequenceCount", offsetof(ManagedType, maxSequenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSequenceCount)>(*mlib));
    addFieldEx("maxDrawCount", "maxDrawCount", offsetof(ManagedType, maxDrawCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxDrawCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsMemoryRequirementsInfoNV> {
  VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsMemoryRequirementsInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
    addFieldEx("indirectCommandsLayout", "indirectCommandsLayout", offsetof(ManagedType, indirectCommandsLayout), das::makeFieldType<decltype(das::declval<ManagedType>().indirectCommandsLayout)>(*mlib));
    addFieldEx("maxSequencesCount", "maxSequencesCount", offsetof(ManagedType, maxSequencesCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSequencesCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
struct VkGeneratedCommandsPipelineInfoEXTAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsPipelineInfoEXT> {
  VkGeneratedCommandsPipelineInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsPipelineInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGeneratedCommandsShaderInfoEXTAnnotation : ManagedStructureAnnotation<VkGeneratedCommandsShaderInfoEXT> {
  VkGeneratedCommandsShaderInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGeneratedCommandsShaderInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCount", "shaderCount", offsetof(ManagedType, shaderCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCount)>(*mlib));
    addFieldEx("pShaders", "pShaders", offsetof(ManagedType, pShaders), das::makeFieldType<decltype(das::declval<ManagedType>().pShaders)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_low_latency2)
struct VkLatencyTimingsFrameReportNVAnnotation : ManagedStructureAnnotation<VkLatencyTimingsFrameReportNV> {
  VkLatencyTimingsFrameReportNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLatencyTimingsFrameReportNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentID", "presentID", offsetof(ManagedType, presentID), das::makeFieldType<decltype(das::declval<ManagedType>().presentID)>(*mlib));
    addFieldEx("inputSampleTimeUs", "inputSampleTimeUs", offsetof(ManagedType, inputSampleTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().inputSampleTimeUs)>(*mlib));
    addFieldEx("simStartTimeUs", "simStartTimeUs", offsetof(ManagedType, simStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().simStartTimeUs)>(*mlib));
    addFieldEx("simEndTimeUs", "simEndTimeUs", offsetof(ManagedType, simEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().simEndTimeUs)>(*mlib));
    addFieldEx("renderSubmitStartTimeUs", "renderSubmitStartTimeUs", offsetof(ManagedType, renderSubmitStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().renderSubmitStartTimeUs)>(*mlib));
    addFieldEx("renderSubmitEndTimeUs", "renderSubmitEndTimeUs", offsetof(ManagedType, renderSubmitEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().renderSubmitEndTimeUs)>(*mlib));
    addFieldEx("presentStartTimeUs", "presentStartTimeUs", offsetof(ManagedType, presentStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().presentStartTimeUs)>(*mlib));
    addFieldEx("presentEndTimeUs", "presentEndTimeUs", offsetof(ManagedType, presentEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().presentEndTimeUs)>(*mlib));
    addFieldEx("driverStartTimeUs", "driverStartTimeUs", offsetof(ManagedType, driverStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().driverStartTimeUs)>(*mlib));
    addFieldEx("driverEndTimeUs", "driverEndTimeUs", offsetof(ManagedType, driverEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().driverEndTimeUs)>(*mlib));
    addFieldEx("osRenderQueueStartTimeUs", "osRenderQueueStartTimeUs", offsetof(ManagedType, osRenderQueueStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().osRenderQueueStartTimeUs)>(*mlib));
    addFieldEx("osRenderQueueEndTimeUs", "osRenderQueueEndTimeUs", offsetof(ManagedType, osRenderQueueEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().osRenderQueueEndTimeUs)>(*mlib));
    addFieldEx("gpuRenderStartTimeUs", "gpuRenderStartTimeUs", offsetof(ManagedType, gpuRenderStartTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().gpuRenderStartTimeUs)>(*mlib));
    addFieldEx("gpuRenderEndTimeUs", "gpuRenderEndTimeUs", offsetof(ManagedType, gpuRenderEndTimeUs), das::makeFieldType<decltype(das::declval<ManagedType>().gpuRenderEndTimeUs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGetLatencyMarkerInfoNVAnnotation : ManagedStructureAnnotation<VkGetLatencyMarkerInfoNV> {
  VkGetLatencyMarkerInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGetLatencyMarkerInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("timingCount", "timingCount", offsetof(ManagedType, timingCount), das::makeFieldType<decltype(das::declval<ManagedType>().timingCount)>(*mlib));
    addFieldEx("pTimings", "pTimings", offsetof(ManagedType, pTimings), das::makeFieldType<decltype(das::declval<ManagedType>().pTimings)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_VERSION_1_0)
struct VkPipelineTessellationStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineTessellationStateCreateInfo> {
  VkPipelineTessellationStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineTessellationStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("patchControlPoints", "patchControlPoints", offsetof(ManagedType, patchControlPoints), das::makeFieldType<decltype(das::declval<ManagedType>().patchControlPoints)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVertexInputAttributeDescriptionAnnotation : ManagedStructureAnnotation<VkVertexInputAttributeDescription> {
  VkVertexInputAttributeDescriptionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVertexInputAttributeDescription", lib) {
    addFieldEx("location", "location", offsetof(ManagedType, location), das::makeFieldType<decltype(das::declval<ManagedType>().location)>(*mlib));
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVertexInputBindingDescriptionAnnotation : ManagedStructureAnnotation<VkVertexInputBindingDescription> {
  VkVertexInputBindingDescriptionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVertexInputBindingDescription", lib) {
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
    addFieldEx("inputRate", "inputRate", offsetof(ManagedType, inputRate), das::makeFieldType<decltype(das::declval<ManagedType>().inputRate)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineVertexInputStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineVertexInputStateCreateInfo> {
  VkPipelineVertexInputStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineVertexInputStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("vertexBindingDescriptionCount", "vertexBindingDescriptionCount", offsetof(ManagedType, vertexBindingDescriptionCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexBindingDescriptionCount)>(*mlib));
    addFieldEx("pVertexBindingDescriptions", "pVertexBindingDescriptions", offsetof(ManagedType, pVertexBindingDescriptions), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexBindingDescriptions)>(*mlib));
    addFieldEx("vertexAttributeDescriptionCount", "vertexAttributeDescriptionCount", offsetof(ManagedType, vertexAttributeDescriptionCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeDescriptionCount)>(*mlib));
    addFieldEx("pVertexAttributeDescriptions", "pVertexAttributeDescriptions", offsetof(ManagedType, pVertexAttributeDescriptions), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexAttributeDescriptions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineColorBlendAttachmentStateAnnotation : ManagedStructureAnnotation<VkPipelineColorBlendAttachmentState> {
  VkPipelineColorBlendAttachmentStateAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineColorBlendAttachmentState", lib) {
    addFieldEx("blendEnable", "blendEnable", offsetof(ManagedType, blendEnable), das::makeFieldType<decltype(das::declval<ManagedType>().blendEnable)>(*mlib));
    addFieldEx("srcColorBlendFactor", "srcColorBlendFactor", offsetof(ManagedType, srcColorBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().srcColorBlendFactor)>(*mlib));
    addFieldEx("dstColorBlendFactor", "dstColorBlendFactor", offsetof(ManagedType, dstColorBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().dstColorBlendFactor)>(*mlib));
    addFieldEx("colorBlendOp", "colorBlendOp", offsetof(ManagedType, colorBlendOp), das::makeFieldType<decltype(das::declval<ManagedType>().colorBlendOp)>(*mlib));
    addFieldEx("srcAlphaBlendFactor", "srcAlphaBlendFactor", offsetof(ManagedType, srcAlphaBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().srcAlphaBlendFactor)>(*mlib));
    addFieldEx("dstAlphaBlendFactor", "dstAlphaBlendFactor", offsetof(ManagedType, dstAlphaBlendFactor), das::makeFieldType<decltype(das::declval<ManagedType>().dstAlphaBlendFactor)>(*mlib));
    addFieldEx("alphaBlendOp", "alphaBlendOp", offsetof(ManagedType, alphaBlendOp), das::makeFieldType<decltype(das::declval<ManagedType>().alphaBlendOp)>(*mlib));
    addFieldEx("colorWriteMask", "colorWriteMask", offsetof(ManagedType, colorWriteMask), das::makeFieldType<decltype(das::declval<ManagedType>().colorWriteMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineColorBlendStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineColorBlendStateCreateInfo> {
  VkPipelineColorBlendStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineColorBlendStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("logicOpEnable", "logicOpEnable", offsetof(ManagedType, logicOpEnable), das::makeFieldType<decltype(das::declval<ManagedType>().logicOpEnable)>(*mlib));
    addFieldEx("logicOp", "logicOp", offsetof(ManagedType, logicOp), das::makeFieldType<decltype(das::declval<ManagedType>().logicOp)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pAttachments", "pAttachments", offsetof(ManagedType, pAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachments)>(*mlib));
    addFieldEx("blendConstants", "blendConstants", offsetof(ManagedType, blendConstants), das::makeFieldType<decltype(das::declval<ManagedType>().blendConstants)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkStencilOpStateAnnotation : ManagedStructureAnnotation<VkStencilOpState> {
  VkStencilOpStateAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkStencilOpState", lib) {
    addFieldEx("failOp", "failOp", offsetof(ManagedType, failOp), das::makeFieldType<decltype(das::declval<ManagedType>().failOp)>(*mlib));
    addFieldEx("passOp", "passOp", offsetof(ManagedType, passOp), das::makeFieldType<decltype(das::declval<ManagedType>().passOp)>(*mlib));
    addFieldEx("depthFailOp", "depthFailOp", offsetof(ManagedType, depthFailOp), das::makeFieldType<decltype(das::declval<ManagedType>().depthFailOp)>(*mlib));
    addFieldEx("compareOp", "compareOp", offsetof(ManagedType, compareOp), das::makeFieldType<decltype(das::declval<ManagedType>().compareOp)>(*mlib));
    addFieldEx("compareMask", "compareMask", offsetof(ManagedType, compareMask), das::makeFieldType<decltype(das::declval<ManagedType>().compareMask)>(*mlib));
    addFieldEx("writeMask", "writeMask", offsetof(ManagedType, writeMask), das::makeFieldType<decltype(das::declval<ManagedType>().writeMask)>(*mlib));
    addFieldEx("reference", "reference", offsetof(ManagedType, reference), das::makeFieldType<decltype(das::declval<ManagedType>().reference)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineDepthStencilStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineDepthStencilStateCreateInfo> {
  VkPipelineDepthStencilStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineDepthStencilStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("depthTestEnable", "depthTestEnable", offsetof(ManagedType, depthTestEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthTestEnable)>(*mlib));
    addFieldEx("depthWriteEnable", "depthWriteEnable", offsetof(ManagedType, depthWriteEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthWriteEnable)>(*mlib));
    addFieldEx("depthCompareOp", "depthCompareOp", offsetof(ManagedType, depthCompareOp), das::makeFieldType<decltype(das::declval<ManagedType>().depthCompareOp)>(*mlib));
    addFieldEx("depthBoundsTestEnable", "depthBoundsTestEnable", offsetof(ManagedType, depthBoundsTestEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthBoundsTestEnable)>(*mlib));
    addFieldEx("stencilTestEnable", "stencilTestEnable", offsetof(ManagedType, stencilTestEnable), das::makeFieldType<decltype(das::declval<ManagedType>().stencilTestEnable)>(*mlib));
    addFieldEx("front", "front", offsetof(ManagedType, front), das::makeFieldType<decltype(das::declval<ManagedType>().front)>(*mlib));
    addFieldEx("back", "back", offsetof(ManagedType, back), das::makeFieldType<decltype(das::declval<ManagedType>().back)>(*mlib));
    addFieldEx("minDepthBounds", "minDepthBounds", offsetof(ManagedType, minDepthBounds), das::makeFieldType<decltype(das::declval<ManagedType>().minDepthBounds)>(*mlib));
    addFieldEx("maxDepthBounds", "maxDepthBounds", offsetof(ManagedType, maxDepthBounds), das::makeFieldType<decltype(das::declval<ManagedType>().maxDepthBounds)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineDynamicStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineDynamicStateCreateInfo> {
  VkPipelineDynamicStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineDynamicStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("dynamicStateCount", "dynamicStateCount", offsetof(ManagedType, dynamicStateCount), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicStateCount)>(*mlib));
    addFieldEx("pDynamicStates", "pDynamicStates", offsetof(ManagedType, pDynamicStates), das::makeFieldType<decltype(das::declval<ManagedType>().pDynamicStates)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineInputAssemblyStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineInputAssemblyStateCreateInfo> {
  VkPipelineInputAssemblyStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineInputAssemblyStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("topology", "topology", offsetof(ManagedType, topology), das::makeFieldType<decltype(das::declval<ManagedType>().topology)>(*mlib));
    addFieldEx("primitiveRestartEnable", "primitiveRestartEnable", offsetof(ManagedType, primitiveRestartEnable), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveRestartEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineMultisampleStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineMultisampleStateCreateInfo> {
  VkPipelineMultisampleStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineMultisampleStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("rasterizationSamples", "rasterizationSamples", offsetof(ManagedType, rasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationSamples)>(*mlib));
    addFieldEx("sampleShadingEnable", "sampleShadingEnable", offsetof(ManagedType, sampleShadingEnable), das::makeFieldType<decltype(das::declval<ManagedType>().sampleShadingEnable)>(*mlib));
    addFieldEx("minSampleShading", "minSampleShading", offsetof(ManagedType, minSampleShading), das::makeFieldType<decltype(das::declval<ManagedType>().minSampleShading)>(*mlib));
    addFieldEx("pSampleMask", "pSampleMask", offsetof(ManagedType, pSampleMask), das::makeFieldType<decltype(das::declval<ManagedType>().pSampleMask)>(*mlib));
    addFieldEx("alphaToCoverageEnable", "alphaToCoverageEnable", offsetof(ManagedType, alphaToCoverageEnable), das::makeFieldType<decltype(das::declval<ManagedType>().alphaToCoverageEnable)>(*mlib));
    addFieldEx("alphaToOneEnable", "alphaToOneEnable", offsetof(ManagedType, alphaToOneEnable), das::makeFieldType<decltype(das::declval<ManagedType>().alphaToOneEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineRasterizationStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationStateCreateInfo> {
  VkPipelineRasterizationStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("depthClampEnable", "depthClampEnable", offsetof(ManagedType, depthClampEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthClampEnable)>(*mlib));
    addFieldEx("rasterizerDiscardEnable", "rasterizerDiscardEnable", offsetof(ManagedType, rasterizerDiscardEnable), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizerDiscardEnable)>(*mlib));
    addFieldEx("polygonMode", "polygonMode", offsetof(ManagedType, polygonMode), das::makeFieldType<decltype(das::declval<ManagedType>().polygonMode)>(*mlib));
    addFieldEx("cullMode", "cullMode", offsetof(ManagedType, cullMode), das::makeFieldType<decltype(das::declval<ManagedType>().cullMode)>(*mlib));
    addFieldEx("frontFace", "frontFace", offsetof(ManagedType, frontFace), das::makeFieldType<decltype(das::declval<ManagedType>().frontFace)>(*mlib));
    addFieldEx("depthBiasEnable", "depthBiasEnable", offsetof(ManagedType, depthBiasEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasEnable)>(*mlib));
    addFieldEx("depthBiasConstantFactor", "depthBiasConstantFactor", offsetof(ManagedType, depthBiasConstantFactor), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasConstantFactor)>(*mlib));
    addFieldEx("depthBiasClamp", "depthBiasClamp", offsetof(ManagedType, depthBiasClamp), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasClamp)>(*mlib));
    addFieldEx("depthBiasSlopeFactor", "depthBiasSlopeFactor", offsetof(ManagedType, depthBiasSlopeFactor), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasSlopeFactor)>(*mlib));
    addFieldEx("lineWidth", "lineWidth", offsetof(ManagedType, lineWidth), das::makeFieldType<decltype(das::declval<ManagedType>().lineWidth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineViewportStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineViewportStateCreateInfo> {
  VkPipelineViewportStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("viewportCount", "viewportCount", offsetof(ManagedType, viewportCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewportCount)>(*mlib));
    addFieldEx("pViewports", "pViewports", offsetof(ManagedType, pViewports), das::makeFieldType<decltype(das::declval<ManagedType>().pViewports)>(*mlib));
    addFieldEx("scissorCount", "scissorCount", offsetof(ManagedType, scissorCount), das::makeFieldType<decltype(das::declval<ManagedType>().scissorCount)>(*mlib));
    addFieldEx("pScissors", "pScissors", offsetof(ManagedType, pScissors), das::makeFieldType<decltype(das::declval<ManagedType>().pScissors)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGraphicsPipelineCreateInfoAnnotation : ManagedStructureAnnotation<VkGraphicsPipelineCreateInfo> {
  VkGraphicsPipelineCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGraphicsPipelineCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stageCount", "stageCount", offsetof(ManagedType, stageCount), das::makeFieldType<decltype(das::declval<ManagedType>().stageCount)>(*mlib));
    addFieldEx("pStages", "pStages", offsetof(ManagedType, pStages), das::makeFieldType<decltype(das::declval<ManagedType>().pStages)>(*mlib));
    addFieldEx("pVertexInputState", "pVertexInputState", offsetof(ManagedType, pVertexInputState), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexInputState)>(*mlib));
    addFieldEx("pInputAssemblyState", "pInputAssemblyState", offsetof(ManagedType, pInputAssemblyState), das::makeFieldType<decltype(das::declval<ManagedType>().pInputAssemblyState)>(*mlib));
    addFieldEx("pTessellationState", "pTessellationState", offsetof(ManagedType, pTessellationState), das::makeFieldType<decltype(das::declval<ManagedType>().pTessellationState)>(*mlib));
    addFieldEx("pViewportState", "pViewportState", offsetof(ManagedType, pViewportState), das::makeFieldType<decltype(das::declval<ManagedType>().pViewportState)>(*mlib));
    addFieldEx("pRasterizationState", "pRasterizationState", offsetof(ManagedType, pRasterizationState), das::makeFieldType<decltype(das::declval<ManagedType>().pRasterizationState)>(*mlib));
    addFieldEx("pMultisampleState", "pMultisampleState", offsetof(ManagedType, pMultisampleState), das::makeFieldType<decltype(das::declval<ManagedType>().pMultisampleState)>(*mlib));
    addFieldEx("pDepthStencilState", "pDepthStencilState", offsetof(ManagedType, pDepthStencilState), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthStencilState)>(*mlib));
    addFieldEx("pColorBlendState", "pColorBlendState", offsetof(ManagedType, pColorBlendState), das::makeFieldType<decltype(das::declval<ManagedType>().pColorBlendState)>(*mlib));
    addFieldEx("pDynamicState", "pDynamicState", offsetof(ManagedType, pDynamicState), das::makeFieldType<decltype(das::declval<ManagedType>().pDynamicState)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("renderPass", "renderPass", offsetof(ManagedType, renderPass), das::makeFieldType<decltype(das::declval<ManagedType>().renderPass)>(*mlib));
    addFieldEx("subpass", "subpass", offsetof(ManagedType, subpass), das::makeFieldType<decltype(das::declval<ManagedType>().subpass)>(*mlib));
    addFieldEx("basePipelineHandle", "basePipelineHandle", offsetof(ManagedType, basePipelineHandle), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineHandle)>(*mlib));
    addFieldEx("basePipelineIndex", "basePipelineIndex", offsetof(ManagedType, basePipelineIndex), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_graphics_pipeline_library)
struct VkGraphicsPipelineLibraryCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkGraphicsPipelineLibraryCreateInfoEXT> {
  VkGraphicsPipelineLibraryCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGraphicsPipelineLibraryCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_graphics_pipeline_library) */
#if defined(VK_NV_device_generated_commands)
struct VkGraphicsShaderGroupCreateInfoNVAnnotation : ManagedStructureAnnotation<VkGraphicsShaderGroupCreateInfoNV> {
  VkGraphicsShaderGroupCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGraphicsShaderGroupCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stageCount", "stageCount", offsetof(ManagedType, stageCount), das::makeFieldType<decltype(das::declval<ManagedType>().stageCount)>(*mlib));
    addFieldEx("pStages", "pStages", offsetof(ManagedType, pStages), das::makeFieldType<decltype(das::declval<ManagedType>().pStages)>(*mlib));
    addFieldEx("pVertexInputState", "pVertexInputState", offsetof(ManagedType, pVertexInputState), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexInputState)>(*mlib));
    addFieldEx("pTessellationState", "pTessellationState", offsetof(ManagedType, pTessellationState), das::makeFieldType<decltype(das::declval<ManagedType>().pTessellationState)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation : ManagedStructureAnnotation<VkGraphicsPipelineShaderGroupsCreateInfoNV> {
  VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkGraphicsPipelineShaderGroupsCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("groupCount", "groupCount", offsetof(ManagedType, groupCount), das::makeFieldType<decltype(das::declval<ManagedType>().groupCount)>(*mlib));
    addFieldEx("pGroups", "pGroups", offsetof(ManagedType, pGroups), das::makeFieldType<decltype(das::declval<ManagedType>().pGroups)>(*mlib));
    addFieldEx("pipelineCount", "pipelineCount", offsetof(ManagedType, pipelineCount), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCount)>(*mlib));
    addFieldEx("pPipelines", "pPipelines", offsetof(ManagedType, pPipelines), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelines)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_hdr_metadata)
struct VkXYColorEXTAnnotation : ManagedStructureAnnotation<VkXYColorEXT> {
  VkXYColorEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkXYColorEXT", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkHdrMetadataEXTAnnotation : ManagedStructureAnnotation<VkHdrMetadataEXT> {
  VkHdrMetadataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkHdrMetadataEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displayPrimaryRed", "displayPrimaryRed", offsetof(ManagedType, displayPrimaryRed), das::makeFieldType<decltype(das::declval<ManagedType>().displayPrimaryRed)>(*mlib));
    addFieldEx("displayPrimaryGreen", "displayPrimaryGreen", offsetof(ManagedType, displayPrimaryGreen), das::makeFieldType<decltype(das::declval<ManagedType>().displayPrimaryGreen)>(*mlib));
    addFieldEx("displayPrimaryBlue", "displayPrimaryBlue", offsetof(ManagedType, displayPrimaryBlue), das::makeFieldType<decltype(das::declval<ManagedType>().displayPrimaryBlue)>(*mlib));
    addFieldEx("whitePoint", "whitePoint", offsetof(ManagedType, whitePoint), das::makeFieldType<decltype(das::declval<ManagedType>().whitePoint)>(*mlib));
    addFieldEx("maxLuminance", "maxLuminance", offsetof(ManagedType, maxLuminance), das::makeFieldType<decltype(das::declval<ManagedType>().maxLuminance)>(*mlib));
    addFieldEx("minLuminance", "minLuminance", offsetof(ManagedType, minLuminance), das::makeFieldType<decltype(das::declval<ManagedType>().minLuminance)>(*mlib));
    addFieldEx("maxContentLightLevel", "maxContentLightLevel", offsetof(ManagedType, maxContentLightLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxContentLightLevel)>(*mlib));
    addFieldEx("maxFrameAverageLightLevel", "maxFrameAverageLightLevel", offsetof(ManagedType, maxFrameAverageLightLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxFrameAverageLightLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_HUAWEI_hdr_vivid)
struct VkHdrVividDynamicMetadataHUAWEIAnnotation : ManagedStructureAnnotation<VkHdrVividDynamicMetadataHUAWEI> {
  VkHdrVividDynamicMetadataHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkHdrVividDynamicMetadataHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dynamicMetadataSize", "dynamicMetadataSize", offsetof(ManagedType, dynamicMetadataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicMetadataSize)>(*mlib));
    addFieldEx("pDynamicMetadata", "pDynamicMetadata", offsetof(ManagedType, pDynamicMetadata), das::makeFieldType<decltype(das::declval<ManagedType>().pDynamicMetadata)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_hdr_vivid) */
#if defined(VK_EXT_headless_surface)
struct VkHeadlessSurfaceCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkHeadlessSurfaceCreateInfoEXT> {
  VkHeadlessSurfaceCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkHeadlessSurfaceCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_VERSION_1_4)
struct VkHostImageCopyDevicePerformanceQueryAnnotation : ManagedStructureAnnotation<VkHostImageCopyDevicePerformanceQuery> {
  VkHostImageCopyDevicePerformanceQueryAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkHostImageCopyDevicePerformanceQuery", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("optimalDeviceAccess", "optimalDeviceAccess", offsetof(ManagedType, optimalDeviceAccess), das::makeFieldType<decltype(das::declval<ManagedType>().optimalDeviceAccess)>(*mlib));
    addFieldEx("identicalMemoryLayout", "identicalMemoryLayout", offsetof(ManagedType, identicalMemoryLayout), das::makeFieldType<decltype(das::declval<ManagedType>().identicalMemoryLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkHostImageLayoutTransitionInfoAnnotation : ManagedStructureAnnotation<VkHostImageLayoutTransitionInfo> {
  VkHostImageLayoutTransitionInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkHostImageLayoutTransitionInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("oldLayout", "oldLayout", offsetof(ManagedType, oldLayout), das::makeFieldType<decltype(das::declval<ManagedType>().oldLayout)>(*mlib));
    addFieldEx("newLayout", "newLayout", offsetof(ManagedType, newLayout), das::makeFieldType<decltype(das::declval<ManagedType>().newLayout)>(*mlib));
    addFieldEx("subresourceRange", "subresourceRange", offsetof(ManagedType, subresourceRange), das::makeFieldType<decltype(das::declval<ManagedType>().subresourceRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_MVK_ios_surface)
struct VkIOSSurfaceCreateInfoMVKAnnotation : ManagedStructureAnnotation<VkIOSSurfaceCreateInfoMVK> {
  VkIOSSurfaceCreateInfoMVKAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIOSSurfaceCreateInfoMVK", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pView", "pView", offsetof(ManagedType, pView), das::makeFieldType<decltype(das::declval<ManagedType>().pView)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MESA_image_alignment_control)
struct VkImageAlignmentControlCreateInfoMESAAnnotation : ManagedStructureAnnotation<VkImageAlignmentControlCreateInfoMESA> {
  VkImageAlignmentControlCreateInfoMESAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageAlignmentControlCreateInfoMESA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maximumRequestedAlignment", "maximumRequestedAlignment", offsetof(ManagedType, maximumRequestedAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().maximumRequestedAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_MESA_image_alignment_control) */
#if defined(VK_VERSION_1_0)
struct VkImageBlitAnnotation : ManagedStructureAnnotation<VkImageBlit> {
  VkImageBlitAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageBlit", lib) {
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffsets", "srcOffsets", offsetof(ManagedType, srcOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffsets)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffsets", "dstOffsets", offsetof(ManagedType, dstOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_descriptor_buffer)
struct VkImageCaptureDescriptorDataInfoEXTAnnotation : ManagedStructureAnnotation<VkImageCaptureDescriptorDataInfoEXT> {
  VkImageCaptureDescriptorDataInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCaptureDescriptorDataInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_image_compression_control)
struct VkImageCompressionControlEXTAnnotation : ManagedStructureAnnotation<VkImageCompressionControlEXT> {
  VkImageCompressionControlEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCompressionControlEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("compressionControlPlaneCount", "compressionControlPlaneCount", offsetof(ManagedType, compressionControlPlaneCount), das::makeFieldType<decltype(das::declval<ManagedType>().compressionControlPlaneCount)>(*mlib));
    addFieldEx("pFixedRateFlags", "pFixedRateFlags", offsetof(ManagedType, pFixedRateFlags), das::makeFieldType<decltype(das::declval<ManagedType>().pFixedRateFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageCompressionPropertiesEXTAnnotation : ManagedStructureAnnotation<VkImageCompressionPropertiesEXT> {
  VkImageCompressionPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCompressionPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageCompressionFlags", "imageCompressionFlags", offsetof(ManagedType, imageCompressionFlags), das::makeFieldType<decltype(das::declval<ManagedType>().imageCompressionFlags)>(*mlib));
    addFieldEx("imageCompressionFixedRateFlags", "imageCompressionFixedRateFlags", offsetof(ManagedType, imageCompressionFixedRateFlags), das::makeFieldType<decltype(das::declval<ManagedType>().imageCompressionFixedRateFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_compression_control) */
#if defined(VK_FUCHSIA_buffer_collection)
struct VkImageFormatConstraintsInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkImageFormatConstraintsInfoFUCHSIA> {
  VkImageFormatConstraintsInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageFormatConstraintsInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageCreateInfo", "imageCreateInfo", offsetof(ManagedType, imageCreateInfo), das::makeFieldType<decltype(das::declval<ManagedType>().imageCreateInfo)>(*mlib));
    addFieldEx("requiredFormatFeatures", "requiredFormatFeatures", offsetof(ManagedType, requiredFormatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().requiredFormatFeatures)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("sysmemPixelFormat", "sysmemPixelFormat", offsetof(ManagedType, sysmemPixelFormat), das::makeFieldType<decltype(das::declval<ManagedType>().sysmemPixelFormat)>(*mlib));
    addFieldEx("colorSpaceCount", "colorSpaceCount", offsetof(ManagedType, colorSpaceCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorSpaceCount)>(*mlib));
    addFieldEx("pColorSpaces", "pColorSpaces", offsetof(ManagedType, pColorSpaces), das::makeFieldType<decltype(das::declval<ManagedType>().pColorSpaces)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageConstraintsInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkImageConstraintsInfoFUCHSIA> {
  VkImageConstraintsInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageConstraintsInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("formatConstraintsCount", "formatConstraintsCount", offsetof(ManagedType, formatConstraintsCount), das::makeFieldType<decltype(das::declval<ManagedType>().formatConstraintsCount)>(*mlib));
    addFieldEx("pFormatConstraints", "pFormatConstraints", offsetof(ManagedType, pFormatConstraints), das::makeFieldType<decltype(das::declval<ManagedType>().pFormatConstraints)>(*mlib));
    addFieldEx("bufferCollectionConstraints", "bufferCollectionConstraints", offsetof(ManagedType, bufferCollectionConstraints), das::makeFieldType<decltype(das::declval<ManagedType>().bufferCollectionConstraints)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
struct VkImageCopyAnnotation : ManagedStructureAnnotation<VkImageCopy> {
  VkImageCopyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageCopy", lib) {
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubresourceLayoutAnnotation : ManagedStructureAnnotation<VkSubresourceLayout> {
  VkSubresourceLayoutAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubresourceLayout", lib) {
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("rowPitch", "rowPitch", offsetof(ManagedType, rowPitch), das::makeFieldType<decltype(das::declval<ManagedType>().rowPitch)>(*mlib));
    addFieldEx("arrayPitch", "arrayPitch", offsetof(ManagedType, arrayPitch), das::makeFieldType<decltype(das::declval<ManagedType>().arrayPitch)>(*mlib));
    addFieldEx("depthPitch", "depthPitch", offsetof(ManagedType, depthPitch), das::makeFieldType<decltype(das::declval<ManagedType>().depthPitch)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_image_drm_format_modifier)
struct VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkImageDrmFormatModifierExplicitCreateInfoEXT> {
  VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageDrmFormatModifierExplicitCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifier", "drmFormatModifier", offsetof(ManagedType, drmFormatModifier), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifier)>(*mlib));
    addFieldEx("drmFormatModifierPlaneCount", "drmFormatModifierPlaneCount", offsetof(ManagedType, drmFormatModifierPlaneCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierPlaneCount)>(*mlib));
    addFieldEx("pPlaneLayouts", "pPlaneLayouts", offsetof(ManagedType, pPlaneLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pPlaneLayouts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageDrmFormatModifierListCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkImageDrmFormatModifierListCreateInfoEXT> {
  VkImageDrmFormatModifierListCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageDrmFormatModifierListCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifierCount", "drmFormatModifierCount", offsetof(ManagedType, drmFormatModifierCount), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifierCount)>(*mlib));
    addFieldEx("pDrmFormatModifiers", "pDrmFormatModifiers", offsetof(ManagedType, pDrmFormatModifiers), das::makeFieldType<decltype(das::declval<ManagedType>().pDrmFormatModifiers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImageDrmFormatModifierPropertiesEXTAnnotation : ManagedStructureAnnotation<VkImageDrmFormatModifierPropertiesEXT> {
  VkImageDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageDrmFormatModifierPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifier", "drmFormatModifier", offsetof(ManagedType, drmFormatModifier), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_2)
struct VkImageFormatListCreateInfoAnnotation : ManagedStructureAnnotation<VkImageFormatListCreateInfo> {
  VkImageFormatListCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageFormatListCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("viewFormatCount", "viewFormatCount", offsetof(ManagedType, viewFormatCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewFormatCount)>(*mlib));
    addFieldEx("pViewFormats", "pViewFormats", offsetof(ManagedType, pViewFormats), das::makeFieldType<decltype(das::declval<ManagedType>().pViewFormats)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkImageFormatProperties2Annotation : ManagedStructureAnnotation<VkImageFormatProperties2> {
  VkImageFormatProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageFormatProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageFormatProperties", "imageFormatProperties", offsetof(ManagedType, imageFormatProperties), das::makeFieldType<decltype(das::declval<ManagedType>().imageFormatProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkImageMemoryBarrierAnnotation : ManagedStructureAnnotation<VkImageMemoryBarrier> {
  VkImageMemoryBarrierAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageMemoryBarrier", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("oldLayout", "oldLayout", offsetof(ManagedType, oldLayout), das::makeFieldType<decltype(das::declval<ManagedType>().oldLayout)>(*mlib));
    addFieldEx("newLayout", "newLayout", offsetof(ManagedType, newLayout), das::makeFieldType<decltype(das::declval<ManagedType>().newLayout)>(*mlib));
    addFieldEx("srcQueueFamilyIndex", "srcQueueFamilyIndex", offsetof(ManagedType, srcQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().srcQueueFamilyIndex)>(*mlib));
    addFieldEx("dstQueueFamilyIndex", "dstQueueFamilyIndex", offsetof(ManagedType, dstQueueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().dstQueueFamilyIndex)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("subresourceRange", "subresourceRange", offsetof(ManagedType, subresourceRange), das::makeFieldType<decltype(das::declval<ManagedType>().subresourceRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkImageMemoryRequirementsInfo2Annotation : ManagedStructureAnnotation<VkImageMemoryRequirementsInfo2> {
  VkImageMemoryRequirementsInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageMemoryRequirementsInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_FUCHSIA_imagepipe_surface)
struct VkImagePipeSurfaceCreateInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkImagePipeSurfaceCreateInfoFUCHSIA> {
  VkImagePipeSurfaceCreateInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImagePipeSurfaceCreateInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("imagePipeHandle", "imagePipeHandle", offsetof(ManagedType, imagePipeHandle), das::makeFieldType<decltype(das::declval<ManagedType>().imagePipeHandle)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_VERSION_1_1)
struct VkImagePlaneMemoryRequirementsInfoAnnotation : ManagedStructureAnnotation<VkImagePlaneMemoryRequirementsInfo> {
  VkImagePlaneMemoryRequirementsInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImagePlaneMemoryRequirementsInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("planeAspect", "planeAspect", offsetof(ManagedType, planeAspect), das::makeFieldType<decltype(das::declval<ManagedType>().planeAspect)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkImageResolveAnnotation : ManagedStructureAnnotation<VkImageResolve> {
  VkImageResolveAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageResolve", lib) {
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkImageResolve2Annotation : ManagedStructureAnnotation<VkImageResolve2> {
  VkImageResolve2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageResolve2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcSubresource", "srcSubresource", offsetof(ManagedType, srcSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubresource)>(*mlib));
    addFieldEx("srcOffset", "srcOffset", offsetof(ManagedType, srcOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcOffset)>(*mlib));
    addFieldEx("dstSubresource", "dstSubresource", offsetof(ManagedType, dstSubresource), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubresource)>(*mlib));
    addFieldEx("dstOffset", "dstOffset", offsetof(ManagedType, dstOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstOffset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkImageSparseMemoryRequirementsInfo2Annotation : ManagedStructureAnnotation<VkImageSparseMemoryRequirementsInfo2> {
  VkImageSparseMemoryRequirementsInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSparseMemoryRequirementsInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
struct VkImageStencilUsageCreateInfoAnnotation : ManagedStructureAnnotation<VkImageStencilUsageCreateInfo> {
  VkImageStencilUsageCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageStencilUsageCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stencilUsage", "stencilUsage", offsetof(ManagedType, stencilUsage), das::makeFieldType<decltype(das::declval<ManagedType>().stencilUsage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
struct VkImageSwapchainCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkImageSwapchainCreateInfoKHR> {
  VkImageSwapchainCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageSwapchainCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchain", "swapchain", offsetof(ManagedType, swapchain), das::makeFieldType<decltype(das::declval<ManagedType>().swapchain)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_EXT_astc_decode_mode)
struct VkImageViewASTCDecodeModeEXTAnnotation : ManagedStructureAnnotation<VkImageViewASTCDecodeModeEXT> {
  VkImageViewASTCDecodeModeEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewASTCDecodeModeEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("decodeMode", "decodeMode", offsetof(ManagedType, decodeMode), das::makeFieldType<decltype(das::declval<ManagedType>().decodeMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_astc_decode_mode) */
#if defined(VK_NVX_image_view_handle)
struct VkImageViewAddressPropertiesNVXAnnotation : ManagedStructureAnnotation<VkImageViewAddressPropertiesNVX> {
  VkImageViewAddressPropertiesNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewAddressPropertiesNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_EXT_descriptor_buffer)
struct VkImageViewCaptureDescriptorDataInfoEXTAnnotation : ManagedStructureAnnotation<VkImageViewCaptureDescriptorDataInfoEXT> {
  VkImageViewCaptureDescriptorDataInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewCaptureDescriptorDataInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
struct VkImageViewCreateInfoAnnotation : ManagedStructureAnnotation<VkImageViewCreateInfo> {
  VkImageViewCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("viewType", "viewType", offsetof(ManagedType, viewType), das::makeFieldType<decltype(das::declval<ManagedType>().viewType)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("components", "components", offsetof(ManagedType, components), das::makeFieldType<decltype(das::declval<ManagedType>().components)>(*mlib));
    addFieldEx("subresourceRange", "subresourceRange", offsetof(ManagedType, subresourceRange), das::makeFieldType<decltype(das::declval<ManagedType>().subresourceRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NVX_image_view_handle)
struct VkImageViewHandleInfoNVXAnnotation : ManagedStructureAnnotation<VkImageViewHandleInfoNVX> {
  VkImageViewHandleInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewHandleInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("descriptorType", "descriptorType", offsetof(ManagedType, descriptorType), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorType)>(*mlib));
    addFieldEx("sampler", "sampler", offsetof(ManagedType, sampler), das::makeFieldType<decltype(das::declval<ManagedType>().sampler)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_EXT_image_view_min_lod)
struct VkImageViewMinLodCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkImageViewMinLodCreateInfoEXT> {
  VkImageViewMinLodCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewMinLodCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minLod", "minLod", offsetof(ManagedType, minLod), das::makeFieldType<decltype(das::declval<ManagedType>().minLod)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_view_min_lod) */
#if defined(VK_QCOM_image_processing)
struct VkImageViewSampleWeightCreateInfoQCOMAnnotation : ManagedStructureAnnotation<VkImageViewSampleWeightCreateInfoQCOM> {
  VkImageViewSampleWeightCreateInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewSampleWeightCreateInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("filterCenter", "filterCenter", offsetof(ManagedType, filterCenter), das::makeFieldType<decltype(das::declval<ManagedType>().filterCenter)>(*mlib));
    addFieldEx("filterSize", "filterSize", offsetof(ManagedType, filterSize), das::makeFieldType<decltype(das::declval<ManagedType>().filterSize)>(*mlib));
    addFieldEx("numPhases", "numPhases", offsetof(ManagedType, numPhases), das::makeFieldType<decltype(das::declval<ManagedType>().numPhases)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_image_processing) */
#if defined(VK_EXT_image_sliced_view_of_3d)
struct VkImageViewSlicedCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkImageViewSlicedCreateInfoEXT> {
  VkImageViewSlicedCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewSlicedCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sliceOffset", "sliceOffset", offsetof(ManagedType, sliceOffset), das::makeFieldType<decltype(das::declval<ManagedType>().sliceOffset)>(*mlib));
    addFieldEx("sliceCount", "sliceCount", offsetof(ManagedType, sliceCount), das::makeFieldType<decltype(das::declval<ManagedType>().sliceCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_sliced_view_of_3d) */
#if defined(VK_VERSION_1_1)
struct VkImageViewUsageCreateInfoAnnotation : ManagedStructureAnnotation<VkImageViewUsageCreateInfo> {
  VkImageViewUsageCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImageViewUsageCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
struct VkImportAndroidHardwareBufferInfoANDROIDAnnotation : ManagedStructureAnnotation<VkImportAndroidHardwareBufferInfoANDROID> {
  VkImportAndroidHardwareBufferInfoANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportAndroidHardwareBufferInfoANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_external_fence_fd)
struct VkImportFenceFdInfoKHRAnnotation : ManagedStructureAnnotation<VkImportFenceFdInfoKHR> {
  VkImportFenceFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportFenceFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fence", "fence", offsetof(ManagedType, fence), das::makeFieldType<decltype(das::declval<ManagedType>().fence)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("fd", "fd", offsetof(ManagedType, fd), das::makeFieldType<decltype(das::declval<ManagedType>().fd)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
struct VkImportFenceWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkImportFenceWin32HandleInfoKHR> {
  VkImportFenceWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportFenceWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fence", "fence", offsetof(ManagedType, fence), das::makeFieldType<decltype(das::declval<ManagedType>().fence)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("handle", "handle", offsetof(ManagedType, handle), das::makeFieldType<decltype(das::declval<ManagedType>().handle)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_FUCHSIA_buffer_collection)
struct VkImportMemoryBufferCollectionFUCHSIAAnnotation : ManagedStructureAnnotation<VkImportMemoryBufferCollectionFUCHSIA> {
  VkImportMemoryBufferCollectionFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryBufferCollectionFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("collection", "collection", offsetof(ManagedType, collection), das::makeFieldType<decltype(das::declval<ManagedType>().collection)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_KHR_external_memory_fd)
struct VkImportMemoryFdInfoKHRAnnotation : ManagedStructureAnnotation<VkImportMemoryFdInfoKHR> {
  VkImportMemoryFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("fd", "fd", offsetof(ManagedType, fd), das::makeFieldType<decltype(das::declval<ManagedType>().fd)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_EXT_external_memory_host)
struct VkImportMemoryHostPointerInfoEXTAnnotation : ManagedStructureAnnotation<VkImportMemoryHostPointerInfoEXT> {
  VkImportMemoryHostPointerInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryHostPointerInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("pHostPointer", "pHostPointer", offsetof(ManagedType, pHostPointer), das::makeFieldType<decltype(das::declval<ManagedType>().pHostPointer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_KHR_external_memory_win32)
struct VkImportMemoryWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkImportMemoryWin32HandleInfoKHR> {
  VkImportMemoryWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("handle", "handle", offsetof(ManagedType, handle), das::makeFieldType<decltype(das::declval<ManagedType>().handle)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_NV_external_memory_win32)
struct VkImportMemoryWin32HandleInfoNVAnnotation : ManagedStructureAnnotation<VkImportMemoryWin32HandleInfoNV> {
  VkImportMemoryWin32HandleInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryWin32HandleInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("handle", "handle", offsetof(ManagedType, handle), das::makeFieldType<decltype(das::declval<ManagedType>().handle)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
struct VkImportMemoryZirconHandleInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkImportMemoryZirconHandleInfoFUCHSIA> {
  VkImportMemoryZirconHandleInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMemoryZirconHandleInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("handle", "handle", offsetof(ManagedType, handle), das::makeFieldType<decltype(das::declval<ManagedType>().handle)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_EXT_metal_objects)
struct VkImportMetalBufferInfoEXTAnnotation : ManagedStructureAnnotation<VkImportMetalBufferInfoEXT> {
  VkImportMetalBufferInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMetalBufferInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mtlBuffer", "mtlBuffer", offsetof(ManagedType, mtlBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().mtlBuffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImportMetalIOSurfaceInfoEXTAnnotation : ManagedStructureAnnotation<VkImportMetalIOSurfaceInfoEXT> {
  VkImportMetalIOSurfaceInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMetalIOSurfaceInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("ioSurface", "ioSurface", offsetof(ManagedType, ioSurface), das::makeFieldType<decltype(das::declval<ManagedType>().ioSurface)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImportMetalSharedEventInfoEXTAnnotation : ManagedStructureAnnotation<VkImportMetalSharedEventInfoEXT> {
  VkImportMetalSharedEventInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMetalSharedEventInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mtlSharedEvent", "mtlSharedEvent", offsetof(ManagedType, mtlSharedEvent), das::makeFieldType<decltype(das::declval<ManagedType>().mtlSharedEvent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkImportMetalTextureInfoEXTAnnotation : ManagedStructureAnnotation<VkImportMetalTextureInfoEXT> {
  VkImportMetalTextureInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportMetalTextureInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("plane", "plane", offsetof(ManagedType, plane), das::makeFieldType<decltype(das::declval<ManagedType>().plane)>(*mlib));
    addFieldEx("mtlTexture", "mtlTexture", offsetof(ManagedType, mtlTexture), das::makeFieldType<decltype(das::declval<ManagedType>().mtlTexture)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_QNX_external_memory_screen_buffer)
struct VkImportScreenBufferInfoQNXAnnotation : ManagedStructureAnnotation<VkImportScreenBufferInfoQNX> {
  VkImportScreenBufferInfoQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportScreenBufferInfoQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_KHR_external_semaphore_fd)
struct VkImportSemaphoreFdInfoKHRAnnotation : ManagedStructureAnnotation<VkImportSemaphoreFdInfoKHR> {
  VkImportSemaphoreFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportSemaphoreFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("fd", "fd", offsetof(ManagedType, fd), das::makeFieldType<decltype(das::declval<ManagedType>().fd)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
struct VkImportSemaphoreWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkImportSemaphoreWin32HandleInfoKHR> {
  VkImportSemaphoreWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportSemaphoreWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("handle", "handle", offsetof(ManagedType, handle), das::makeFieldType<decltype(das::declval<ManagedType>().handle)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_FUCHSIA_external_semaphore)
struct VkImportSemaphoreZirconHandleInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkImportSemaphoreZirconHandleInfoFUCHSIA> {
  VkImportSemaphoreZirconHandleInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkImportSemaphoreZirconHandleInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
    addFieldEx("zirconHandle", "zirconHandle", offsetof(ManagedType, zirconHandle), das::makeFieldType<decltype(das::declval<ManagedType>().zirconHandle)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_EXT_device_generated_commands)
struct VkIndirectCommandsExecutionSetTokenEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsExecutionSetTokenEXT> {
  VkIndirectCommandsExecutionSetTokenEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsExecutionSetTokenEXT", lib) {
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("shaderStages", "shaderStages", offsetof(ManagedType, shaderStages), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsIndexBufferTokenEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsIndexBufferTokenEXT> {
  VkIndirectCommandsIndexBufferTokenEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsIndexBufferTokenEXT", lib) {
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_VERSION_1_0)
struct VkPushConstantRangeAnnotation : ManagedStructureAnnotation<VkPushConstantRange> {
  VkPushConstantRangeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPushConstantRange", lib) {
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
struct VkIndirectCommandsPushConstantTokenEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsPushConstantTokenEXT> {
  VkIndirectCommandsPushConstantTokenEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsPushConstantTokenEXT", lib) {
    addFieldEx("updateRange", "updateRange", offsetof(ManagedType, updateRange), das::makeFieldType<decltype(das::declval<ManagedType>().updateRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsVertexBufferTokenEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsVertexBufferTokenEXT> {
  VkIndirectCommandsVertexBufferTokenEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsVertexBufferTokenEXT", lib) {
    addFieldEx("vertexBindingUnit", "vertexBindingUnit", offsetof(ManagedType, vertexBindingUnit), das::makeFieldType<decltype(das::declval<ManagedType>().vertexBindingUnit)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsTokenDataEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsTokenDataEXT> {
  VkIndirectCommandsTokenDataEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsTokenDataEXT", lib) {
    addFieldEx("pPushConstant", "pPushConstant", offsetof(ManagedType, pPushConstant), das::makeFieldType<decltype(das::declval<ManagedType>().pPushConstant)>(*mlib));
    addFieldEx("pVertexBuffer", "pVertexBuffer", offsetof(ManagedType, pVertexBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexBuffer)>(*mlib));
    addFieldEx("pIndexBuffer", "pIndexBuffer", offsetof(ManagedType, pIndexBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().pIndexBuffer)>(*mlib));
    addFieldEx("pExecutionSet", "pExecutionSet", offsetof(ManagedType, pExecutionSet), das::makeFieldType<decltype(das::declval<ManagedType>().pExecutionSet)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsLayoutTokenEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsLayoutTokenEXT> {
  VkIndirectCommandsLayoutTokenEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsLayoutTokenEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsLayoutCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectCommandsLayoutCreateInfoEXT> {
  VkIndirectCommandsLayoutCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsLayoutCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("shaderStages", "shaderStages", offsetof(ManagedType, shaderStages), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStages)>(*mlib));
    addFieldEx("indirectStride", "indirectStride", offsetof(ManagedType, indirectStride), das::makeFieldType<decltype(das::declval<ManagedType>().indirectStride)>(*mlib));
    addFieldEx("pipelineLayout", "pipelineLayout", offsetof(ManagedType, pipelineLayout), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineLayout)>(*mlib));
    addFieldEx("tokenCount", "tokenCount", offsetof(ManagedType, tokenCount), das::makeFieldType<decltype(das::declval<ManagedType>().tokenCount)>(*mlib));
    addFieldEx("pTokens", "pTokens", offsetof(ManagedType, pTokens), das::makeFieldType<decltype(das::declval<ManagedType>().pTokens)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkIndirectCommandsLayoutTokenNVAnnotation : ManagedStructureAnnotation<VkIndirectCommandsLayoutTokenNV> {
  VkIndirectCommandsLayoutTokenNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsLayoutTokenNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("tokenType", "tokenType", offsetof(ManagedType, tokenType), das::makeFieldType<decltype(das::declval<ManagedType>().tokenType)>(*mlib));
    addFieldEx("stream", "stream", offsetof(ManagedType, stream), das::makeFieldType<decltype(das::declval<ManagedType>().stream)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("vertexBindingUnit", "vertexBindingUnit", offsetof(ManagedType, vertexBindingUnit), das::makeFieldType<decltype(das::declval<ManagedType>().vertexBindingUnit)>(*mlib));
    addFieldEx("vertexDynamicStride", "vertexDynamicStride", offsetof(ManagedType, vertexDynamicStride), das::makeFieldType<decltype(das::declval<ManagedType>().vertexDynamicStride)>(*mlib));
    addFieldEx("pushconstantPipelineLayout", "pushconstantPipelineLayout", offsetof(ManagedType, pushconstantPipelineLayout), das::makeFieldType<decltype(das::declval<ManagedType>().pushconstantPipelineLayout)>(*mlib));
    addFieldEx("pushconstantShaderStageFlags", "pushconstantShaderStageFlags", offsetof(ManagedType, pushconstantShaderStageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().pushconstantShaderStageFlags)>(*mlib));
    addFieldEx("pushconstantOffset", "pushconstantOffset", offsetof(ManagedType, pushconstantOffset), das::makeFieldType<decltype(das::declval<ManagedType>().pushconstantOffset)>(*mlib));
    addFieldEx("pushconstantSize", "pushconstantSize", offsetof(ManagedType, pushconstantSize), das::makeFieldType<decltype(das::declval<ManagedType>().pushconstantSize)>(*mlib));
    addFieldEx("indirectStateFlags", "indirectStateFlags", offsetof(ManagedType, indirectStateFlags), das::makeFieldType<decltype(das::declval<ManagedType>().indirectStateFlags)>(*mlib));
    addFieldEx("indexTypeCount", "indexTypeCount", offsetof(ManagedType, indexTypeCount), das::makeFieldType<decltype(das::declval<ManagedType>().indexTypeCount)>(*mlib));
    addFieldEx("pIndexTypes", "pIndexTypes", offsetof(ManagedType, pIndexTypes), das::makeFieldType<decltype(das::declval<ManagedType>().pIndexTypes)>(*mlib));
    addFieldEx("pIndexTypeValues", "pIndexTypeValues", offsetof(ManagedType, pIndexTypeValues), das::makeFieldType<decltype(das::declval<ManagedType>().pIndexTypeValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectCommandsLayoutCreateInfoNVAnnotation : ManagedStructureAnnotation<VkIndirectCommandsLayoutCreateInfoNV> {
  VkIndirectCommandsLayoutCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectCommandsLayoutCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("tokenCount", "tokenCount", offsetof(ManagedType, tokenCount), das::makeFieldType<decltype(das::declval<ManagedType>().tokenCount)>(*mlib));
    addFieldEx("pTokens", "pTokens", offsetof(ManagedType, pTokens), das::makeFieldType<decltype(das::declval<ManagedType>().pTokens)>(*mlib));
    addFieldEx("streamCount", "streamCount", offsetof(ManagedType, streamCount), das::makeFieldType<decltype(das::declval<ManagedType>().streamCount)>(*mlib));
    addFieldEx("pStreamStrides", "pStreamStrides", offsetof(ManagedType, pStreamStrides), das::makeFieldType<decltype(das::declval<ManagedType>().pStreamStrides)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
struct VkIndirectExecutionSetPipelineInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectExecutionSetPipelineInfoEXT> {
  VkIndirectExecutionSetPipelineInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectExecutionSetPipelineInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("initialPipeline", "initialPipeline", offsetof(ManagedType, initialPipeline), das::makeFieldType<decltype(das::declval<ManagedType>().initialPipeline)>(*mlib));
    addFieldEx("maxPipelineCount", "maxPipelineCount", offsetof(ManagedType, maxPipelineCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxPipelineCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectExecutionSetShaderLayoutInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectExecutionSetShaderLayoutInfoEXT> {
  VkIndirectExecutionSetShaderLayoutInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectExecutionSetShaderLayoutInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("setLayoutCount", "setLayoutCount", offsetof(ManagedType, setLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().setLayoutCount)>(*mlib));
    addFieldEx("pSetLayouts", "pSetLayouts", offsetof(ManagedType, pSetLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pSetLayouts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectExecutionSetShaderInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectExecutionSetShaderInfoEXT> {
  VkIndirectExecutionSetShaderInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectExecutionSetShaderInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCount", "shaderCount", offsetof(ManagedType, shaderCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCount)>(*mlib));
    addFieldEx("pInitialShaders", "pInitialShaders", offsetof(ManagedType, pInitialShaders), das::makeFieldType<decltype(das::declval<ManagedType>().pInitialShaders)>(*mlib));
    addFieldEx("pSetLayoutInfos", "pSetLayoutInfos", offsetof(ManagedType, pSetLayoutInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pSetLayoutInfos)>(*mlib));
    addFieldEx("maxShaderCount", "maxShaderCount", offsetof(ManagedType, maxShaderCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxShaderCount)>(*mlib));
    addFieldEx("pushConstantRangeCount", "pushConstantRangeCount", offsetof(ManagedType, pushConstantRangeCount), das::makeFieldType<decltype(das::declval<ManagedType>().pushConstantRangeCount)>(*mlib));
    addFieldEx("pPushConstantRanges", "pPushConstantRanges", offsetof(ManagedType, pPushConstantRanges), das::makeFieldType<decltype(das::declval<ManagedType>().pPushConstantRanges)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectExecutionSetInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectExecutionSetInfoEXT> {
  VkIndirectExecutionSetInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectExecutionSetInfoEXT", lib) {
    addFieldEx("pPipelineInfo", "pPipelineInfo", offsetof(ManagedType, pPipelineInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineInfo)>(*mlib));
    addFieldEx("pShaderInfo", "pShaderInfo", offsetof(ManagedType, pShaderInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pShaderInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkIndirectExecutionSetCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkIndirectExecutionSetCreateInfoEXT> {
  VkIndirectExecutionSetCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkIndirectExecutionSetCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("info", "info", offsetof(ManagedType, info), das::makeFieldType<decltype(das::declval<ManagedType>().info)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_INTEL_performance_query)
struct VkInitializePerformanceApiInfoINTELAnnotation : ManagedStructureAnnotation<VkInitializePerformanceApiInfoINTEL> {
  VkInitializePerformanceApiInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkInitializePerformanceApiInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pUserData", "pUserData", offsetof(ManagedType, pUserData), das::makeFieldType<decltype(das::declval<ManagedType>().pUserData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_VERSION_1_1)
struct VkInputAttachmentAspectReferenceAnnotation : ManagedStructureAnnotation<VkInputAttachmentAspectReference> {
  VkInputAttachmentAspectReferenceAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkInputAttachmentAspectReference", lib) {
    addFieldEx("subpass", "subpass", offsetof(ManagedType, subpass), das::makeFieldType<decltype(das::declval<ManagedType>().subpass)>(*mlib));
    addFieldEx("inputAttachmentIndex", "inputAttachmentIndex", offsetof(ManagedType, inputAttachmentIndex), das::makeFieldType<decltype(das::declval<ManagedType>().inputAttachmentIndex)>(*mlib));
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkInstanceCreateInfoAnnotation : ManagedStructureAnnotation<VkInstanceCreateInfo> {
  VkInstanceCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkInstanceCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pApplicationInfo", "pApplicationInfo", offsetof(ManagedType, pApplicationInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pApplicationInfo)>(*mlib));
    addFieldEx("enabledLayerCount", "enabledLayerCount", offsetof(ManagedType, enabledLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().enabledLayerCount)>(*mlib));
    addFieldEx("ppEnabledLayerNames", "ppEnabledLayerNames", offsetof(ManagedType, ppEnabledLayerNames), das::makeFieldType<decltype(das::declval<ManagedType>().ppEnabledLayerNames)>(*mlib));
    addFieldEx("enabledExtensionCount", "enabledExtensionCount", offsetof(ManagedType, enabledExtensionCount), das::makeFieldType<decltype(das::declval<ManagedType>().enabledExtensionCount)>(*mlib));
    addFieldEx("ppEnabledExtensionNames", "ppEnabledExtensionNames", offsetof(ManagedType, ppEnabledExtensionNames), das::makeFieldType<decltype(das::declval<ManagedType>().ppEnabledExtensionNames)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_low_latency2)
struct VkLatencySleepInfoNVAnnotation : ManagedStructureAnnotation<VkLatencySleepInfoNV> {
  VkLatencySleepInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLatencySleepInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("signalSemaphore", "signalSemaphore", offsetof(ManagedType, signalSemaphore), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphore)>(*mlib));
    addFieldEx("value", "value", offsetof(ManagedType, value), das::makeFieldType<decltype(das::declval<ManagedType>().value)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkLatencySleepModeInfoNVAnnotation : ManagedStructureAnnotation<VkLatencySleepModeInfoNV> {
  VkLatencySleepModeInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLatencySleepModeInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("lowLatencyMode", "lowLatencyMode", offsetof(ManagedType, lowLatencyMode), das::makeFieldType<decltype(das::declval<ManagedType>().lowLatencyMode)>(*mlib));
    addFieldEx("lowLatencyBoost", "lowLatencyBoost", offsetof(ManagedType, lowLatencyBoost), das::makeFieldType<decltype(das::declval<ManagedType>().lowLatencyBoost)>(*mlib));
    addFieldEx("minimumIntervalUs", "minimumIntervalUs", offsetof(ManagedType, minimumIntervalUs), das::makeFieldType<decltype(das::declval<ManagedType>().minimumIntervalUs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkLatencySubmissionPresentIdNVAnnotation : ManagedStructureAnnotation<VkLatencySubmissionPresentIdNV> {
  VkLatencySubmissionPresentIdNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLatencySubmissionPresentIdNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentID", "presentID", offsetof(ManagedType, presentID), das::makeFieldType<decltype(das::declval<ManagedType>().presentID)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkLatencySurfaceCapabilitiesNVAnnotation : ManagedStructureAnnotation<VkLatencySurfaceCapabilitiesNV> {
  VkLatencySurfaceCapabilitiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLatencySurfaceCapabilitiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentModeCount", "presentModeCount", offsetof(ManagedType, presentModeCount), das::makeFieldType<decltype(das::declval<ManagedType>().presentModeCount)>(*mlib));
    addFieldEx("pPresentModes", "pPresentModes", offsetof(ManagedType, pPresentModes), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentModes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_VERSION_1_0)
struct VkLayerPropertiesAnnotation : ManagedStructureAnnotation<VkLayerProperties> {
  VkLayerPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLayerProperties", lib) {
    addFieldEx("layerName", "layerName", offsetof(ManagedType, layerName), das::makeFieldType<decltype(das::declval<ManagedType>().layerName)>(*mlib));
    addFieldEx("specVersion", "specVersion", offsetof(ManagedType, specVersion), das::makeFieldType<decltype(das::declval<ManagedType>().specVersion)>(*mlib));
    addFieldEx("implementationVersion", "implementationVersion", offsetof(ManagedType, implementationVersion), das::makeFieldType<decltype(das::declval<ManagedType>().implementationVersion)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_layer_settings)
struct VkLayerSettingEXTAnnotation : ManagedStructureAnnotation<VkLayerSettingEXT> {
  VkLayerSettingEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLayerSettingEXT", lib) {
    addFieldEx("pLayerName", "pLayerName", offsetof(ManagedType, pLayerName), das::makeFieldType<decltype(das::declval<ManagedType>().pLayerName)>(*mlib));
    addFieldEx("pSettingName", "pSettingName", offsetof(ManagedType, pSettingName), das::makeFieldType<decltype(das::declval<ManagedType>().pSettingName)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("valueCount", "valueCount", offsetof(ManagedType, valueCount), das::makeFieldType<decltype(das::declval<ManagedType>().valueCount)>(*mlib));
    addFieldEx("pValues", "pValues", offsetof(ManagedType, pValues), das::makeFieldType<decltype(das::declval<ManagedType>().pValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkLayerSettingsCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkLayerSettingsCreateInfoEXT> {
  VkLayerSettingsCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkLayerSettingsCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("settingCount", "settingCount", offsetof(ManagedType, settingCount), das::makeFieldType<decltype(das::declval<ManagedType>().settingCount)>(*mlib));
    addFieldEx("pSettings", "pSettings", offsetof(ManagedType, pSettings), das::makeFieldType<decltype(das::declval<ManagedType>().pSettings)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_layer_settings) */
#if defined(VK_MVK_macos_surface)
struct VkMacOSSurfaceCreateInfoMVKAnnotation : ManagedStructureAnnotation<VkMacOSSurfaceCreateInfoMVK> {
  VkMacOSSurfaceCreateInfoMVKAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMacOSSurfaceCreateInfoMVK", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pView", "pView", offsetof(ManagedType, pView), das::makeFieldType<decltype(das::declval<ManagedType>().pView)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_VERSION_1_0)
struct VkMappedMemoryRangeAnnotation : ManagedStructureAnnotation<VkMappedMemoryRange> {
  VkMappedMemoryRangeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMappedMemoryRange", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkMemoryAllocateFlagsInfoAnnotation : ManagedStructureAnnotation<VkMemoryAllocateFlagsInfo> {
  VkMemoryAllocateFlagsInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryAllocateFlagsInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("deviceMask", "deviceMask", offsetof(ManagedType, deviceMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkMemoryAllocateInfoAnnotation : ManagedStructureAnnotation<VkMemoryAllocateInfo> {
  VkMemoryAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("allocationSize", "allocationSize", offsetof(ManagedType, allocationSize), das::makeFieldType<decltype(das::declval<ManagedType>().allocationSize)>(*mlib));
    addFieldEx("memoryTypeIndex", "memoryTypeIndex", offsetof(ManagedType, memoryTypeIndex), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMemoryBarrierAnnotation : ManagedStructureAnnotation<VkMemoryBarrier> {
  VkMemoryBarrierAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryBarrier", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkMemoryDedicatedAllocateInfoAnnotation : ManagedStructureAnnotation<VkMemoryDedicatedAllocateInfo> {
  VkMemoryDedicatedAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryDedicatedAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image", "image", offsetof(ManagedType, image), das::makeFieldType<decltype(das::declval<ManagedType>().image)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMemoryDedicatedRequirementsAnnotation : ManagedStructureAnnotation<VkMemoryDedicatedRequirements> {
  VkMemoryDedicatedRequirementsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryDedicatedRequirements", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("prefersDedicatedAllocation", "prefersDedicatedAllocation", offsetof(ManagedType, prefersDedicatedAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().prefersDedicatedAllocation)>(*mlib));
    addFieldEx("requiresDedicatedAllocation", "requiresDedicatedAllocation", offsetof(ManagedType, requiresDedicatedAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().requiresDedicatedAllocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_memory_fd)
struct VkMemoryFdPropertiesKHRAnnotation : ManagedStructureAnnotation<VkMemoryFdPropertiesKHR> {
  VkMemoryFdPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryFdPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
struct VkMemoryGetAndroidHardwareBufferInfoANDROIDAnnotation : ManagedStructureAnnotation<VkMemoryGetAndroidHardwareBufferInfoANDROID> {
  VkMemoryGetAndroidHardwareBufferInfoANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryGetAndroidHardwareBufferInfoANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_external_memory_fd)
struct VkMemoryGetFdInfoKHRAnnotation : ManagedStructureAnnotation<VkMemoryGetFdInfoKHR> {
  VkMemoryGetFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryGetFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_NV_external_memory_rdma)
struct VkMemoryGetRemoteAddressInfoNVAnnotation : ManagedStructureAnnotation<VkMemoryGetRemoteAddressInfoNV> {
  VkMemoryGetRemoteAddressInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryGetRemoteAddressInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_KHR_external_memory_win32)
struct VkMemoryGetWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkMemoryGetWin32HandleInfoKHR> {
  VkMemoryGetWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryGetWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
struct VkMemoryGetZirconHandleInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkMemoryGetZirconHandleInfoFUCHSIA> {
  VkMemoryGetZirconHandleInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryGetZirconHandleInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_VERSION_1_0)
struct VkMemoryHeapAnnotation : ManagedStructureAnnotation<VkMemoryHeap> {
  VkMemoryHeapAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryHeap", lib) {
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_external_memory_host)
struct VkMemoryHostPointerPropertiesEXTAnnotation : ManagedStructureAnnotation<VkMemoryHostPointerPropertiesEXT> {
  VkMemoryHostPointerPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryHostPointerPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_VERSION_1_4)
struct VkMemoryMapInfoAnnotation : ManagedStructureAnnotation<VkMemoryMapInfo> {
  VkMemoryMapInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryMapInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_map_memory_placed)
struct VkMemoryMapPlacedInfoEXTAnnotation : ManagedStructureAnnotation<VkMemoryMapPlacedInfoEXT> {
  VkMemoryMapPlacedInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryMapPlacedInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pPlacedAddress", "pPlacedAddress", offsetof(ManagedType, pPlacedAddress), das::makeFieldType<decltype(das::declval<ManagedType>().pPlacedAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_map_memory_placed) */
#if defined(VK_VERSION_1_2)
struct VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation : ManagedStructureAnnotation<VkMemoryOpaqueCaptureAddressAllocateInfo> {
  VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryOpaqueCaptureAddressAllocateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("opaqueCaptureAddress", "opaqueCaptureAddress", offsetof(ManagedType, opaqueCaptureAddress), das::makeFieldType<decltype(das::declval<ManagedType>().opaqueCaptureAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_memory_priority)
struct VkMemoryPriorityAllocateInfoEXTAnnotation : ManagedStructureAnnotation<VkMemoryPriorityAllocateInfoEXT> {
  VkMemoryPriorityAllocateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryPriorityAllocateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("priority", "priority", offsetof(ManagedType, priority), das::makeFieldType<decltype(das::declval<ManagedType>().priority)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_memory_priority) */
#if defined(VK_VERSION_1_0)
struct VkMemoryRequirementsAnnotation : ManagedStructureAnnotation<VkMemoryRequirements> {
  VkMemoryRequirementsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryRequirements", lib) {
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("alignment", "alignment", offsetof(ManagedType, alignment), das::makeFieldType<decltype(das::declval<ManagedType>().alignment)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkMemoryRequirements2Annotation : ManagedStructureAnnotation<VkMemoryRequirements2> {
  VkMemoryRequirements2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryRequirements2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryRequirements", "memoryRequirements", offsetof(ManagedType, memoryRequirements), das::makeFieldType<decltype(das::declval<ManagedType>().memoryRequirements)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkMemoryTypeAnnotation : ManagedStructureAnnotation<VkMemoryType> {
  VkMemoryTypeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryType", lib) {
    addFieldEx("propertyFlags", "propertyFlags", offsetof(ManagedType, propertyFlags), das::makeFieldType<decltype(das::declval<ManagedType>().propertyFlags)>(*mlib));
    addFieldEx("heapIndex", "heapIndex", offsetof(ManagedType, heapIndex), das::makeFieldType<decltype(das::declval<ManagedType>().heapIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_4)
struct VkMemoryUnmapInfoAnnotation : ManagedStructureAnnotation<VkMemoryUnmapInfo> {
  VkMemoryUnmapInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryUnmapInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("memory", "memory", offsetof(ManagedType, memory), das::makeFieldType<decltype(das::declval<ManagedType>().memory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_external_memory_win32)
struct VkMemoryWin32HandlePropertiesKHRAnnotation : ManagedStructureAnnotation<VkMemoryWin32HandlePropertiesKHR> {
  VkMemoryWin32HandlePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryWin32HandlePropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
struct VkMemoryZirconHandlePropertiesFUCHSIAAnnotation : ManagedStructureAnnotation<VkMemoryZirconHandlePropertiesFUCHSIA> {
  VkMemoryZirconHandlePropertiesFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMemoryZirconHandlePropertiesFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_EXT_metal_surface)
struct VkMetalSurfaceCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkMetalSurfaceCreateInfoEXT> {
  VkMetalSurfaceCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMetalSurfaceCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pLayer", "pLayer", offsetof(ManagedType, pLayer), das::makeFieldType<decltype(das::declval<ManagedType>().pLayer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_opacity_micromap)
struct VkMicromapBuildInfoEXTAnnotation : ManagedStructureAnnotation<VkMicromapBuildInfoEXT> {
  VkMicromapBuildInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapBuildInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("mode", "mode", offsetof(ManagedType, mode), das::makeFieldType<decltype(das::declval<ManagedType>().mode)>(*mlib));
    addFieldEx("dstMicromap", "dstMicromap", offsetof(ManagedType, dstMicromap), das::makeFieldType<decltype(das::declval<ManagedType>().dstMicromap)>(*mlib));
    addFieldEx("usageCountsCount", "usageCountsCount", offsetof(ManagedType, usageCountsCount), das::makeFieldType<decltype(das::declval<ManagedType>().usageCountsCount)>(*mlib));
    addFieldEx("pUsageCounts", "pUsageCounts", offsetof(ManagedType, pUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().pUsageCounts)>(*mlib));
    addFieldEx("ppUsageCounts", "ppUsageCounts", offsetof(ManagedType, ppUsageCounts), das::makeFieldType<decltype(das::declval<ManagedType>().ppUsageCounts)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
    addFieldEx("scratchData", "scratchData", offsetof(ManagedType, scratchData), das::makeFieldType<decltype(das::declval<ManagedType>().scratchData)>(*mlib));
    addFieldEx("triangleArray", "triangleArray", offsetof(ManagedType, triangleArray), das::makeFieldType<decltype(das::declval<ManagedType>().triangleArray)>(*mlib));
    addFieldEx("triangleArrayStride", "triangleArrayStride", offsetof(ManagedType, triangleArrayStride), das::makeFieldType<decltype(das::declval<ManagedType>().triangleArrayStride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMicromapBuildSizesInfoEXTAnnotation : ManagedStructureAnnotation<VkMicromapBuildSizesInfoEXT> {
  VkMicromapBuildSizesInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapBuildSizesInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("micromapSize", "micromapSize", offsetof(ManagedType, micromapSize), das::makeFieldType<decltype(das::declval<ManagedType>().micromapSize)>(*mlib));
    addFieldEx("buildScratchSize", "buildScratchSize", offsetof(ManagedType, buildScratchSize), das::makeFieldType<decltype(das::declval<ManagedType>().buildScratchSize)>(*mlib));
    addFieldEx("discardable", "discardable", offsetof(ManagedType, discardable), das::makeFieldType<decltype(das::declval<ManagedType>().discardable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMicromapCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkMicromapCreateInfoEXT> {
  VkMicromapCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("createFlags", "createFlags", offsetof(ManagedType, createFlags), das::makeFieldType<decltype(das::declval<ManagedType>().createFlags)>(*mlib));
    addFieldEx("buffer", "buffer", offsetof(ManagedType, buffer), das::makeFieldType<decltype(das::declval<ManagedType>().buffer)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMicromapTriangleEXTAnnotation : ManagedStructureAnnotation<VkMicromapTriangleEXT> {
  VkMicromapTriangleEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapTriangleEXT", lib) {
    addFieldEx("dataOffset", "dataOffset", offsetof(ManagedType, dataOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dataOffset)>(*mlib));
    addFieldEx("subdivisionLevel", "subdivisionLevel", offsetof(ManagedType, subdivisionLevel), das::makeFieldType<decltype(das::declval<ManagedType>().subdivisionLevel)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMicromapVersionInfoEXTAnnotation : ManagedStructureAnnotation<VkMicromapVersionInfoEXT> {
  VkMicromapVersionInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMicromapVersionInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pVersionData", "pVersionData", offsetof(ManagedType, pVersionData), das::makeFieldType<decltype(das::declval<ManagedType>().pVersionData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_multi_draw)
struct VkMultiDrawIndexedInfoEXTAnnotation : ManagedStructureAnnotation<VkMultiDrawIndexedInfoEXT> {
  VkMultiDrawIndexedInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultiDrawIndexedInfoEXT", lib) {
    addFieldEx("firstIndex", "firstIndex", offsetof(ManagedType, firstIndex), das::makeFieldType<decltype(das::declval<ManagedType>().firstIndex)>(*mlib));
    addFieldEx("indexCount", "indexCount", offsetof(ManagedType, indexCount), das::makeFieldType<decltype(das::declval<ManagedType>().indexCount)>(*mlib));
    addFieldEx("vertexOffset", "vertexOffset", offsetof(ManagedType, vertexOffset), das::makeFieldType<decltype(das::declval<ManagedType>().vertexOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMultiDrawInfoEXTAnnotation : ManagedStructureAnnotation<VkMultiDrawInfoEXT> {
  VkMultiDrawInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultiDrawInfoEXT", lib) {
    addFieldEx("firstVertex", "firstVertex", offsetof(ManagedType, firstVertex), das::makeFieldType<decltype(das::declval<ManagedType>().firstVertex)>(*mlib));
    addFieldEx("vertexCount", "vertexCount", offsetof(ManagedType, vertexCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_sample_locations)
struct VkMultisamplePropertiesEXTAnnotation : ManagedStructureAnnotation<VkMultisamplePropertiesEXT> {
  VkMultisamplePropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultisamplePropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxSampleLocationGridSize", "maxSampleLocationGridSize", offsetof(ManagedType, maxSampleLocationGridSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxSampleLocationGridSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
struct VkMultisampledRenderToSingleSampledInfoEXTAnnotation : ManagedStructureAnnotation<VkMultisampledRenderToSingleSampledInfoEXT> {
  VkMultisampledRenderToSingleSampledInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultisampledRenderToSingleSampledInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multisampledRenderToSingleSampledEnable", "multisampledRenderToSingleSampledEnable", offsetof(ManagedType, multisampledRenderToSingleSampledEnable), das::makeFieldType<decltype(das::declval<ManagedType>().multisampledRenderToSingleSampledEnable)>(*mlib));
    addFieldEx("rasterizationSamples", "rasterizationSamples", offsetof(ManagedType, rasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationSamples)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_NVX_multiview_per_view_attributes) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
struct VkMultiviewPerViewAttributesInfoNVXAnnotation : ManagedStructureAnnotation<VkMultiviewPerViewAttributesInfoNVX> {
  VkMultiviewPerViewAttributesInfoNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultiviewPerViewAttributesInfoNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("perViewAttributes", "perViewAttributes", offsetof(ManagedType, perViewAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().perViewAttributes)>(*mlib));
    addFieldEx("perViewAttributesPositionXOnly", "perViewAttributesPositionXOnly", offsetof(ManagedType, perViewAttributesPositionXOnly), das::makeFieldType<decltype(das::declval<ManagedType>().perViewAttributesPositionXOnly)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NVX_multiview_per_view_attributes) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_QCOM_multiview_per_view_render_areas)
struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOMAnnotation : ManagedStructureAnnotation<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM> {
  VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("perViewRenderAreaCount", "perViewRenderAreaCount", offsetof(ManagedType, perViewRenderAreaCount), das::makeFieldType<decltype(das::declval<ManagedType>().perViewRenderAreaCount)>(*mlib));
    addFieldEx("pPerViewRenderAreas", "pPerViewRenderAreas", offsetof(ManagedType, pPerViewRenderAreas), das::makeFieldType<decltype(das::declval<ManagedType>().pPerViewRenderAreas)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_multiview_per_view_render_areas) */
#if defined(VK_EXT_mutable_descriptor_type)
struct VkMutableDescriptorTypeListEXTAnnotation : ManagedStructureAnnotation<VkMutableDescriptorTypeListEXT> {
  VkMutableDescriptorTypeListEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMutableDescriptorTypeListEXT", lib) {
    addFieldEx("descriptorTypeCount", "descriptorTypeCount", offsetof(ManagedType, descriptorTypeCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorTypeCount)>(*mlib));
    addFieldEx("pDescriptorTypes", "pDescriptorTypes", offsetof(ManagedType, pDescriptorTypes), das::makeFieldType<decltype(das::declval<ManagedType>().pDescriptorTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkMutableDescriptorTypeCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkMutableDescriptorTypeCreateInfoEXT> {
  VkMutableDescriptorTypeCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkMutableDescriptorTypeCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mutableDescriptorTypeListCount", "mutableDescriptorTypeListCount", offsetof(ManagedType, mutableDescriptorTypeListCount), das::makeFieldType<decltype(das::declval<ManagedType>().mutableDescriptorTypeListCount)>(*mlib));
    addFieldEx("pMutableDescriptorTypeLists", "pMutableDescriptorTypeLists", offsetof(ManagedType, pMutableDescriptorTypeLists), das::makeFieldType<decltype(das::declval<ManagedType>().pMutableDescriptorTypeLists)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_mutable_descriptor_type) */
#if defined(VK_EXT_descriptor_buffer)
struct VkOpaqueCaptureDescriptorDataCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkOpaqueCaptureDescriptorDataCreateInfoEXT> {
  VkOpaqueCaptureDescriptorDataCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpaqueCaptureDescriptorDataCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("opaqueCaptureDescriptorData", "opaqueCaptureDescriptorData", offsetof(ManagedType, opaqueCaptureDescriptorData), das::makeFieldType<decltype(das::declval<ManagedType>().opaqueCaptureDescriptorData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_NV_optical_flow)
struct VkOpticalFlowExecuteInfoNVAnnotation : ManagedStructureAnnotation<VkOpticalFlowExecuteInfoNV> {
  VkOpticalFlowExecuteInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpticalFlowExecuteInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkOpticalFlowImageFormatInfoNVAnnotation : ManagedStructureAnnotation<VkOpticalFlowImageFormatInfoNV> {
  VkOpticalFlowImageFormatInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpticalFlowImageFormatInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkOpticalFlowImageFormatPropertiesNVAnnotation : ManagedStructureAnnotation<VkOpticalFlowImageFormatPropertiesNV> {
  VkOpticalFlowImageFormatPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpticalFlowImageFormatPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkOpticalFlowSessionCreateInfoNVAnnotation : ManagedStructureAnnotation<VkOpticalFlowSessionCreateInfoNV> {
  VkOpticalFlowSessionCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpticalFlowSessionCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("imageFormat", "imageFormat", offsetof(ManagedType, imageFormat), das::makeFieldType<decltype(das::declval<ManagedType>().imageFormat)>(*mlib));
    addFieldEx("flowVectorFormat", "flowVectorFormat", offsetof(ManagedType, flowVectorFormat), das::makeFieldType<decltype(das::declval<ManagedType>().flowVectorFormat)>(*mlib));
    addFieldEx("costFormat", "costFormat", offsetof(ManagedType, costFormat), das::makeFieldType<decltype(das::declval<ManagedType>().costFormat)>(*mlib));
    addFieldEx("outputGridSize", "outputGridSize", offsetof(ManagedType, outputGridSize), das::makeFieldType<decltype(das::declval<ManagedType>().outputGridSize)>(*mlib));
    addFieldEx("hintGridSize", "hintGridSize", offsetof(ManagedType, hintGridSize), das::makeFieldType<decltype(das::declval<ManagedType>().hintGridSize)>(*mlib));
    addFieldEx("performanceLevel", "performanceLevel", offsetof(ManagedType, performanceLevel), das::makeFieldType<decltype(das::declval<ManagedType>().performanceLevel)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkOpticalFlowSessionCreatePrivateDataInfoNVAnnotation : ManagedStructureAnnotation<VkOpticalFlowSessionCreatePrivateDataInfoNV> {
  VkOpticalFlowSessionCreatePrivateDataInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOpticalFlowSessionCreatePrivateDataInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("id", "id", offsetof(ManagedType, id), das::makeFieldType<decltype(das::declval<ManagedType>().id)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("pPrivateData", "pPrivateData", offsetof(ManagedType, pPrivateData), das::makeFieldType<decltype(das::declval<ManagedType>().pPrivateData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_low_latency2)
struct VkOutOfBandQueueTypeInfoNVAnnotation : ManagedStructureAnnotation<VkOutOfBandQueueTypeInfoNV> {
  VkOutOfBandQueueTypeInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkOutOfBandQueueTypeInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queueType", "queueType", offsetof(ManagedType, queueType), das::makeFieldType<decltype(das::declval<ManagedType>().queueType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_GOOGLE_display_timing)
struct VkPastPresentationTimingGOOGLEAnnotation : ManagedStructureAnnotation<VkPastPresentationTimingGOOGLE> {
  VkPastPresentationTimingGOOGLEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPastPresentationTimingGOOGLE", lib) {
    addFieldEx("presentID", "presentID", offsetof(ManagedType, presentID), das::makeFieldType<decltype(das::declval<ManagedType>().presentID)>(*mlib));
    addFieldEx("desiredPresentTime", "desiredPresentTime", offsetof(ManagedType, desiredPresentTime), das::makeFieldType<decltype(das::declval<ManagedType>().desiredPresentTime)>(*mlib));
    addFieldEx("actualPresentTime", "actualPresentTime", offsetof(ManagedType, actualPresentTime), das::makeFieldType<decltype(das::declval<ManagedType>().actualPresentTime)>(*mlib));
    addFieldEx("earliestPresentTime", "earliestPresentTime", offsetof(ManagedType, earliestPresentTime), das::makeFieldType<decltype(das::declval<ManagedType>().earliestPresentTime)>(*mlib));
    addFieldEx("presentMargin", "presentMargin", offsetof(ManagedType, presentMargin), das::makeFieldType<decltype(das::declval<ManagedType>().presentMargin)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_INTEL_performance_query)
struct VkPerformanceConfigurationAcquireInfoINTELAnnotation : ManagedStructureAnnotation<VkPerformanceConfigurationAcquireInfoINTEL> {
  VkPerformanceConfigurationAcquireInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceConfigurationAcquireInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_performance_query)
struct VkPerformanceCounterDescriptionKHRAnnotation : ManagedStructureAnnotation<VkPerformanceCounterDescriptionKHR> {
  VkPerformanceCounterDescriptionKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceCounterDescriptionKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
    addFieldEx("category", "category", offsetof(ManagedType, category), das::makeFieldType<decltype(das::declval<ManagedType>().category)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPerformanceCounterKHRAnnotation : ManagedStructureAnnotation<VkPerformanceCounterKHR> {
  VkPerformanceCounterKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceCounterKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("unit", "unit", offsetof(ManagedType, unit), das::makeFieldType<decltype(das::declval<ManagedType>().unit)>(*mlib));
    addFieldEx("scope", "scope", offsetof(ManagedType, scope), das::makeFieldType<decltype(das::declval<ManagedType>().scope)>(*mlib));
    addFieldEx("storage", "storage", offsetof(ManagedType, storage), das::makeFieldType<decltype(das::declval<ManagedType>().storage)>(*mlib));
    addFieldEx("uuid", "uuid", offsetof(ManagedType, uuid), das::makeFieldType<decltype(das::declval<ManagedType>().uuid)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPerformanceCounterResultKHRAnnotation : ManagedStructureAnnotation<VkPerformanceCounterResultKHR> {
  VkPerformanceCounterResultKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceCounterResultKHR", lib) {
    addFieldEx("int32", "int32", offsetof(ManagedType, int32), das::makeFieldType<decltype(das::declval<ManagedType>().int32)>(*mlib));
    addFieldEx("int64", "int64", offsetof(ManagedType, int64), das::makeFieldType<decltype(das::declval<ManagedType>().int64)>(*mlib));
    addFieldEx("uint32", "uint32", offsetof(ManagedType, uint32), das::makeFieldType<decltype(das::declval<ManagedType>().uint32)>(*mlib));
    addFieldEx("uint64", "uint64", offsetof(ManagedType, uint64), das::makeFieldType<decltype(das::declval<ManagedType>().uint64)>(*mlib));
    addFieldEx("float32", "float32", offsetof(ManagedType, float32), das::makeFieldType<decltype(das::declval<ManagedType>().float32)>(*mlib));
    addFieldEx("float64", "float64", offsetof(ManagedType, float64), das::makeFieldType<decltype(das::declval<ManagedType>().float64)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
struct VkPerformanceMarkerInfoINTELAnnotation : ManagedStructureAnnotation<VkPerformanceMarkerInfoINTEL> {
  VkPerformanceMarkerInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceMarkerInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("marker", "marker", offsetof(ManagedType, marker), das::makeFieldType<decltype(das::declval<ManagedType>().marker)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPerformanceOverrideInfoINTELAnnotation : ManagedStructureAnnotation<VkPerformanceOverrideInfoINTEL> {
  VkPerformanceOverrideInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceOverrideInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("enable", "enable", offsetof(ManagedType, enable), das::makeFieldType<decltype(das::declval<ManagedType>().enable)>(*mlib));
    addFieldEx("parameter", "parameter", offsetof(ManagedType, parameter), das::makeFieldType<decltype(das::declval<ManagedType>().parameter)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_performance_query) && defined(VKSC_VERSION_1_0)
struct VkPerformanceQueryReservationInfoKHRAnnotation : ManagedStructureAnnotation<VkPerformanceQueryReservationInfoKHR> {
  VkPerformanceQueryReservationInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceQueryReservationInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxPerformanceQueriesPerPool", "maxPerformanceQueriesPerPool", offsetof(ManagedType, maxPerformanceQueriesPerPool), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerformanceQueriesPerPool)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) && defined(VKSC_VERSION_1_0) */
#if defined(VK_KHR_performance_query)
struct VkPerformanceQuerySubmitInfoKHRAnnotation : ManagedStructureAnnotation<VkPerformanceQuerySubmitInfoKHR> {
  VkPerformanceQuerySubmitInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceQuerySubmitInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("counterPassIndex", "counterPassIndex", offsetof(ManagedType, counterPassIndex), das::makeFieldType<decltype(das::declval<ManagedType>().counterPassIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
struct VkPerformanceStreamMarkerInfoINTELAnnotation : ManagedStructureAnnotation<VkPerformanceStreamMarkerInfoINTEL> {
  VkPerformanceStreamMarkerInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceStreamMarkerInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("marker", "marker", offsetof(ManagedType, marker), das::makeFieldType<decltype(das::declval<ManagedType>().marker)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPerformanceValueDataINTELAnnotation : ManagedStructureAnnotation<VkPerformanceValueDataINTEL> {
  VkPerformanceValueDataINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceValueDataINTEL", lib) {
    addFieldEx("value32", "value32", offsetof(ManagedType, value32), das::makeFieldType<decltype(das::declval<ManagedType>().value32)>(*mlib));
    addFieldEx("value64", "value64", offsetof(ManagedType, value64), das::makeFieldType<decltype(das::declval<ManagedType>().value64)>(*mlib));
    addFieldEx("valueFloat", "valueFloat", offsetof(ManagedType, valueFloat), das::makeFieldType<decltype(das::declval<ManagedType>().valueFloat)>(*mlib));
    addFieldEx("valueBool", "valueBool", offsetof(ManagedType, valueBool), das::makeFieldType<decltype(das::declval<ManagedType>().valueBool)>(*mlib));
    addFieldEx("valueString", "valueString", offsetof(ManagedType, valueString), das::makeFieldType<decltype(das::declval<ManagedType>().valueString)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPerformanceValueINTELAnnotation : ManagedStructureAnnotation<VkPerformanceValueINTEL> {
  VkPerformanceValueINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPerformanceValueINTEL", lib) {
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDevice16BitStorageFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevice16BitStorageFeatures> {
  VkPhysicalDevice16BitStorageFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevice16BitStorageFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("storageBuffer16BitAccess", "storageBuffer16BitAccess", offsetof(ManagedType, storageBuffer16BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().storageBuffer16BitAccess)>(*mlib));
    addFieldEx("uniformAndStorageBuffer16BitAccess", "uniformAndStorageBuffer16BitAccess", offsetof(ManagedType, uniformAndStorageBuffer16BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().uniformAndStorageBuffer16BitAccess)>(*mlib));
    addFieldEx("storagePushConstant16", "storagePushConstant16", offsetof(ManagedType, storagePushConstant16), das::makeFieldType<decltype(das::declval<ManagedType>().storagePushConstant16)>(*mlib));
    addFieldEx("storageInputOutput16", "storageInputOutput16", offsetof(ManagedType, storageInputOutput16), das::makeFieldType<decltype(das::declval<ManagedType>().storageInputOutput16)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_4444_formats)
struct VkPhysicalDevice4444FormatsFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevice4444FormatsFeaturesEXT> {
  VkPhysicalDevice4444FormatsFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevice4444FormatsFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("formatA4R4G4B4", "formatA4R4G4B4", offsetof(ManagedType, formatA4R4G4B4), das::makeFieldType<decltype(das::declval<ManagedType>().formatA4R4G4B4)>(*mlib));
    addFieldEx("formatA4B4G4R4", "formatA4B4G4R4", offsetof(ManagedType, formatA4B4G4R4), das::makeFieldType<decltype(das::declval<ManagedType>().formatA4B4G4R4)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_4444_formats) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDevice8BitStorageFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevice8BitStorageFeatures> {
  VkPhysicalDevice8BitStorageFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevice8BitStorageFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("storageBuffer8BitAccess", "storageBuffer8BitAccess", offsetof(ManagedType, storageBuffer8BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().storageBuffer8BitAccess)>(*mlib));
    addFieldEx("uniformAndStorageBuffer8BitAccess", "uniformAndStorageBuffer8BitAccess", offsetof(ManagedType, uniformAndStorageBuffer8BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().uniformAndStorageBuffer8BitAccess)>(*mlib));
    addFieldEx("storagePushConstant8", "storagePushConstant8", offsetof(ManagedType, storagePushConstant8), das::makeFieldType<decltype(das::declval<ManagedType>().storagePushConstant8)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_astc_decode_mode)
struct VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceASTCDecodeFeaturesEXT> {
  VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceASTCDecodeFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("decodeModeSharedExponent", "decodeModeSharedExponent", offsetof(ManagedType, decodeModeSharedExponent), das::makeFieldType<decltype(das::declval<ManagedType>().decodeModeSharedExponent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_astc_decode_mode) */
#if defined(VK_KHR_acceleration_structure)
struct VkPhysicalDeviceAccelerationStructureFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAccelerationStructureFeaturesKHR> {
  VkPhysicalDeviceAccelerationStructureFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAccelerationStructureFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructure", "accelerationStructure", offsetof(ManagedType, accelerationStructure), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructure)>(*mlib));
    addFieldEx("accelerationStructureCaptureReplay", "accelerationStructureCaptureReplay", offsetof(ManagedType, accelerationStructureCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureCaptureReplay)>(*mlib));
    addFieldEx("accelerationStructureIndirectBuild", "accelerationStructureIndirectBuild", offsetof(ManagedType, accelerationStructureIndirectBuild), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureIndirectBuild)>(*mlib));
    addFieldEx("accelerationStructureHostCommands", "accelerationStructureHostCommands", offsetof(ManagedType, accelerationStructureHostCommands), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureHostCommands)>(*mlib));
    addFieldEx("descriptorBindingAccelerationStructureUpdateAfterBind", "descriptorBindingAccelerationStructureUpdateAfterBind", offsetof(ManagedType, descriptorBindingAccelerationStructureUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingAccelerationStructureUpdateAfterBind)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceAccelerationStructurePropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAccelerationStructurePropertiesKHR> {
  VkPhysicalDeviceAccelerationStructurePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAccelerationStructurePropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxGeometryCount", "maxGeometryCount", offsetof(ManagedType, maxGeometryCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryCount)>(*mlib));
    addFieldEx("maxInstanceCount", "maxInstanceCount", offsetof(ManagedType, maxInstanceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxInstanceCount)>(*mlib));
    addFieldEx("maxPrimitiveCount", "maxPrimitiveCount", offsetof(ManagedType, maxPrimitiveCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxPrimitiveCount)>(*mlib));
    addFieldEx("maxPerStageDescriptorAccelerationStructures", "maxPerStageDescriptorAccelerationStructures", offsetof(ManagedType, maxPerStageDescriptorAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorAccelerationStructures)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindAccelerationStructures", "maxPerStageDescriptorUpdateAfterBindAccelerationStructures", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindAccelerationStructures)>(*mlib));
    addFieldEx("maxDescriptorSetAccelerationStructures", "maxDescriptorSetAccelerationStructures", offsetof(ManagedType, maxDescriptorSetAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetAccelerationStructures)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindAccelerationStructures", "maxDescriptorSetUpdateAfterBindAccelerationStructures", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindAccelerationStructures)>(*mlib));
    addFieldEx("minAccelerationStructureScratchOffsetAlignment", "minAccelerationStructureScratchOffsetAlignment", offsetof(ManagedType, minAccelerationStructureScratchOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minAccelerationStructureScratchOffsetAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_device_address_binding_report)
struct VkPhysicalDeviceAddressBindingReportFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAddressBindingReportFeaturesEXT> {
  VkPhysicalDeviceAddressBindingReportFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAddressBindingReportFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("reportAddressBinding", "reportAddressBinding", offsetof(ManagedType, reportAddressBinding), das::makeFieldType<decltype(das::declval<ManagedType>().reportAddressBinding)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_address_binding_report) */
#if defined(VK_SEC_amigo_profiling)
struct VkPhysicalDeviceAmigoProfilingFeaturesSECAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAmigoProfilingFeaturesSEC> {
  VkPhysicalDeviceAmigoProfilingFeaturesSECAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAmigoProfilingFeaturesSEC", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("amigoProfiling", "amigoProfiling", offsetof(ManagedType, amigoProfiling), das::makeFieldType<decltype(das::declval<ManagedType>().amigoProfiling)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_SEC_amigo_profiling) */
#if defined(VK_AMD_anti_lag)
struct VkPhysicalDeviceAntiLagFeaturesAMDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAntiLagFeaturesAMD> {
  VkPhysicalDeviceAntiLagFeaturesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAntiLagFeaturesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("antiLag", "antiLag", offsetof(ManagedType, antiLag), das::makeFieldType<decltype(das::declval<ManagedType>().antiLag)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_anti_lag) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT> {
  VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentFeedbackLoopDynamicState", "attachmentFeedbackLoopDynamicState", offsetof(ManagedType, attachmentFeedbackLoopDynamicState), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentFeedbackLoopDynamicState)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_attachment_feedback_loop_layout)
struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT> {
  VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentFeedbackLoopLayout", "attachmentFeedbackLoopLayout", offsetof(ManagedType, attachmentFeedbackLoopLayout), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentFeedbackLoopLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_attachment_feedback_loop_layout) */
#if defined(VK_EXT_blend_operation_advanced)
struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT> {
  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("advancedBlendCoherentOperations", "advancedBlendCoherentOperations", offsetof(ManagedType, advancedBlendCoherentOperations), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendCoherentOperations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT> {
  VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("advancedBlendMaxColorAttachments", "advancedBlendMaxColorAttachments", offsetof(ManagedType, advancedBlendMaxColorAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendMaxColorAttachments)>(*mlib));
    addFieldEx("advancedBlendIndependentBlend", "advancedBlendIndependentBlend", offsetof(ManagedType, advancedBlendIndependentBlend), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendIndependentBlend)>(*mlib));
    addFieldEx("advancedBlendNonPremultipliedSrcColor", "advancedBlendNonPremultipliedSrcColor", offsetof(ManagedType, advancedBlendNonPremultipliedSrcColor), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendNonPremultipliedSrcColor)>(*mlib));
    addFieldEx("advancedBlendNonPremultipliedDstColor", "advancedBlendNonPremultipliedDstColor", offsetof(ManagedType, advancedBlendNonPremultipliedDstColor), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendNonPremultipliedDstColor)>(*mlib));
    addFieldEx("advancedBlendCorrelatedOverlap", "advancedBlendCorrelatedOverlap", offsetof(ManagedType, advancedBlendCorrelatedOverlap), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendCorrelatedOverlap)>(*mlib));
    addFieldEx("advancedBlendAllOperations", "advancedBlendAllOperations", offsetof(ManagedType, advancedBlendAllOperations), das::makeFieldType<decltype(das::declval<ManagedType>().advancedBlendAllOperations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_blend_operation_advanced) */
#if defined(VK_EXT_border_color_swizzle)
struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT> {
  VkPhysicalDeviceBorderColorSwizzleFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceBorderColorSwizzleFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("borderColorSwizzle", "borderColorSwizzle", offsetof(ManagedType, borderColorSwizzle), das::makeFieldType<decltype(das::declval<ManagedType>().borderColorSwizzle)>(*mlib));
    addFieldEx("borderColorSwizzleFromImage", "borderColorSwizzleFromImage", offsetof(ManagedType, borderColorSwizzleFromImage), das::makeFieldType<decltype(das::declval<ManagedType>().borderColorSwizzleFromImage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_border_color_swizzle) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceBufferDeviceAddressFeatures> {
  VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceBufferDeviceAddressFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("bufferDeviceAddress", "bufferDeviceAddress", offsetof(ManagedType, bufferDeviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddress)>(*mlib));
    addFieldEx("bufferDeviceAddressCaptureReplay", "bufferDeviceAddressCaptureReplay", offsetof(ManagedType, bufferDeviceAddressCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressCaptureReplay)>(*mlib));
    addFieldEx("bufferDeviceAddressMultiDevice", "bufferDeviceAddressMultiDevice", offsetof(ManagedType, bufferDeviceAddressMultiDevice), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressMultiDevice)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_buffer_device_address)
struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT> {
  VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceBufferDeviceAddressFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("bufferDeviceAddress", "bufferDeviceAddress", offsetof(ManagedType, bufferDeviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddress)>(*mlib));
    addFieldEx("bufferDeviceAddressCaptureReplay", "bufferDeviceAddressCaptureReplay", offsetof(ManagedType, bufferDeviceAddressCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressCaptureReplay)>(*mlib));
    addFieldEx("bufferDeviceAddressMultiDevice", "bufferDeviceAddressMultiDevice", offsetof(ManagedType, bufferDeviceAddressMultiDevice), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressMultiDevice)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_HUAWEI_cluster_culling_shader)
struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI> {
  VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("clustercullingShader", "clustercullingShader", offsetof(ManagedType, clustercullingShader), das::makeFieldType<decltype(das::declval<ManagedType>().clustercullingShader)>(*mlib));
    addFieldEx("multiviewClusterCullingShader", "multiviewClusterCullingShader", offsetof(ManagedType, multiviewClusterCullingShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewClusterCullingShader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI> {
  VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxWorkGroupCount", "maxWorkGroupCount", offsetof(ManagedType, maxWorkGroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxWorkGroupCount)>(*mlib));
    addFieldEx("maxWorkGroupSize", "maxWorkGroupSize", offsetof(ManagedType, maxWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxWorkGroupSize)>(*mlib));
    addFieldEx("maxOutputClusterCount", "maxOutputClusterCount", offsetof(ManagedType, maxOutputClusterCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxOutputClusterCount)>(*mlib));
    addFieldEx("indirectBufferOffsetAlignment", "indirectBufferOffsetAlignment", offsetof(ManagedType, indirectBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().indirectBufferOffsetAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI> {
  VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("clusterShadingRate", "clusterShadingRate", offsetof(ManagedType, clusterShadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().clusterShadingRate)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_AMD_device_coherent_memory)
struct VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCoherentMemoryFeaturesAMD> {
  VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCoherentMemoryFeaturesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceCoherentMemory", "deviceCoherentMemory", offsetof(ManagedType, deviceCoherentMemory), das::makeFieldType<decltype(das::declval<ManagedType>().deviceCoherentMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_device_coherent_memory) */
#if defined(VK_EXT_color_write_enable)
struct VkPhysicalDeviceColorWriteEnableFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceColorWriteEnableFeaturesEXT> {
  VkPhysicalDeviceColorWriteEnableFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceColorWriteEnableFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorWriteEnable", "colorWriteEnable", offsetof(ManagedType, colorWriteEnable), das::makeFieldType<decltype(das::declval<ManagedType>().colorWriteEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_NV_command_buffer_inheritance)
struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCommandBufferInheritanceFeaturesNV> {
  VkPhysicalDeviceCommandBufferInheritanceFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCommandBufferInheritanceFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("commandBufferInheritance", "commandBufferInheritance", offsetof(ManagedType, commandBufferInheritance), das::makeFieldType<decltype(das::declval<ManagedType>().commandBufferInheritance)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_command_buffer_inheritance) */
#if defined(VK_KHR_compute_shader_derivatives)
struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR> {
  VkPhysicalDeviceComputeShaderDerivativesFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("computeDerivativeGroupQuads", "computeDerivativeGroupQuads", offsetof(ManagedType, computeDerivativeGroupQuads), das::makeFieldType<decltype(das::declval<ManagedType>().computeDerivativeGroupQuads)>(*mlib));
    addFieldEx("computeDerivativeGroupLinear", "computeDerivativeGroupLinear", offsetof(ManagedType, computeDerivativeGroupLinear), das::makeFieldType<decltype(das::declval<ManagedType>().computeDerivativeGroupLinear)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR> {
  VkPhysicalDeviceComputeShaderDerivativesPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("meshAndTaskShaderDerivatives", "meshAndTaskShaderDerivatives", offsetof(ManagedType, meshAndTaskShaderDerivatives), das::makeFieldType<decltype(das::declval<ManagedType>().meshAndTaskShaderDerivatives)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_compute_shader_derivatives) */
#if defined(VK_EXT_conditional_rendering)
struct VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceConditionalRenderingFeaturesEXT> {
  VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceConditionalRenderingFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("conditionalRendering", "conditionalRendering", offsetof(ManagedType, conditionalRendering), das::makeFieldType<decltype(das::declval<ManagedType>().conditionalRendering)>(*mlib));
    addFieldEx("inheritedConditionalRendering", "inheritedConditionalRendering", offsetof(ManagedType, inheritedConditionalRendering), das::makeFieldType<decltype(das::declval<ManagedType>().inheritedConditionalRendering)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_conservative_rasterization)
struct VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceConservativeRasterizationPropertiesEXT> {
  VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceConservativeRasterizationPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("primitiveOverestimationSize", "primitiveOverestimationSize", offsetof(ManagedType, primitiveOverestimationSize), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveOverestimationSize)>(*mlib));
    addFieldEx("maxExtraPrimitiveOverestimationSize", "maxExtraPrimitiveOverestimationSize", offsetof(ManagedType, maxExtraPrimitiveOverestimationSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxExtraPrimitiveOverestimationSize)>(*mlib));
    addFieldEx("extraPrimitiveOverestimationSizeGranularity", "extraPrimitiveOverestimationSizeGranularity", offsetof(ManagedType, extraPrimitiveOverestimationSizeGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().extraPrimitiveOverestimationSizeGranularity)>(*mlib));
    addFieldEx("primitiveUnderestimation", "primitiveUnderestimation", offsetof(ManagedType, primitiveUnderestimation), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveUnderestimation)>(*mlib));
    addFieldEx("conservativePointAndLineRasterization", "conservativePointAndLineRasterization", offsetof(ManagedType, conservativePointAndLineRasterization), das::makeFieldType<decltype(das::declval<ManagedType>().conservativePointAndLineRasterization)>(*mlib));
    addFieldEx("degenerateTrianglesRasterized", "degenerateTrianglesRasterized", offsetof(ManagedType, degenerateTrianglesRasterized), das::makeFieldType<decltype(das::declval<ManagedType>().degenerateTrianglesRasterized)>(*mlib));
    addFieldEx("degenerateLinesRasterized", "degenerateLinesRasterized", offsetof(ManagedType, degenerateLinesRasterized), das::makeFieldType<decltype(das::declval<ManagedType>().degenerateLinesRasterized)>(*mlib));
    addFieldEx("fullyCoveredFragmentShaderInputVariable", "fullyCoveredFragmentShaderInputVariable", offsetof(ManagedType, fullyCoveredFragmentShaderInputVariable), das::makeFieldType<decltype(das::declval<ManagedType>().fullyCoveredFragmentShaderInputVariable)>(*mlib));
    addFieldEx("conservativeRasterizationPostDepthCoverage", "conservativeRasterizationPostDepthCoverage", offsetof(ManagedType, conservativeRasterizationPostDepthCoverage), das::makeFieldType<decltype(das::declval<ManagedType>().conservativeRasterizationPostDepthCoverage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_conservative_rasterization) */
#if defined(VK_NV_cooperative_matrix2)
struct VkPhysicalDeviceCooperativeMatrix2FeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrix2FeaturesNV> {
  VkPhysicalDeviceCooperativeMatrix2FeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrix2FeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrixWorkgroupScope", "cooperativeMatrixWorkgroupScope", offsetof(ManagedType, cooperativeMatrixWorkgroupScope), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixWorkgroupScope)>(*mlib));
    addFieldEx("cooperativeMatrixFlexibleDimensions", "cooperativeMatrixFlexibleDimensions", offsetof(ManagedType, cooperativeMatrixFlexibleDimensions), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixFlexibleDimensions)>(*mlib));
    addFieldEx("cooperativeMatrixReductions", "cooperativeMatrixReductions", offsetof(ManagedType, cooperativeMatrixReductions), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixReductions)>(*mlib));
    addFieldEx("cooperativeMatrixConversions", "cooperativeMatrixConversions", offsetof(ManagedType, cooperativeMatrixConversions), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixConversions)>(*mlib));
    addFieldEx("cooperativeMatrixPerElementOperations", "cooperativeMatrixPerElementOperations", offsetof(ManagedType, cooperativeMatrixPerElementOperations), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixPerElementOperations)>(*mlib));
    addFieldEx("cooperativeMatrixTensorAddressing", "cooperativeMatrixTensorAddressing", offsetof(ManagedType, cooperativeMatrixTensorAddressing), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixTensorAddressing)>(*mlib));
    addFieldEx("cooperativeMatrixBlockLoads", "cooperativeMatrixBlockLoads", offsetof(ManagedType, cooperativeMatrixBlockLoads), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixBlockLoads)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceCooperativeMatrix2PropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrix2PropertiesNV> {
  VkPhysicalDeviceCooperativeMatrix2PropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrix2PropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrixWorkgroupScopeMaxWorkgroupSize", "cooperativeMatrixWorkgroupScopeMaxWorkgroupSize", offsetof(ManagedType, cooperativeMatrixWorkgroupScopeMaxWorkgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixWorkgroupScopeMaxWorkgroupSize)>(*mlib));
    addFieldEx("cooperativeMatrixFlexibleDimensionsMaxDimension", "cooperativeMatrixFlexibleDimensionsMaxDimension", offsetof(ManagedType, cooperativeMatrixFlexibleDimensionsMaxDimension), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixFlexibleDimensionsMaxDimension)>(*mlib));
    addFieldEx("cooperativeMatrixWorkgroupScopeReservedSharedMemory", "cooperativeMatrixWorkgroupScopeReservedSharedMemory", offsetof(ManagedType, cooperativeMatrixWorkgroupScopeReservedSharedMemory), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixWorkgroupScopeReservedSharedMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cooperative_matrix2) */
#if defined(VK_KHR_cooperative_matrix)
struct VkPhysicalDeviceCooperativeMatrixFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixFeaturesKHR> {
  VkPhysicalDeviceCooperativeMatrixFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrixFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrix", "cooperativeMatrix", offsetof(ManagedType, cooperativeMatrix), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrix)>(*mlib));
    addFieldEx("cooperativeMatrixRobustBufferAccess", "cooperativeMatrixRobustBufferAccess", offsetof(ManagedType, cooperativeMatrixRobustBufferAccess), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixRobustBufferAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
struct VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixFeaturesNV> {
  VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrixFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrix", "cooperativeMatrix", offsetof(ManagedType, cooperativeMatrix), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrix)>(*mlib));
    addFieldEx("cooperativeMatrixRobustBufferAccess", "cooperativeMatrixRobustBufferAccess", offsetof(ManagedType, cooperativeMatrixRobustBufferAccess), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixRobustBufferAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_KHR_cooperative_matrix)
struct VkPhysicalDeviceCooperativeMatrixPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixPropertiesKHR> {
  VkPhysicalDeviceCooperativeMatrixPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrixPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrixSupportedStages", "cooperativeMatrixSupportedStages", offsetof(ManagedType, cooperativeMatrixSupportedStages), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixSupportedStages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
struct VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixPropertiesNV> {
  VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCooperativeMatrixPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cooperativeMatrixSupportedStages", "cooperativeMatrixSupportedStages", offsetof(ManagedType, cooperativeMatrixSupportedStages), das::makeFieldType<decltype(das::declval<ManagedType>().cooperativeMatrixSupportedStages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_copy_memory_indirect)
struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV> {
  VkPhysicalDeviceCopyMemoryIndirectFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCopyMemoryIndirectFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("indirectCopy", "indirectCopy", offsetof(ManagedType, indirectCopy), das::makeFieldType<decltype(das::declval<ManagedType>().indirectCopy)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV> {
  VkPhysicalDeviceCopyMemoryIndirectPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCopyMemoryIndirectPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportedQueues", "supportedQueues", offsetof(ManagedType, supportedQueues), das::makeFieldType<decltype(das::declval<ManagedType>().supportedQueues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_corner_sampled_image)
struct VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCornerSampledImageFeaturesNV> {
  VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCornerSampledImageFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cornerSampledImage", "cornerSampledImage", offsetof(ManagedType, cornerSampledImage), das::makeFieldType<decltype(das::declval<ManagedType>().cornerSampledImage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_corner_sampled_image) */
#if defined(VK_NV_coverage_reduction_mode)
struct VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCoverageReductionModeFeaturesNV> {
  VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCoverageReductionModeFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("coverageReductionMode", "coverageReductionMode", offsetof(ManagedType, coverageReductionMode), das::makeFieldType<decltype(das::declval<ManagedType>().coverageReductionMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_QCOM_filter_cubic_clamp)
struct VkPhysicalDeviceCubicClampFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCubicClampFeaturesQCOM> {
  VkPhysicalDeviceCubicClampFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCubicClampFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cubicRangeClamp", "cubicRangeClamp", offsetof(ManagedType, cubicRangeClamp), das::makeFieldType<decltype(das::declval<ManagedType>().cubicRangeClamp)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_filter_cubic_clamp) */
#if defined(VK_QCOM_filter_cubic_weights)
struct VkPhysicalDeviceCubicWeightsFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCubicWeightsFeaturesQCOM> {
  VkPhysicalDeviceCubicWeightsFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCubicWeightsFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("selectableCubicWeights", "selectableCubicWeights", offsetof(ManagedType, selectableCubicWeights), das::makeFieldType<decltype(das::declval<ManagedType>().selectableCubicWeights)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_NV_cuda_kernel_launch)
struct VkPhysicalDeviceCudaKernelLaunchFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCudaKernelLaunchFeaturesNV> {
  VkPhysicalDeviceCudaKernelLaunchFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCudaKernelLaunchFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cudaKernelLaunchFeatures", "cudaKernelLaunchFeatures", offsetof(ManagedType, cudaKernelLaunchFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().cudaKernelLaunchFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceCudaKernelLaunchPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCudaKernelLaunchPropertiesNV> {
  VkPhysicalDeviceCudaKernelLaunchPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCudaKernelLaunchPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("computeCapabilityMinor", "computeCapabilityMinor", offsetof(ManagedType, computeCapabilityMinor), das::makeFieldType<decltype(das::declval<ManagedType>().computeCapabilityMinor)>(*mlib));
    addFieldEx("computeCapabilityMajor", "computeCapabilityMajor", offsetof(ManagedType, computeCapabilityMajor), das::makeFieldType<decltype(das::declval<ManagedType>().computeCapabilityMajor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_EXT_custom_border_color)
struct VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCustomBorderColorFeaturesEXT> {
  VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCustomBorderColorFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("customBorderColors", "customBorderColors", offsetof(ManagedType, customBorderColors), das::makeFieldType<decltype(das::declval<ManagedType>().customBorderColors)>(*mlib));
    addFieldEx("customBorderColorWithoutFormat", "customBorderColorWithoutFormat", offsetof(ManagedType, customBorderColorWithoutFormat), das::makeFieldType<decltype(das::declval<ManagedType>().customBorderColorWithoutFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceCustomBorderColorPropertiesEXT> {
  VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceCustomBorderColorPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxCustomBorderColorSamplers", "maxCustomBorderColorSamplers", offsetof(ManagedType, maxCustomBorderColorSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxCustomBorderColorSamplers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_custom_border_color) */
#if defined(VK_NV_dedicated_allocation_image_aliasing)
struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV> {
  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dedicatedAllocationImageAliasing", "dedicatedAllocationImageAliasing", offsetof(ManagedType, dedicatedAllocationImageAliasing), das::makeFieldType<decltype(das::declval<ManagedType>().dedicatedAllocationImageAliasing)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_dedicated_allocation_image_aliasing) */
#if defined(VK_EXT_depth_bias_control)
struct VkPhysicalDeviceDepthBiasControlFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthBiasControlFeaturesEXT> {
  VkPhysicalDeviceDepthBiasControlFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthBiasControlFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthBiasControl", "depthBiasControl", offsetof(ManagedType, depthBiasControl), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasControl)>(*mlib));
    addFieldEx("leastRepresentableValueForceUnormRepresentation", "leastRepresentableValueForceUnormRepresentation", offsetof(ManagedType, leastRepresentableValueForceUnormRepresentation), das::makeFieldType<decltype(das::declval<ManagedType>().leastRepresentableValueForceUnormRepresentation)>(*mlib));
    addFieldEx("floatRepresentation", "floatRepresentation", offsetof(ManagedType, floatRepresentation), das::makeFieldType<decltype(das::declval<ManagedType>().floatRepresentation)>(*mlib));
    addFieldEx("depthBiasExact", "depthBiasExact", offsetof(ManagedType, depthBiasExact), das::makeFieldType<decltype(das::declval<ManagedType>().depthBiasExact)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_depth_clamp_control)
struct VkPhysicalDeviceDepthClampControlFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthClampControlFeaturesEXT> {
  VkPhysicalDeviceDepthClampControlFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthClampControlFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthClampControl", "depthClampControl", offsetof(ManagedType, depthClampControl), das::makeFieldType<decltype(das::declval<ManagedType>().depthClampControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_depth_clamp_zero_one)
struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthClampZeroOneFeaturesEXT> {
  VkPhysicalDeviceDepthClampZeroOneFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthClampZeroOneFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthClampZeroOne", "depthClampZeroOne", offsetof(ManagedType, depthClampZeroOne), das::makeFieldType<decltype(das::declval<ManagedType>().depthClampZeroOne)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clamp_zero_one) */
#if defined(VK_EXT_depth_clip_control)
struct VkPhysicalDeviceDepthClipControlFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthClipControlFeaturesEXT> {
  VkPhysicalDeviceDepthClipControlFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthClipControlFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthClipControl", "depthClipControl", offsetof(ManagedType, depthClipControl), das::makeFieldType<decltype(das::declval<ManagedType>().depthClipControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clip_control) */
#if defined(VK_EXT_depth_clip_enable)
struct VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthClipEnableFeaturesEXT> {
  VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthClipEnableFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthClipEnable", "depthClipEnable", offsetof(ManagedType, depthClipEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthClipEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clip_enable) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDepthStencilResolveProperties> {
  VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDepthStencilResolveProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportedDepthResolveModes", "supportedDepthResolveModes", offsetof(ManagedType, supportedDepthResolveModes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedDepthResolveModes)>(*mlib));
    addFieldEx("supportedStencilResolveModes", "supportedStencilResolveModes", offsetof(ManagedType, supportedStencilResolveModes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedStencilResolveModes)>(*mlib));
    addFieldEx("independentResolveNone", "independentResolveNone", offsetof(ManagedType, independentResolveNone), das::makeFieldType<decltype(das::declval<ManagedType>().independentResolveNone)>(*mlib));
    addFieldEx("independentResolve", "independentResolve", offsetof(ManagedType, independentResolve), das::makeFieldType<decltype(das::declval<ManagedType>().independentResolve)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_descriptor_buffer)
struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT> {
  VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("combinedImageSamplerDensityMapDescriptorSize", "combinedImageSamplerDensityMapDescriptorSize", offsetof(ManagedType, combinedImageSamplerDensityMapDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().combinedImageSamplerDensityMapDescriptorSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceDescriptorBufferFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorBufferFeaturesEXT> {
  VkPhysicalDeviceDescriptorBufferFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorBufferFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorBuffer", "descriptorBuffer", offsetof(ManagedType, descriptorBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBuffer)>(*mlib));
    addFieldEx("descriptorBufferCaptureReplay", "descriptorBufferCaptureReplay", offsetof(ManagedType, descriptorBufferCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBufferCaptureReplay)>(*mlib));
    addFieldEx("descriptorBufferImageLayoutIgnored", "descriptorBufferImageLayoutIgnored", offsetof(ManagedType, descriptorBufferImageLayoutIgnored), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBufferImageLayoutIgnored)>(*mlib));
    addFieldEx("descriptorBufferPushDescriptors", "descriptorBufferPushDescriptors", offsetof(ManagedType, descriptorBufferPushDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBufferPushDescriptors)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceDescriptorBufferPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorBufferPropertiesEXT> {
  VkPhysicalDeviceDescriptorBufferPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorBufferPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("combinedImageSamplerDescriptorSingleArray", "combinedImageSamplerDescriptorSingleArray", offsetof(ManagedType, combinedImageSamplerDescriptorSingleArray), das::makeFieldType<decltype(das::declval<ManagedType>().combinedImageSamplerDescriptorSingleArray)>(*mlib));
    addFieldEx("bufferlessPushDescriptors", "bufferlessPushDescriptors", offsetof(ManagedType, bufferlessPushDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().bufferlessPushDescriptors)>(*mlib));
    addFieldEx("allowSamplerImageViewPostSubmitCreation", "allowSamplerImageViewPostSubmitCreation", offsetof(ManagedType, allowSamplerImageViewPostSubmitCreation), das::makeFieldType<decltype(das::declval<ManagedType>().allowSamplerImageViewPostSubmitCreation)>(*mlib));
    addFieldEx("descriptorBufferOffsetAlignment", "descriptorBufferOffsetAlignment", offsetof(ManagedType, descriptorBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBufferOffsetAlignment)>(*mlib));
    addFieldEx("maxDescriptorBufferBindings", "maxDescriptorBufferBindings", offsetof(ManagedType, maxDescriptorBufferBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorBufferBindings)>(*mlib));
    addFieldEx("maxResourceDescriptorBufferBindings", "maxResourceDescriptorBufferBindings", offsetof(ManagedType, maxResourceDescriptorBufferBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxResourceDescriptorBufferBindings)>(*mlib));
    addFieldEx("maxSamplerDescriptorBufferBindings", "maxSamplerDescriptorBufferBindings", offsetof(ManagedType, maxSamplerDescriptorBufferBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxSamplerDescriptorBufferBindings)>(*mlib));
    addFieldEx("maxEmbeddedImmutableSamplerBindings", "maxEmbeddedImmutableSamplerBindings", offsetof(ManagedType, maxEmbeddedImmutableSamplerBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxEmbeddedImmutableSamplerBindings)>(*mlib));
    addFieldEx("maxEmbeddedImmutableSamplers", "maxEmbeddedImmutableSamplers", offsetof(ManagedType, maxEmbeddedImmutableSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxEmbeddedImmutableSamplers)>(*mlib));
    addFieldEx("bufferCaptureReplayDescriptorDataSize", "bufferCaptureReplayDescriptorDataSize", offsetof(ManagedType, bufferCaptureReplayDescriptorDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().bufferCaptureReplayDescriptorDataSize)>(*mlib));
    addFieldEx("imageCaptureReplayDescriptorDataSize", "imageCaptureReplayDescriptorDataSize", offsetof(ManagedType, imageCaptureReplayDescriptorDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().imageCaptureReplayDescriptorDataSize)>(*mlib));
    addFieldEx("imageViewCaptureReplayDescriptorDataSize", "imageViewCaptureReplayDescriptorDataSize", offsetof(ManagedType, imageViewCaptureReplayDescriptorDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().imageViewCaptureReplayDescriptorDataSize)>(*mlib));
    addFieldEx("samplerCaptureReplayDescriptorDataSize", "samplerCaptureReplayDescriptorDataSize", offsetof(ManagedType, samplerCaptureReplayDescriptorDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().samplerCaptureReplayDescriptorDataSize)>(*mlib));
    addFieldEx("accelerationStructureCaptureReplayDescriptorDataSize", "accelerationStructureCaptureReplayDescriptorDataSize", offsetof(ManagedType, accelerationStructureCaptureReplayDescriptorDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureCaptureReplayDescriptorDataSize)>(*mlib));
    addFieldEx("samplerDescriptorSize", "samplerDescriptorSize", offsetof(ManagedType, samplerDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().samplerDescriptorSize)>(*mlib));
    addFieldEx("combinedImageSamplerDescriptorSize", "combinedImageSamplerDescriptorSize", offsetof(ManagedType, combinedImageSamplerDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().combinedImageSamplerDescriptorSize)>(*mlib));
    addFieldEx("sampledImageDescriptorSize", "sampledImageDescriptorSize", offsetof(ManagedType, sampledImageDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().sampledImageDescriptorSize)>(*mlib));
    addFieldEx("storageImageDescriptorSize", "storageImageDescriptorSize", offsetof(ManagedType, storageImageDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().storageImageDescriptorSize)>(*mlib));
    addFieldEx("uniformTexelBufferDescriptorSize", "uniformTexelBufferDescriptorSize", offsetof(ManagedType, uniformTexelBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().uniformTexelBufferDescriptorSize)>(*mlib));
    addFieldEx("robustUniformTexelBufferDescriptorSize", "robustUniformTexelBufferDescriptorSize", offsetof(ManagedType, robustUniformTexelBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().robustUniformTexelBufferDescriptorSize)>(*mlib));
    addFieldEx("storageTexelBufferDescriptorSize", "storageTexelBufferDescriptorSize", offsetof(ManagedType, storageTexelBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().storageTexelBufferDescriptorSize)>(*mlib));
    addFieldEx("robustStorageTexelBufferDescriptorSize", "robustStorageTexelBufferDescriptorSize", offsetof(ManagedType, robustStorageTexelBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().robustStorageTexelBufferDescriptorSize)>(*mlib));
    addFieldEx("uniformBufferDescriptorSize", "uniformBufferDescriptorSize", offsetof(ManagedType, uniformBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().uniformBufferDescriptorSize)>(*mlib));
    addFieldEx("robustUniformBufferDescriptorSize", "robustUniformBufferDescriptorSize", offsetof(ManagedType, robustUniformBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().robustUniformBufferDescriptorSize)>(*mlib));
    addFieldEx("storageBufferDescriptorSize", "storageBufferDescriptorSize", offsetof(ManagedType, storageBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().storageBufferDescriptorSize)>(*mlib));
    addFieldEx("robustStorageBufferDescriptorSize", "robustStorageBufferDescriptorSize", offsetof(ManagedType, robustStorageBufferDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().robustStorageBufferDescriptorSize)>(*mlib));
    addFieldEx("inputAttachmentDescriptorSize", "inputAttachmentDescriptorSize", offsetof(ManagedType, inputAttachmentDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().inputAttachmentDescriptorSize)>(*mlib));
    addFieldEx("accelerationStructureDescriptorSize", "accelerationStructureDescriptorSize", offsetof(ManagedType, accelerationStructureDescriptorSize), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureDescriptorSize)>(*mlib));
    addFieldEx("maxSamplerDescriptorBufferRange", "maxSamplerDescriptorBufferRange", offsetof(ManagedType, maxSamplerDescriptorBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().maxSamplerDescriptorBufferRange)>(*mlib));
    addFieldEx("maxResourceDescriptorBufferRange", "maxResourceDescriptorBufferRange", offsetof(ManagedType, maxResourceDescriptorBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().maxResourceDescriptorBufferRange)>(*mlib));
    addFieldEx("samplerDescriptorBufferAddressSpaceSize", "samplerDescriptorBufferAddressSpaceSize", offsetof(ManagedType, samplerDescriptorBufferAddressSpaceSize), das::makeFieldType<decltype(das::declval<ManagedType>().samplerDescriptorBufferAddressSpaceSize)>(*mlib));
    addFieldEx("resourceDescriptorBufferAddressSpaceSize", "resourceDescriptorBufferAddressSpaceSize", offsetof(ManagedType, resourceDescriptorBufferAddressSpaceSize), das::makeFieldType<decltype(das::declval<ManagedType>().resourceDescriptorBufferAddressSpaceSize)>(*mlib));
    addFieldEx("descriptorBufferAddressSpaceSize", "descriptorBufferAddressSpaceSize", offsetof(ManagedType, descriptorBufferAddressSpaceSize), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBufferAddressSpaceSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorIndexingFeatures> {
  VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorIndexingFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayDynamicIndexing", "shaderInputAttachmentArrayDynamicIndexing", offsetof(ManagedType, shaderInputAttachmentArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderUniformTexelBufferArrayDynamicIndexing", "shaderUniformTexelBufferArrayDynamicIndexing", offsetof(ManagedType, shaderUniformTexelBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformTexelBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderStorageTexelBufferArrayDynamicIndexing", "shaderStorageTexelBufferArrayDynamicIndexing", offsetof(ManagedType, shaderStorageTexelBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageTexelBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderUniformBufferArrayNonUniformIndexing", "shaderUniformBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderUniformBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderSampledImageArrayNonUniformIndexing", "shaderSampledImageArrayNonUniformIndexing", offsetof(ManagedType, shaderSampledImageArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampledImageArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageBufferArrayNonUniformIndexing", "shaderStorageBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageImageArrayNonUniformIndexing", "shaderStorageImageArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageImageArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayNonUniformIndexing", "shaderInputAttachmentArrayNonUniformIndexing", offsetof(ManagedType, shaderInputAttachmentArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderUniformTexelBufferArrayNonUniformIndexing", "shaderUniformTexelBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderUniformTexelBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformTexelBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageTexelBufferArrayNonUniformIndexing", "shaderStorageTexelBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageTexelBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageTexelBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("descriptorBindingUniformBufferUpdateAfterBind", "descriptorBindingUniformBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingUniformBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUniformBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingSampledImageUpdateAfterBind", "descriptorBindingSampledImageUpdateAfterBind", offsetof(ManagedType, descriptorBindingSampledImageUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingSampledImageUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageImageUpdateAfterBind", "descriptorBindingStorageImageUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageImageUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageImageUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageBufferUpdateAfterBind", "descriptorBindingStorageBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingUniformTexelBufferUpdateAfterBind", "descriptorBindingUniformTexelBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingUniformTexelBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUniformTexelBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageTexelBufferUpdateAfterBind", "descriptorBindingStorageTexelBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageTexelBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageTexelBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingUpdateUnusedWhilePending", "descriptorBindingUpdateUnusedWhilePending", offsetof(ManagedType, descriptorBindingUpdateUnusedWhilePending), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUpdateUnusedWhilePending)>(*mlib));
    addFieldEx("descriptorBindingPartiallyBound", "descriptorBindingPartiallyBound", offsetof(ManagedType, descriptorBindingPartiallyBound), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingPartiallyBound)>(*mlib));
    addFieldEx("descriptorBindingVariableDescriptorCount", "descriptorBindingVariableDescriptorCount", offsetof(ManagedType, descriptorBindingVariableDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingVariableDescriptorCount)>(*mlib));
    addFieldEx("runtimeDescriptorArray", "runtimeDescriptorArray", offsetof(ManagedType, runtimeDescriptorArray), das::makeFieldType<decltype(das::declval<ManagedType>().runtimeDescriptorArray)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorIndexingProperties> {
  VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorIndexingProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxUpdateAfterBindDescriptorsInAllPools", "maxUpdateAfterBindDescriptorsInAllPools", offsetof(ManagedType, maxUpdateAfterBindDescriptorsInAllPools), das::makeFieldType<decltype(das::declval<ManagedType>().maxUpdateAfterBindDescriptorsInAllPools)>(*mlib));
    addFieldEx("shaderUniformBufferArrayNonUniformIndexingNative", "shaderUniformBufferArrayNonUniformIndexingNative", offsetof(ManagedType, shaderUniformBufferArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformBufferArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderSampledImageArrayNonUniformIndexingNative", "shaderSampledImageArrayNonUniformIndexingNative", offsetof(ManagedType, shaderSampledImageArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampledImageArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderStorageBufferArrayNonUniformIndexingNative", "shaderStorageBufferArrayNonUniformIndexingNative", offsetof(ManagedType, shaderStorageBufferArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageBufferArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderStorageImageArrayNonUniformIndexingNative", "shaderStorageImageArrayNonUniformIndexingNative", offsetof(ManagedType, shaderStorageImageArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayNonUniformIndexingNative", "shaderInputAttachmentArrayNonUniformIndexingNative", offsetof(ManagedType, shaderInputAttachmentArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("robustBufferAccessUpdateAfterBind", "robustBufferAccessUpdateAfterBind", offsetof(ManagedType, robustBufferAccessUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().robustBufferAccessUpdateAfterBind)>(*mlib));
    addFieldEx("quadDivergentImplicitLod", "quadDivergentImplicitLod", offsetof(ManagedType, quadDivergentImplicitLod), das::makeFieldType<decltype(das::declval<ManagedType>().quadDivergentImplicitLod)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindSamplers", "maxPerStageDescriptorUpdateAfterBindSamplers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindSamplers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindUniformBuffers", "maxPerStageDescriptorUpdateAfterBindUniformBuffers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindUniformBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindStorageBuffers", "maxPerStageDescriptorUpdateAfterBindStorageBuffers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindStorageBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindSampledImages", "maxPerStageDescriptorUpdateAfterBindSampledImages", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindSampledImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindStorageImages", "maxPerStageDescriptorUpdateAfterBindStorageImages", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindStorageImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindInputAttachments", "maxPerStageDescriptorUpdateAfterBindInputAttachments", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindInputAttachments)>(*mlib));
    addFieldEx("maxPerStageUpdateAfterBindResources", "maxPerStageUpdateAfterBindResources", offsetof(ManagedType, maxPerStageUpdateAfterBindResources), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageUpdateAfterBindResources)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindSamplers", "maxDescriptorSetUpdateAfterBindSamplers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindSamplers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindUniformBuffers", "maxDescriptorSetUpdateAfterBindUniformBuffers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindUniformBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageBuffers", "maxDescriptorSetUpdateAfterBindStorageBuffers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindSampledImages", "maxDescriptorSetUpdateAfterBindSampledImages", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindSampledImages)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageImages", "maxDescriptorSetUpdateAfterBindStorageImages", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageImages)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindInputAttachments", "maxDescriptorSetUpdateAfterBindInputAttachments", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindInputAttachments)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_descriptor_pool_overallocation)
struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV> {
  VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorPoolOverallocation", "descriptorPoolOverallocation", offsetof(ManagedType, descriptorPoolOverallocation), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorPoolOverallocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_descriptor_pool_overallocation) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVEAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE> {
  VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorSetHostMapping", "descriptorSetHostMapping", offsetof(ManagedType, descriptorSetHostMapping), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorSetHostMapping)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_NV_device_generated_commands_compute)
struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV> {
  VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceGeneratedCompute", "deviceGeneratedCompute", offsetof(ManagedType, deviceGeneratedCompute), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedCompute)>(*mlib));
    addFieldEx("deviceGeneratedComputePipelines", "deviceGeneratedComputePipelines", offsetof(ManagedType, deviceGeneratedComputePipelines), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedComputePipelines)>(*mlib));
    addFieldEx("deviceGeneratedComputeCaptureReplay", "deviceGeneratedComputeCaptureReplay", offsetof(ManagedType, deviceGeneratedComputeCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedComputeCaptureReplay)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_device_generated_commands)
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT> {
  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceGeneratedCommands", "deviceGeneratedCommands", offsetof(ManagedType, deviceGeneratedCommands), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedCommands)>(*mlib));
    addFieldEx("dynamicGeneratedPipelineLayout", "dynamicGeneratedPipelineLayout", offsetof(ManagedType, dynamicGeneratedPipelineLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicGeneratedPipelineLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV> {
  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceGeneratedCommands", "deviceGeneratedCommands", offsetof(ManagedType, deviceGeneratedCommands), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedCommands)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT> {
  VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxIndirectPipelineCount", "maxIndirectPipelineCount", offsetof(ManagedType, maxIndirectPipelineCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectPipelineCount)>(*mlib));
    addFieldEx("maxIndirectShaderObjectCount", "maxIndirectShaderObjectCount", offsetof(ManagedType, maxIndirectShaderObjectCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectShaderObjectCount)>(*mlib));
    addFieldEx("maxIndirectSequenceCount", "maxIndirectSequenceCount", offsetof(ManagedType, maxIndirectSequenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectSequenceCount)>(*mlib));
    addFieldEx("maxIndirectCommandsTokenCount", "maxIndirectCommandsTokenCount", offsetof(ManagedType, maxIndirectCommandsTokenCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsTokenCount)>(*mlib));
    addFieldEx("maxIndirectCommandsTokenOffset", "maxIndirectCommandsTokenOffset", offsetof(ManagedType, maxIndirectCommandsTokenOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsTokenOffset)>(*mlib));
    addFieldEx("maxIndirectCommandsIndirectStride", "maxIndirectCommandsIndirectStride", offsetof(ManagedType, maxIndirectCommandsIndirectStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsIndirectStride)>(*mlib));
    addFieldEx("supportedIndirectCommandsInputModes", "supportedIndirectCommandsInputModes", offsetof(ManagedType, supportedIndirectCommandsInputModes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedIndirectCommandsInputModes)>(*mlib));
    addFieldEx("supportedIndirectCommandsShaderStages", "supportedIndirectCommandsShaderStages", offsetof(ManagedType, supportedIndirectCommandsShaderStages), das::makeFieldType<decltype(das::declval<ManagedType>().supportedIndirectCommandsShaderStages)>(*mlib));
    addFieldEx("supportedIndirectCommandsShaderStagesPipelineBinding", "supportedIndirectCommandsShaderStagesPipelineBinding", offsetof(ManagedType, supportedIndirectCommandsShaderStagesPipelineBinding), das::makeFieldType<decltype(das::declval<ManagedType>().supportedIndirectCommandsShaderStagesPipelineBinding)>(*mlib));
    addFieldEx("supportedIndirectCommandsShaderStagesShaderBinding", "supportedIndirectCommandsShaderStagesShaderBinding", offsetof(ManagedType, supportedIndirectCommandsShaderStagesShaderBinding), das::makeFieldType<decltype(das::declval<ManagedType>().supportedIndirectCommandsShaderStagesShaderBinding)>(*mlib));
    addFieldEx("deviceGeneratedCommandsTransformFeedback", "deviceGeneratedCommandsTransformFeedback", offsetof(ManagedType, deviceGeneratedCommandsTransformFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedCommandsTransformFeedback)>(*mlib));
    addFieldEx("deviceGeneratedCommandsMultiDrawIndirectCount", "deviceGeneratedCommandsMultiDrawIndirectCount", offsetof(ManagedType, deviceGeneratedCommandsMultiDrawIndirectCount), das::makeFieldType<decltype(das::declval<ManagedType>().deviceGeneratedCommandsMultiDrawIndirectCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV> {
  VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxGraphicsShaderGroupCount", "maxGraphicsShaderGroupCount", offsetof(ManagedType, maxGraphicsShaderGroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxGraphicsShaderGroupCount)>(*mlib));
    addFieldEx("maxIndirectSequenceCount", "maxIndirectSequenceCount", offsetof(ManagedType, maxIndirectSequenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectSequenceCount)>(*mlib));
    addFieldEx("maxIndirectCommandsTokenCount", "maxIndirectCommandsTokenCount", offsetof(ManagedType, maxIndirectCommandsTokenCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsTokenCount)>(*mlib));
    addFieldEx("maxIndirectCommandsStreamCount", "maxIndirectCommandsStreamCount", offsetof(ManagedType, maxIndirectCommandsStreamCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsStreamCount)>(*mlib));
    addFieldEx("maxIndirectCommandsTokenOffset", "maxIndirectCommandsTokenOffset", offsetof(ManagedType, maxIndirectCommandsTokenOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsTokenOffset)>(*mlib));
    addFieldEx("maxIndirectCommandsStreamStride", "maxIndirectCommandsStreamStride", offsetof(ManagedType, maxIndirectCommandsStreamStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxIndirectCommandsStreamStride)>(*mlib));
    addFieldEx("minSequencesCountBufferOffsetAlignment", "minSequencesCountBufferOffsetAlignment", offsetof(ManagedType, minSequencesCountBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minSequencesCountBufferOffsetAlignment)>(*mlib));
    addFieldEx("minSequencesIndexBufferOffsetAlignment", "minSequencesIndexBufferOffsetAlignment", offsetof(ManagedType, minSequencesIndexBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minSequencesIndexBufferOffsetAlignment)>(*mlib));
    addFieldEx("minIndirectCommandsBufferOffsetAlignment", "minIndirectCommandsBufferOffsetAlignment", offsetof(ManagedType, minIndirectCommandsBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minIndirectCommandsBufferOffsetAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_memory_report)
struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT> {
  VkPhysicalDeviceDeviceMemoryReportFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDeviceMemoryReportFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceMemoryReport", "deviceMemoryReport", offsetof(ManagedType, deviceMemoryReport), das::makeFieldType<decltype(das::declval<ManagedType>().deviceMemoryReport)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_NV_device_diagnostics_config)
struct VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDiagnosticsConfigFeaturesNV> {
  VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDiagnosticsConfigFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("diagnosticsConfig", "diagnosticsConfig", offsetof(ManagedType, diagnosticsConfig), das::makeFieldType<decltype(das::declval<ManagedType>().diagnosticsConfig)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostics_config) */
#if defined(VK_EXT_discard_rectangles)
struct VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDiscardRectanglePropertiesEXT> {
  VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDiscardRectanglePropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxDiscardRectangles", "maxDiscardRectangles", offsetof(ManagedType, maxDiscardRectangles), das::makeFieldType<decltype(das::declval<ManagedType>().maxDiscardRectangles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_NV_displacement_micromap)
struct VkPhysicalDeviceDisplacementMicromapFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDisplacementMicromapFeaturesNV> {
  VkPhysicalDeviceDisplacementMicromapFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDisplacementMicromapFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("displacementMicromap", "displacementMicromap", offsetof(ManagedType, displacementMicromap), das::makeFieldType<decltype(das::declval<ManagedType>().displacementMicromap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceDisplacementMicromapPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDisplacementMicromapPropertiesNV> {
  VkPhysicalDeviceDisplacementMicromapPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDisplacementMicromapPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxDisplacementMicromapSubdivisionLevel", "maxDisplacementMicromapSubdivisionLevel", offsetof(ManagedType, maxDisplacementMicromapSubdivisionLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxDisplacementMicromapSubdivisionLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_displacement_micromap) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceDriverPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDriverProperties> {
  VkPhysicalDeviceDriverPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDriverProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("driverID", "driverID", offsetof(ManagedType, driverID), das::makeFieldType<decltype(das::declval<ManagedType>().driverID)>(*mlib));
    addFieldEx("driverName", "driverName", offsetof(ManagedType, driverName), das::makeFieldType<decltype(das::declval<ManagedType>().driverName)>(*mlib));
    addFieldEx("driverInfo", "driverInfo", offsetof(ManagedType, driverInfo), das::makeFieldType<decltype(das::declval<ManagedType>().driverInfo)>(*mlib));
    addFieldEx("conformanceVersion", "conformanceVersion", offsetof(ManagedType, conformanceVersion), das::makeFieldType<decltype(das::declval<ManagedType>().conformanceVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_physical_device_drm)
struct VkPhysicalDeviceDrmPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDrmPropertiesEXT> {
  VkPhysicalDeviceDrmPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDrmPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hasPrimary", "hasPrimary", offsetof(ManagedType, hasPrimary), das::makeFieldType<decltype(das::declval<ManagedType>().hasPrimary)>(*mlib));
    addFieldEx("hasRender", "hasRender", offsetof(ManagedType, hasRender), das::makeFieldType<decltype(das::declval<ManagedType>().hasRender)>(*mlib));
    addFieldEx("primaryMajor", "primaryMajor", offsetof(ManagedType, primaryMajor), das::makeFieldType<decltype(das::declval<ManagedType>().primaryMajor)>(*mlib));
    addFieldEx("primaryMinor", "primaryMinor", offsetof(ManagedType, primaryMinor), das::makeFieldType<decltype(das::declval<ManagedType>().primaryMinor)>(*mlib));
    addFieldEx("renderMajor", "renderMajor", offsetof(ManagedType, renderMajor), das::makeFieldType<decltype(das::declval<ManagedType>().renderMajor)>(*mlib));
    addFieldEx("renderMinor", "renderMinor", offsetof(ManagedType, renderMinor), das::makeFieldType<decltype(das::declval<ManagedType>().renderMinor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_physical_device_drm) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceDynamicRenderingFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDynamicRenderingFeatures> {
  VkPhysicalDeviceDynamicRenderingFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDynamicRenderingFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dynamicRendering", "dynamicRendering", offsetof(ManagedType, dynamicRendering), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRendering)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDynamicRenderingLocalReadFeatures> {
  VkPhysicalDeviceDynamicRenderingLocalReadFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDynamicRenderingLocalReadFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dynamicRenderingLocalRead", "dynamicRenderingLocalRead", offsetof(ManagedType, dynamicRenderingLocalRead), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRenderingLocalRead)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_dynamic_rendering_unused_attachments)
struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT> {
  VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dynamicRenderingUnusedAttachments", "dynamicRenderingUnusedAttachments", offsetof(ManagedType, dynamicRenderingUnusedAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRenderingUnusedAttachments)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_dynamic_rendering_unused_attachments) */
#if defined(VK_NV_scissor_exclusive)
struct VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExclusiveScissorFeaturesNV> {
  VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExclusiveScissorFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("exclusiveScissor", "exclusiveScissor", offsetof(ManagedType, exclusiveScissor), das::makeFieldType<decltype(das::declval<ManagedType>().exclusiveScissor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_EXT_extended_dynamic_state2)
struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT> {
  VkPhysicalDeviceExtendedDynamicState2FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedDynamicState2FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("extendedDynamicState2", "extendedDynamicState2", offsetof(ManagedType, extendedDynamicState2), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState2)>(*mlib));
    addFieldEx("extendedDynamicState2LogicOp", "extendedDynamicState2LogicOp", offsetof(ManagedType, extendedDynamicState2LogicOp), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState2LogicOp)>(*mlib));
    addFieldEx("extendedDynamicState2PatchControlPoints", "extendedDynamicState2PatchControlPoints", offsetof(ManagedType, extendedDynamicState2PatchControlPoints), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState2PatchControlPoints)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_extended_dynamic_state2) */
#if defined(VK_EXT_extended_dynamic_state3)
struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT> {
  VkPhysicalDeviceExtendedDynamicState3FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("extendedDynamicState3TessellationDomainOrigin", "extendedDynamicState3TessellationDomainOrigin", offsetof(ManagedType, extendedDynamicState3TessellationDomainOrigin), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3TessellationDomainOrigin)>(*mlib));
    addFieldEx("extendedDynamicState3DepthClampEnable", "extendedDynamicState3DepthClampEnable", offsetof(ManagedType, extendedDynamicState3DepthClampEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3DepthClampEnable)>(*mlib));
    addFieldEx("extendedDynamicState3PolygonMode", "extendedDynamicState3PolygonMode", offsetof(ManagedType, extendedDynamicState3PolygonMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3PolygonMode)>(*mlib));
    addFieldEx("extendedDynamicState3RasterizationSamples", "extendedDynamicState3RasterizationSamples", offsetof(ManagedType, extendedDynamicState3RasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3RasterizationSamples)>(*mlib));
    addFieldEx("extendedDynamicState3SampleMask", "extendedDynamicState3SampleMask", offsetof(ManagedType, extendedDynamicState3SampleMask), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3SampleMask)>(*mlib));
    addFieldEx("extendedDynamicState3AlphaToCoverageEnable", "extendedDynamicState3AlphaToCoverageEnable", offsetof(ManagedType, extendedDynamicState3AlphaToCoverageEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3AlphaToCoverageEnable)>(*mlib));
    addFieldEx("extendedDynamicState3AlphaToOneEnable", "extendedDynamicState3AlphaToOneEnable", offsetof(ManagedType, extendedDynamicState3AlphaToOneEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3AlphaToOneEnable)>(*mlib));
    addFieldEx("extendedDynamicState3LogicOpEnable", "extendedDynamicState3LogicOpEnable", offsetof(ManagedType, extendedDynamicState3LogicOpEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3LogicOpEnable)>(*mlib));
    addFieldEx("extendedDynamicState3ColorBlendEnable", "extendedDynamicState3ColorBlendEnable", offsetof(ManagedType, extendedDynamicState3ColorBlendEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ColorBlendEnable)>(*mlib));
    addFieldEx("extendedDynamicState3ColorBlendEquation", "extendedDynamicState3ColorBlendEquation", offsetof(ManagedType, extendedDynamicState3ColorBlendEquation), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ColorBlendEquation)>(*mlib));
    addFieldEx("extendedDynamicState3ColorWriteMask", "extendedDynamicState3ColorWriteMask", offsetof(ManagedType, extendedDynamicState3ColorWriteMask), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ColorWriteMask)>(*mlib));
    addFieldEx("extendedDynamicState3RasterizationStream", "extendedDynamicState3RasterizationStream", offsetof(ManagedType, extendedDynamicState3RasterizationStream), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3RasterizationStream)>(*mlib));
    addFieldEx("extendedDynamicState3ConservativeRasterizationMode", "extendedDynamicState3ConservativeRasterizationMode", offsetof(ManagedType, extendedDynamicState3ConservativeRasterizationMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ConservativeRasterizationMode)>(*mlib));
    addFieldEx("extendedDynamicState3ExtraPrimitiveOverestimationSize", "extendedDynamicState3ExtraPrimitiveOverestimationSize", offsetof(ManagedType, extendedDynamicState3ExtraPrimitiveOverestimationSize), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ExtraPrimitiveOverestimationSize)>(*mlib));
    addFieldEx("extendedDynamicState3DepthClipEnable", "extendedDynamicState3DepthClipEnable", offsetof(ManagedType, extendedDynamicState3DepthClipEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3DepthClipEnable)>(*mlib));
    addFieldEx("extendedDynamicState3SampleLocationsEnable", "extendedDynamicState3SampleLocationsEnable", offsetof(ManagedType, extendedDynamicState3SampleLocationsEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3SampleLocationsEnable)>(*mlib));
    addFieldEx("extendedDynamicState3ColorBlendAdvanced", "extendedDynamicState3ColorBlendAdvanced", offsetof(ManagedType, extendedDynamicState3ColorBlendAdvanced), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ColorBlendAdvanced)>(*mlib));
    addFieldEx("extendedDynamicState3ProvokingVertexMode", "extendedDynamicState3ProvokingVertexMode", offsetof(ManagedType, extendedDynamicState3ProvokingVertexMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ProvokingVertexMode)>(*mlib));
    addFieldEx("extendedDynamicState3LineRasterizationMode", "extendedDynamicState3LineRasterizationMode", offsetof(ManagedType, extendedDynamicState3LineRasterizationMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3LineRasterizationMode)>(*mlib));
    addFieldEx("extendedDynamicState3LineStippleEnable", "extendedDynamicState3LineStippleEnable", offsetof(ManagedType, extendedDynamicState3LineStippleEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3LineStippleEnable)>(*mlib));
    addFieldEx("extendedDynamicState3DepthClipNegativeOneToOne", "extendedDynamicState3DepthClipNegativeOneToOne", offsetof(ManagedType, extendedDynamicState3DepthClipNegativeOneToOne), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3DepthClipNegativeOneToOne)>(*mlib));
    addFieldEx("extendedDynamicState3ViewportWScalingEnable", "extendedDynamicState3ViewportWScalingEnable", offsetof(ManagedType, extendedDynamicState3ViewportWScalingEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ViewportWScalingEnable)>(*mlib));
    addFieldEx("extendedDynamicState3ViewportSwizzle", "extendedDynamicState3ViewportSwizzle", offsetof(ManagedType, extendedDynamicState3ViewportSwizzle), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ViewportSwizzle)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageToColorEnable", "extendedDynamicState3CoverageToColorEnable", offsetof(ManagedType, extendedDynamicState3CoverageToColorEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageToColorEnable)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageToColorLocation", "extendedDynamicState3CoverageToColorLocation", offsetof(ManagedType, extendedDynamicState3CoverageToColorLocation), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageToColorLocation)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageModulationMode", "extendedDynamicState3CoverageModulationMode", offsetof(ManagedType, extendedDynamicState3CoverageModulationMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageModulationMode)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageModulationTableEnable", "extendedDynamicState3CoverageModulationTableEnable", offsetof(ManagedType, extendedDynamicState3CoverageModulationTableEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageModulationTableEnable)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageModulationTable", "extendedDynamicState3CoverageModulationTable", offsetof(ManagedType, extendedDynamicState3CoverageModulationTable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageModulationTable)>(*mlib));
    addFieldEx("extendedDynamicState3CoverageReductionMode", "extendedDynamicState3CoverageReductionMode", offsetof(ManagedType, extendedDynamicState3CoverageReductionMode), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3CoverageReductionMode)>(*mlib));
    addFieldEx("extendedDynamicState3RepresentativeFragmentTestEnable", "extendedDynamicState3RepresentativeFragmentTestEnable", offsetof(ManagedType, extendedDynamicState3RepresentativeFragmentTestEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3RepresentativeFragmentTestEnable)>(*mlib));
    addFieldEx("extendedDynamicState3ShadingRateImageEnable", "extendedDynamicState3ShadingRateImageEnable", offsetof(ManagedType, extendedDynamicState3ShadingRateImageEnable), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState3ShadingRateImageEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT> {
  VkPhysicalDeviceExtendedDynamicState3PropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedDynamicState3PropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dynamicPrimitiveTopologyUnrestricted", "dynamicPrimitiveTopologyUnrestricted", offsetof(ManagedType, dynamicPrimitiveTopologyUnrestricted), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicPrimitiveTopologyUnrestricted)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_extended_dynamic_state3) */
#if defined(VK_EXT_extended_dynamic_state)
struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT> {
  VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedDynamicStateFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("extendedDynamicState", "extendedDynamicState", offsetof(ManagedType, extendedDynamicState), das::makeFieldType<decltype(das::declval<ManagedType>().extendedDynamicState)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_extended_dynamic_state) */
#if defined(VK_NV_extended_sparse_address_space)
struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV> {
  VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("extendedSparseAddressSpace", "extendedSparseAddressSpace", offsetof(ManagedType, extendedSparseAddressSpace), das::makeFieldType<decltype(das::declval<ManagedType>().extendedSparseAddressSpace)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV> {
  VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("extendedSparseAddressSpaceSize", "extendedSparseAddressSpaceSize", offsetof(ManagedType, extendedSparseAddressSpaceSize), das::makeFieldType<decltype(das::declval<ManagedType>().extendedSparseAddressSpaceSize)>(*mlib));
    addFieldEx("extendedSparseImageUsageFlags", "extendedSparseImageUsageFlags", offsetof(ManagedType, extendedSparseImageUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().extendedSparseImageUsageFlags)>(*mlib));
    addFieldEx("extendedSparseBufferUsageFlags", "extendedSparseBufferUsageFlags", offsetof(ManagedType, extendedSparseBufferUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().extendedSparseBufferUsageFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_extended_sparse_address_space) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceExternalBufferInfoAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalBufferInfo> {
  VkPhysicalDeviceExternalBufferInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalBufferInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceExternalFenceInfoAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalFenceInfo> {
  VkPhysicalDeviceExternalFenceInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalFenceInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_format_resolve)
struct VkPhysicalDeviceExternalFormatResolveFeaturesANDROIDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalFormatResolveFeaturesANDROID> {
  VkPhysicalDeviceExternalFormatResolveFeaturesANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalFormatResolveFeaturesANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalFormatResolve", "externalFormatResolve", offsetof(ManagedType, externalFormatResolve), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormatResolve)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceExternalFormatResolvePropertiesANDROIDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalFormatResolvePropertiesANDROID> {
  VkPhysicalDeviceExternalFormatResolvePropertiesANDROIDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalFormatResolvePropertiesANDROID", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("nullColorAttachmentWithExternalFormatResolve", "nullColorAttachmentWithExternalFormatResolve", offsetof(ManagedType, nullColorAttachmentWithExternalFormatResolve), das::makeFieldType<decltype(das::declval<ManagedType>().nullColorAttachmentWithExternalFormatResolve)>(*mlib));
    addFieldEx("externalFormatResolveChromaOffsetX", "externalFormatResolveChromaOffsetX", offsetof(ManagedType, externalFormatResolveChromaOffsetX), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormatResolveChromaOffsetX)>(*mlib));
    addFieldEx("externalFormatResolveChromaOffsetY", "externalFormatResolveChromaOffsetY", offsetof(ManagedType, externalFormatResolveChromaOffsetY), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormatResolveChromaOffsetY)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ANDROID_external_format_resolve) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceExternalImageFormatInfoAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalImageFormatInfo> {
  VkPhysicalDeviceExternalImageFormatInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalImageFormatInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_external_memory_host)
struct VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalMemoryHostPropertiesEXT> {
  VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalMemoryHostPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minImportedHostPointerAlignment", "minImportedHostPointerAlignment", offsetof(ManagedType, minImportedHostPointerAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minImportedHostPointerAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_NV_external_memory_rdma)
struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV> {
  VkPhysicalDeviceExternalMemoryRDMAFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalMemoryRDMAFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("externalMemoryRDMA", "externalMemoryRDMA", offsetof(ManagedType, externalMemoryRDMA), das::makeFieldType<decltype(das::declval<ManagedType>().externalMemoryRDMA)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_QNX_external_memory_screen_buffer)
struct VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNXAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX> {
  VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("screenBufferImport", "screenBufferImport", offsetof(ManagedType, screenBufferImport), das::makeFieldType<decltype(das::declval<ManagedType>().screenBufferImport)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceExternalSemaphoreInfoAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceExternalSemaphoreInfo> {
  VkPhysicalDeviceExternalSemaphoreInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceExternalSemaphoreInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_fault)
struct VkPhysicalDeviceFaultFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFaultFeaturesEXT> {
  VkPhysicalDeviceFaultFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFaultFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceFault", "deviceFault", offsetof(ManagedType, deviceFault), das::makeFieldType<decltype(das::declval<ManagedType>().deviceFault)>(*mlib));
    addFieldEx("deviceFaultVendorBinary", "deviceFaultVendorBinary", offsetof(ManagedType, deviceFaultVendorBinary), das::makeFieldType<decltype(das::declval<ManagedType>().deviceFaultVendorBinary)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceFeatures2Annotation : ManagedStructureAnnotation<VkPhysicalDeviceFeatures2> {
  VkPhysicalDeviceFeatures2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFeatures2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("features", "features", offsetof(ManagedType, features), das::makeFieldType<decltype(das::declval<ManagedType>().features)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceFloatControlsPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFloatControlsProperties> {
  VkPhysicalDeviceFloatControlsPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFloatControlsProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("denormBehaviorIndependence", "denormBehaviorIndependence", offsetof(ManagedType, denormBehaviorIndependence), das::makeFieldType<decltype(das::declval<ManagedType>().denormBehaviorIndependence)>(*mlib));
    addFieldEx("roundingModeIndependence", "roundingModeIndependence", offsetof(ManagedType, roundingModeIndependence), das::makeFieldType<decltype(das::declval<ManagedType>().roundingModeIndependence)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat16", "shaderSignedZeroInfNanPreserveFloat16", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat16)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat32", "shaderSignedZeroInfNanPreserveFloat32", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat32)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat64", "shaderSignedZeroInfNanPreserveFloat64", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat64)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat16", "shaderDenormPreserveFloat16", offsetof(ManagedType, shaderDenormPreserveFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat16)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat32", "shaderDenormPreserveFloat32", offsetof(ManagedType, shaderDenormPreserveFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat32)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat64", "shaderDenormPreserveFloat64", offsetof(ManagedType, shaderDenormPreserveFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat64)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat16", "shaderDenormFlushToZeroFloat16", offsetof(ManagedType, shaderDenormFlushToZeroFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat16)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat32", "shaderDenormFlushToZeroFloat32", offsetof(ManagedType, shaderDenormFlushToZeroFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat32)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat64", "shaderDenormFlushToZeroFloat64", offsetof(ManagedType, shaderDenormFlushToZeroFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat64)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat16", "shaderRoundingModeRTEFloat16", offsetof(ManagedType, shaderRoundingModeRTEFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat16)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat32", "shaderRoundingModeRTEFloat32", offsetof(ManagedType, shaderRoundingModeRTEFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat32)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat64", "shaderRoundingModeRTEFloat64", offsetof(ManagedType, shaderRoundingModeRTEFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat64)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat16", "shaderRoundingModeRTZFloat16", offsetof(ManagedType, shaderRoundingModeRTZFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat16)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat32", "shaderRoundingModeRTZFloat32", offsetof(ManagedType, shaderRoundingModeRTZFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat32)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat64", "shaderRoundingModeRTZFloat64", offsetof(ManagedType, shaderRoundingModeRTZFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat64)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_fragment_density_map2)
struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT> {
  VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMap2FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityMapDeferred", "fragmentDensityMapDeferred", offsetof(ManagedType, fragmentDensityMapDeferred), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMapDeferred)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT> {
  VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMap2PropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subsampledLoads", "subsampledLoads", offsetof(ManagedType, subsampledLoads), das::makeFieldType<decltype(das::declval<ManagedType>().subsampledLoads)>(*mlib));
    addFieldEx("subsampledCoarseReconstructionEarlyAccess", "subsampledCoarseReconstructionEarlyAccess", offsetof(ManagedType, subsampledCoarseReconstructionEarlyAccess), das::makeFieldType<decltype(das::declval<ManagedType>().subsampledCoarseReconstructionEarlyAccess)>(*mlib));
    addFieldEx("maxSubsampledArrayLayers", "maxSubsampledArrayLayers", offsetof(ManagedType, maxSubsampledArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxSubsampledArrayLayers)>(*mlib));
    addFieldEx("maxDescriptorSetSubsampledSamplers", "maxDescriptorSetSubsampledSamplers", offsetof(ManagedType, maxDescriptorSetSubsampledSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetSubsampledSamplers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_density_map2) */
#if defined(VK_EXT_fragment_density_map)
struct VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapFeaturesEXT> {
  VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMapFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityMap", "fragmentDensityMap", offsetof(ManagedType, fragmentDensityMap), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMap)>(*mlib));
    addFieldEx("fragmentDensityMapDynamic", "fragmentDensityMapDynamic", offsetof(ManagedType, fragmentDensityMapDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMapDynamic)>(*mlib));
    addFieldEx("fragmentDensityMapNonSubsampledImages", "fragmentDensityMapNonSubsampledImages", offsetof(ManagedType, fragmentDensityMapNonSubsampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMapNonSubsampledImages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_QCOM_fragment_density_map_offset)
struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM> {
  VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityMapOffset", "fragmentDensityMapOffset", offsetof(ManagedType, fragmentDensityMapOffset), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMapOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM> {
  VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityOffsetGranularity", "fragmentDensityOffsetGranularity", offsetof(ManagedType, fragmentDensityOffsetGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityOffsetGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_fragment_density_map_offset) */
#if defined(VK_EXT_fragment_density_map)
struct VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapPropertiesEXT> {
  VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentDensityMapPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minFragmentDensityTexelSize", "minFragmentDensityTexelSize", offsetof(ManagedType, minFragmentDensityTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().minFragmentDensityTexelSize)>(*mlib));
    addFieldEx("maxFragmentDensityTexelSize", "maxFragmentDensityTexelSize", offsetof(ManagedType, maxFragmentDensityTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentDensityTexelSize)>(*mlib));
    addFieldEx("fragmentDensityInvocations", "fragmentDensityInvocations", offsetof(ManagedType, fragmentDensityInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityInvocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_KHR_fragment_shader_barycentric)
struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR> {
  VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentShaderBarycentric", "fragmentShaderBarycentric", offsetof(ManagedType, fragmentShaderBarycentric), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShaderBarycentric)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR> {
  VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("triStripVertexOrderIndependentOfProvokingVertex", "triStripVertexOrderIndependentOfProvokingVertex", offsetof(ManagedType, triStripVertexOrderIndependentOfProvokingVertex), das::makeFieldType<decltype(das::declval<ManagedType>().triStripVertexOrderIndependentOfProvokingVertex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_fragment_shader_barycentric) */
#if defined(VK_EXT_fragment_shader_interlock)
struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT> {
  VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentShaderSampleInterlock", "fragmentShaderSampleInterlock", offsetof(ManagedType, fragmentShaderSampleInterlock), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShaderSampleInterlock)>(*mlib));
    addFieldEx("fragmentShaderPixelInterlock", "fragmentShaderPixelInterlock", offsetof(ManagedType, fragmentShaderPixelInterlock), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShaderPixelInterlock)>(*mlib));
    addFieldEx("fragmentShaderShadingRateInterlock", "fragmentShaderShadingRateInterlock", offsetof(ManagedType, fragmentShaderShadingRateInterlock), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShaderShadingRateInterlock)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_shader_interlock) */
#if defined(VK_NV_fragment_shading_rate_enums)
struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV> {
  VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentShadingRateEnums", "fragmentShadingRateEnums", offsetof(ManagedType, fragmentShadingRateEnums), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateEnums)>(*mlib));
    addFieldEx("supersampleFragmentShadingRates", "supersampleFragmentShadingRates", offsetof(ManagedType, supersampleFragmentShadingRates), das::makeFieldType<decltype(das::declval<ManagedType>().supersampleFragmentShadingRates)>(*mlib));
    addFieldEx("noInvocationFragmentShadingRates", "noInvocationFragmentShadingRates", offsetof(ManagedType, noInvocationFragmentShadingRates), das::makeFieldType<decltype(das::declval<ManagedType>().noInvocationFragmentShadingRates)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV> {
  VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxFragmentShadingRateInvocationCount", "maxFragmentShadingRateInvocationCount", offsetof(ManagedType, maxFragmentShadingRateInvocationCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentShadingRateInvocationCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_KHR_fragment_shading_rate)
struct VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateFeaturesKHR> {
  VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShadingRateFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineFragmentShadingRate", "pipelineFragmentShadingRate", offsetof(ManagedType, pipelineFragmentShadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineFragmentShadingRate)>(*mlib));
    addFieldEx("primitiveFragmentShadingRate", "primitiveFragmentShadingRate", offsetof(ManagedType, primitiveFragmentShadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveFragmentShadingRate)>(*mlib));
    addFieldEx("attachmentFragmentShadingRate", "attachmentFragmentShadingRate", offsetof(ManagedType, attachmentFragmentShadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentFragmentShadingRate)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentShadingRateKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateKHR> {
  VkPhysicalDeviceFragmentShadingRateKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShadingRateKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampleCounts", "sampleCounts", offsetof(ManagedType, sampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampleCounts)>(*mlib));
    addFieldEx("fragmentSize", "fragmentSize", offsetof(ManagedType, fragmentSize), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRatePropertiesKHR> {
  VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFragmentShadingRatePropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minFragmentShadingRateAttachmentTexelSize", "minFragmentShadingRateAttachmentTexelSize", offsetof(ManagedType, minFragmentShadingRateAttachmentTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().minFragmentShadingRateAttachmentTexelSize)>(*mlib));
    addFieldEx("maxFragmentShadingRateAttachmentTexelSize", "maxFragmentShadingRateAttachmentTexelSize", offsetof(ManagedType, maxFragmentShadingRateAttachmentTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentShadingRateAttachmentTexelSize)>(*mlib));
    addFieldEx("maxFragmentShadingRateAttachmentTexelSizeAspectRatio", "maxFragmentShadingRateAttachmentTexelSizeAspectRatio", offsetof(ManagedType, maxFragmentShadingRateAttachmentTexelSizeAspectRatio), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentShadingRateAttachmentTexelSizeAspectRatio)>(*mlib));
    addFieldEx("primitiveFragmentShadingRateWithMultipleViewports", "primitiveFragmentShadingRateWithMultipleViewports", offsetof(ManagedType, primitiveFragmentShadingRateWithMultipleViewports), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveFragmentShadingRateWithMultipleViewports)>(*mlib));
    addFieldEx("layeredShadingRateAttachments", "layeredShadingRateAttachments", offsetof(ManagedType, layeredShadingRateAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().layeredShadingRateAttachments)>(*mlib));
    addFieldEx("fragmentShadingRateNonTrivialCombinerOps", "fragmentShadingRateNonTrivialCombinerOps", offsetof(ManagedType, fragmentShadingRateNonTrivialCombinerOps), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateNonTrivialCombinerOps)>(*mlib));
    addFieldEx("maxFragmentSize", "maxFragmentSize", offsetof(ManagedType, maxFragmentSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentSize)>(*mlib));
    addFieldEx("maxFragmentSizeAspectRatio", "maxFragmentSizeAspectRatio", offsetof(ManagedType, maxFragmentSizeAspectRatio), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentSizeAspectRatio)>(*mlib));
    addFieldEx("maxFragmentShadingRateCoverageSamples", "maxFragmentShadingRateCoverageSamples", offsetof(ManagedType, maxFragmentShadingRateCoverageSamples), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentShadingRateCoverageSamples)>(*mlib));
    addFieldEx("maxFragmentShadingRateRasterizationSamples", "maxFragmentShadingRateRasterizationSamples", offsetof(ManagedType, maxFragmentShadingRateRasterizationSamples), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentShadingRateRasterizationSamples)>(*mlib));
    addFieldEx("fragmentShadingRateWithShaderDepthStencilWrites", "fragmentShadingRateWithShaderDepthStencilWrites", offsetof(ManagedType, fragmentShadingRateWithShaderDepthStencilWrites), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithShaderDepthStencilWrites)>(*mlib));
    addFieldEx("fragmentShadingRateWithSampleMask", "fragmentShadingRateWithSampleMask", offsetof(ManagedType, fragmentShadingRateWithSampleMask), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithSampleMask)>(*mlib));
    addFieldEx("fragmentShadingRateWithShaderSampleMask", "fragmentShadingRateWithShaderSampleMask", offsetof(ManagedType, fragmentShadingRateWithShaderSampleMask), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithShaderSampleMask)>(*mlib));
    addFieldEx("fragmentShadingRateWithConservativeRasterization", "fragmentShadingRateWithConservativeRasterization", offsetof(ManagedType, fragmentShadingRateWithConservativeRasterization), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithConservativeRasterization)>(*mlib));
    addFieldEx("fragmentShadingRateWithFragmentShaderInterlock", "fragmentShadingRateWithFragmentShaderInterlock", offsetof(ManagedType, fragmentShadingRateWithFragmentShaderInterlock), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithFragmentShaderInterlock)>(*mlib));
    addFieldEx("fragmentShadingRateWithCustomSampleLocations", "fragmentShadingRateWithCustomSampleLocations", offsetof(ManagedType, fragmentShadingRateWithCustomSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateWithCustomSampleLocations)>(*mlib));
    addFieldEx("fragmentShadingRateStrictMultiplyCombiner", "fragmentShadingRateStrictMultiplyCombiner", offsetof(ManagedType, fragmentShadingRateStrictMultiplyCombiner), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateStrictMultiplyCombiner)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_frame_boundary)
struct VkPhysicalDeviceFrameBoundaryFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceFrameBoundaryFeaturesEXT> {
  VkPhysicalDeviceFrameBoundaryFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceFrameBoundaryFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("frameBoundary", "frameBoundary", offsetof(ManagedType, frameBoundary), das::makeFieldType<decltype(das::declval<ManagedType>().frameBoundary)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_frame_boundary) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceGlobalPriorityQueryFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceGlobalPriorityQueryFeatures> {
  VkPhysicalDeviceGlobalPriorityQueryFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceGlobalPriorityQueryFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("globalPriorityQuery", "globalPriorityQuery", offsetof(ManagedType, globalPriorityQuery), das::makeFieldType<decltype(das::declval<ManagedType>().globalPriorityQuery)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_graphics_pipeline_library)
struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT> {
  VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("graphicsPipelineLibrary", "graphicsPipelineLibrary", offsetof(ManagedType, graphicsPipelineLibrary), das::makeFieldType<decltype(das::declval<ManagedType>().graphicsPipelineLibrary)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT> {
  VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("graphicsPipelineLibraryFastLinking", "graphicsPipelineLibraryFastLinking", offsetof(ManagedType, graphicsPipelineLibraryFastLinking), das::makeFieldType<decltype(das::declval<ManagedType>().graphicsPipelineLibraryFastLinking)>(*mlib));
    addFieldEx("graphicsPipelineLibraryIndependentInterpolationDecoration", "graphicsPipelineLibraryIndependentInterpolationDecoration", offsetof(ManagedType, graphicsPipelineLibraryIndependentInterpolationDecoration), das::makeFieldType<decltype(das::declval<ManagedType>().graphicsPipelineLibraryIndependentInterpolationDecoration)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_graphics_pipeline_library) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceGroupPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceGroupProperties> {
  VkPhysicalDeviceGroupPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceGroupProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("physicalDeviceCount", "physicalDeviceCount", offsetof(ManagedType, physicalDeviceCount), das::makeFieldType<decltype(das::declval<ManagedType>().physicalDeviceCount)>(*mlib));
    addFieldEx("physicalDevices", "physicalDevices", offsetof(ManagedType, physicalDevices), das::makeFieldType<decltype(das::declval<ManagedType>().physicalDevices)>(*mlib));
    addFieldEx("subsetAllocation", "subsetAllocation", offsetof(ManagedType, subsetAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().subsetAllocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_HUAWEI_hdr_vivid)
struct VkPhysicalDeviceHdrVividFeaturesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceHdrVividFeaturesHUAWEI> {
  VkPhysicalDeviceHdrVividFeaturesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceHdrVividFeaturesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hdrVivid", "hdrVivid", offsetof(ManagedType, hdrVivid), das::makeFieldType<decltype(das::declval<ManagedType>().hdrVivid)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_hdr_vivid) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceHostImageCopyFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceHostImageCopyFeatures> {
  VkPhysicalDeviceHostImageCopyFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceHostImageCopyFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hostImageCopy", "hostImageCopy", offsetof(ManagedType, hostImageCopy), das::makeFieldType<decltype(das::declval<ManagedType>().hostImageCopy)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceHostImageCopyPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceHostImageCopyProperties> {
  VkPhysicalDeviceHostImageCopyPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceHostImageCopyProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("copySrcLayoutCount", "copySrcLayoutCount", offsetof(ManagedType, copySrcLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().copySrcLayoutCount)>(*mlib));
    addFieldEx("pCopySrcLayouts", "pCopySrcLayouts", offsetof(ManagedType, pCopySrcLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pCopySrcLayouts)>(*mlib));
    addFieldEx("copyDstLayoutCount", "copyDstLayoutCount", offsetof(ManagedType, copyDstLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().copyDstLayoutCount)>(*mlib));
    addFieldEx("pCopyDstLayouts", "pCopyDstLayouts", offsetof(ManagedType, pCopyDstLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pCopyDstLayouts)>(*mlib));
    addFieldEx("optimalTilingLayoutUUID", "optimalTilingLayoutUUID", offsetof(ManagedType, optimalTilingLayoutUUID), das::makeFieldType<decltype(das::declval<ManagedType>().optimalTilingLayoutUUID)>(*mlib));
    addFieldEx("identicalMemoryTypeRequirements", "identicalMemoryTypeRequirements", offsetof(ManagedType, identicalMemoryTypeRequirements), das::makeFieldType<decltype(das::declval<ManagedType>().identicalMemoryTypeRequirements)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceHostQueryResetFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceHostQueryResetFeatures> {
  VkPhysicalDeviceHostQueryResetFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceHostQueryResetFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hostQueryReset", "hostQueryReset", offsetof(ManagedType, hostQueryReset), das::makeFieldType<decltype(das::declval<ManagedType>().hostQueryReset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceIDPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceIDProperties> {
  VkPhysicalDeviceIDPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceIDProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceUUID", "deviceUUID", offsetof(ManagedType, deviceUUID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceUUID)>(*mlib));
    addFieldEx("driverUUID", "driverUUID", offsetof(ManagedType, driverUUID), das::makeFieldType<decltype(das::declval<ManagedType>().driverUUID)>(*mlib));
    addFieldEx("deviceLUID", "deviceLUID", offsetof(ManagedType, deviceLUID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceLUID)>(*mlib));
    addFieldEx("deviceNodeMask", "deviceNodeMask", offsetof(ManagedType, deviceNodeMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceNodeMask)>(*mlib));
    addFieldEx("deviceLUIDValid", "deviceLUIDValid", offsetof(ManagedType, deviceLUIDValid), das::makeFieldType<decltype(das::declval<ManagedType>().deviceLUIDValid)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_image_2d_view_of_3d)
struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT> {
  VkPhysicalDeviceImage2DViewOf3DFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImage2DViewOf3DFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("image2DViewOf3D", "image2DViewOf3D", offsetof(ManagedType, image2DViewOf3D), das::makeFieldType<decltype(das::declval<ManagedType>().image2DViewOf3D)>(*mlib));
    addFieldEx("sampler2DViewOf3D", "sampler2DViewOf3D", offsetof(ManagedType, sampler2DViewOf3D), das::makeFieldType<decltype(das::declval<ManagedType>().sampler2DViewOf3D)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_2d_view_of_3d) */
#if defined(VK_MESA_image_alignment_control)
struct VkPhysicalDeviceImageAlignmentControlFeaturesMESAAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageAlignmentControlFeaturesMESA> {
  VkPhysicalDeviceImageAlignmentControlFeaturesMESAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageAlignmentControlFeaturesMESA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageAlignmentControl", "imageAlignmentControl", offsetof(ManagedType, imageAlignmentControl), das::makeFieldType<decltype(das::declval<ManagedType>().imageAlignmentControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceImageAlignmentControlPropertiesMESAAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageAlignmentControlPropertiesMESA> {
  VkPhysicalDeviceImageAlignmentControlPropertiesMESAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageAlignmentControlPropertiesMESA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportedImageAlignmentMask", "supportedImageAlignmentMask", offsetof(ManagedType, supportedImageAlignmentMask), das::makeFieldType<decltype(das::declval<ManagedType>().supportedImageAlignmentMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_MESA_image_alignment_control) */
#if defined(VK_EXT_image_compression_control)
struct VkPhysicalDeviceImageCompressionControlFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageCompressionControlFeaturesEXT> {
  VkPhysicalDeviceImageCompressionControlFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageCompressionControlFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageCompressionControl", "imageCompressionControl", offsetof(ManagedType, imageCompressionControl), das::makeFieldType<decltype(das::declval<ManagedType>().imageCompressionControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_compression_control) */
#if defined(VK_EXT_image_compression_control_swapchain)
struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT> {
  VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageCompressionControlSwapchain", "imageCompressionControlSwapchain", offsetof(ManagedType, imageCompressionControlSwapchain), das::makeFieldType<decltype(das::declval<ManagedType>().imageCompressionControlSwapchain)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_compression_control_swapchain) */
#if defined(VK_EXT_image_drm_format_modifier)
struct VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageDrmFormatModifierInfoEXT> {
  VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageDrmFormatModifierInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("drmFormatModifier", "drmFormatModifier", offsetof(ManagedType, drmFormatModifier), das::makeFieldType<decltype(das::declval<ManagedType>().drmFormatModifier)>(*mlib));
    addFieldEx("sharingMode", "sharingMode", offsetof(ManagedType, sharingMode), das::makeFieldType<decltype(das::declval<ManagedType>().sharingMode)>(*mlib));
    addFieldEx("queueFamilyIndexCount", "queueFamilyIndexCount", offsetof(ManagedType, queueFamilyIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndexCount)>(*mlib));
    addFieldEx("pQueueFamilyIndices", "pQueueFamilyIndices", offsetof(ManagedType, pQueueFamilyIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueFamilyIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceImageFormatInfo2Annotation : ManagedStructureAnnotation<VkPhysicalDeviceImageFormatInfo2> {
  VkPhysicalDeviceImageFormatInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageFormatInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("tiling", "tiling", offsetof(ManagedType, tiling), das::makeFieldType<decltype(das::declval<ManagedType>().tiling)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_QCOM_image_processing2)
struct VkPhysicalDeviceImageProcessing2FeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageProcessing2FeaturesQCOM> {
  VkPhysicalDeviceImageProcessing2FeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageProcessing2FeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("textureBlockMatch2", "textureBlockMatch2", offsetof(ManagedType, textureBlockMatch2), das::makeFieldType<decltype(das::declval<ManagedType>().textureBlockMatch2)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceImageProcessing2PropertiesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageProcessing2PropertiesQCOM> {
  VkPhysicalDeviceImageProcessing2PropertiesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageProcessing2PropertiesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxBlockMatchWindow", "maxBlockMatchWindow", offsetof(ManagedType, maxBlockMatchWindow), das::makeFieldType<decltype(das::declval<ManagedType>().maxBlockMatchWindow)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_image_processing2) */
#if defined(VK_QCOM_image_processing)
struct VkPhysicalDeviceImageProcessingFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageProcessingFeaturesQCOM> {
  VkPhysicalDeviceImageProcessingFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageProcessingFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("textureSampleWeighted", "textureSampleWeighted", offsetof(ManagedType, textureSampleWeighted), das::makeFieldType<decltype(das::declval<ManagedType>().textureSampleWeighted)>(*mlib));
    addFieldEx("textureBoxFilter", "textureBoxFilter", offsetof(ManagedType, textureBoxFilter), das::makeFieldType<decltype(das::declval<ManagedType>().textureBoxFilter)>(*mlib));
    addFieldEx("textureBlockMatch", "textureBlockMatch", offsetof(ManagedType, textureBlockMatch), das::makeFieldType<decltype(das::declval<ManagedType>().textureBlockMatch)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceImageProcessingPropertiesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageProcessingPropertiesQCOM> {
  VkPhysicalDeviceImageProcessingPropertiesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageProcessingPropertiesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxWeightFilterPhases", "maxWeightFilterPhases", offsetof(ManagedType, maxWeightFilterPhases), das::makeFieldType<decltype(das::declval<ManagedType>().maxWeightFilterPhases)>(*mlib));
    addFieldEx("maxWeightFilterDimension", "maxWeightFilterDimension", offsetof(ManagedType, maxWeightFilterDimension), das::makeFieldType<decltype(das::declval<ManagedType>().maxWeightFilterDimension)>(*mlib));
    addFieldEx("maxBlockMatchRegion", "maxBlockMatchRegion", offsetof(ManagedType, maxBlockMatchRegion), das::makeFieldType<decltype(das::declval<ManagedType>().maxBlockMatchRegion)>(*mlib));
    addFieldEx("maxBoxFilterBlockSize", "maxBoxFilterBlockSize", offsetof(ManagedType, maxBoxFilterBlockSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxBoxFilterBlockSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_image_processing) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceImageRobustnessFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageRobustnessFeatures> {
  VkPhysicalDeviceImageRobustnessFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageRobustnessFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("robustImageAccess", "robustImageAccess", offsetof(ManagedType, robustImageAccess), das::makeFieldType<decltype(das::declval<ManagedType>().robustImageAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_image_sliced_view_of_3d)
struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT> {
  VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageSlicedViewOf3D", "imageSlicedViewOf3D", offsetof(ManagedType, imageSlicedViewOf3D), das::makeFieldType<decltype(das::declval<ManagedType>().imageSlicedViewOf3D)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_sliced_view_of_3d) */
#if defined(VK_EXT_filter_cubic)
struct VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageViewImageFormatInfoEXT> {
  VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageViewImageFormatInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageViewType", "imageViewType", offsetof(ManagedType, imageViewType), das::makeFieldType<decltype(das::declval<ManagedType>().imageViewType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_filter_cubic) */
#if defined(VK_EXT_image_view_min_lod)
struct VkPhysicalDeviceImageViewMinLodFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImageViewMinLodFeaturesEXT> {
  VkPhysicalDeviceImageViewMinLodFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImageViewMinLodFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minLod", "minLod", offsetof(ManagedType, minLod), das::makeFieldType<decltype(das::declval<ManagedType>().minLod)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_image_view_min_lod) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceImagelessFramebufferFeatures> {
  VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceImagelessFramebufferFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imagelessFramebuffer", "imagelessFramebuffer", offsetof(ManagedType, imagelessFramebuffer), das::makeFieldType<decltype(das::declval<ManagedType>().imagelessFramebuffer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceIndexTypeUint8FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceIndexTypeUint8Features> {
  VkPhysicalDeviceIndexTypeUint8FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceIndexTypeUint8Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("indexTypeUint8", "indexTypeUint8", offsetof(ManagedType, indexTypeUint8), das::makeFieldType<decltype(das::declval<ManagedType>().indexTypeUint8)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_inherited_viewport_scissor)
struct VkPhysicalDeviceInheritedViewportScissorFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceInheritedViewportScissorFeaturesNV> {
  VkPhysicalDeviceInheritedViewportScissorFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceInheritedViewportScissorFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("inheritedViewportScissor2D", "inheritedViewportScissor2D", offsetof(ManagedType, inheritedViewportScissor2D), das::makeFieldType<decltype(das::declval<ManagedType>().inheritedViewportScissor2D)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_inherited_viewport_scissor) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceInlineUniformBlockFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceInlineUniformBlockFeatures> {
  VkPhysicalDeviceInlineUniformBlockFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceInlineUniformBlockFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("inlineUniformBlock", "inlineUniformBlock", offsetof(ManagedType, inlineUniformBlock), das::makeFieldType<decltype(das::declval<ManagedType>().inlineUniformBlock)>(*mlib));
    addFieldEx("descriptorBindingInlineUniformBlockUpdateAfterBind", "descriptorBindingInlineUniformBlockUpdateAfterBind", offsetof(ManagedType, descriptorBindingInlineUniformBlockUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingInlineUniformBlockUpdateAfterBind)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceInlineUniformBlockPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceInlineUniformBlockProperties> {
  VkPhysicalDeviceInlineUniformBlockPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceInlineUniformBlockProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxInlineUniformBlockSize", "maxInlineUniformBlockSize", offsetof(ManagedType, maxInlineUniformBlockSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxInlineUniformBlockSize)>(*mlib));
    addFieldEx("maxPerStageDescriptorInlineUniformBlocks", "maxPerStageDescriptorInlineUniformBlocks", offsetof(ManagedType, maxPerStageDescriptorInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorInlineUniformBlocks)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)>(*mlib));
    addFieldEx("maxDescriptorSetInlineUniformBlocks", "maxDescriptorSetInlineUniformBlocks", offsetof(ManagedType, maxDescriptorSetInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetInlineUniformBlocks)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindInlineUniformBlocks", "maxDescriptorSetUpdateAfterBindInlineUniformBlocks", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindInlineUniformBlocks)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_HUAWEI_invocation_mask)
struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI> {
  VkPhysicalDeviceInvocationMaskFeaturesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceInvocationMaskFeaturesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("invocationMask", "invocationMask", offsetof(ManagedType, invocationMask), das::makeFieldType<decltype(das::declval<ManagedType>().invocationMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_KHR_maintenance7)
struct VkPhysicalDeviceLayeredApiPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLayeredApiPropertiesKHR> {
  VkPhysicalDeviceLayeredApiPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLayeredApiPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vendorID", "vendorID", offsetof(ManagedType, vendorID), das::makeFieldType<decltype(das::declval<ManagedType>().vendorID)>(*mlib));
    addFieldEx("deviceID", "deviceID", offsetof(ManagedType, deviceID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceID)>(*mlib));
    addFieldEx("layeredAPI", "layeredAPI", offsetof(ManagedType, layeredAPI), das::makeFieldType<decltype(das::declval<ManagedType>().layeredAPI)>(*mlib));
    addFieldEx("deviceName", "deviceName", offsetof(ManagedType, deviceName), das::makeFieldType<decltype(das::declval<ManagedType>().deviceName)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceLayeredApiPropertiesListKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLayeredApiPropertiesListKHR> {
  VkPhysicalDeviceLayeredApiPropertiesListKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLayeredApiPropertiesListKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("layeredApiCount", "layeredApiCount", offsetof(ManagedType, layeredApiCount), das::makeFieldType<decltype(das::declval<ManagedType>().layeredApiCount)>(*mlib));
    addFieldEx("pLayeredApis", "pLayeredApis", offsetof(ManagedType, pLayeredApis), das::makeFieldType<decltype(das::declval<ManagedType>().pLayeredApis)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_VERSION_1_0)
struct VkPhysicalDeviceLimitsAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLimits> {
  VkPhysicalDeviceLimitsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLimits", lib) {
    addFieldEx("maxImageDimension1D", "maxImageDimension1D", offsetof(ManagedType, maxImageDimension1D), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageDimension1D)>(*mlib));
    addFieldEx("maxImageDimension2D", "maxImageDimension2D", offsetof(ManagedType, maxImageDimension2D), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageDimension2D)>(*mlib));
    addFieldEx("maxImageDimension3D", "maxImageDimension3D", offsetof(ManagedType, maxImageDimension3D), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageDimension3D)>(*mlib));
    addFieldEx("maxImageDimensionCube", "maxImageDimensionCube", offsetof(ManagedType, maxImageDimensionCube), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageDimensionCube)>(*mlib));
    addFieldEx("maxImageArrayLayers", "maxImageArrayLayers", offsetof(ManagedType, maxImageArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageArrayLayers)>(*mlib));
    addFieldEx("maxTexelBufferElements", "maxTexelBufferElements", offsetof(ManagedType, maxTexelBufferElements), das::makeFieldType<decltype(das::declval<ManagedType>().maxTexelBufferElements)>(*mlib));
    addFieldEx("maxUniformBufferRange", "maxUniformBufferRange", offsetof(ManagedType, maxUniformBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().maxUniformBufferRange)>(*mlib));
    addFieldEx("maxStorageBufferRange", "maxStorageBufferRange", offsetof(ManagedType, maxStorageBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().maxStorageBufferRange)>(*mlib));
    addFieldEx("maxPushConstantsSize", "maxPushConstantsSize", offsetof(ManagedType, maxPushConstantsSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxPushConstantsSize)>(*mlib));
    addFieldEx("maxMemoryAllocationCount", "maxMemoryAllocationCount", offsetof(ManagedType, maxMemoryAllocationCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMemoryAllocationCount)>(*mlib));
    addFieldEx("maxSamplerAllocationCount", "maxSamplerAllocationCount", offsetof(ManagedType, maxSamplerAllocationCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSamplerAllocationCount)>(*mlib));
    addFieldEx("bufferImageGranularity", "bufferImageGranularity", offsetof(ManagedType, bufferImageGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().bufferImageGranularity)>(*mlib));
    addFieldEx("sparseAddressSpaceSize", "sparseAddressSpaceSize", offsetof(ManagedType, sparseAddressSpaceSize), das::makeFieldType<decltype(das::declval<ManagedType>().sparseAddressSpaceSize)>(*mlib));
    addFieldEx("maxBoundDescriptorSets", "maxBoundDescriptorSets", offsetof(ManagedType, maxBoundDescriptorSets), das::makeFieldType<decltype(das::declval<ManagedType>().maxBoundDescriptorSets)>(*mlib));
    addFieldEx("maxPerStageDescriptorSamplers", "maxPerStageDescriptorSamplers", offsetof(ManagedType, maxPerStageDescriptorSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorSamplers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUniformBuffers", "maxPerStageDescriptorUniformBuffers", offsetof(ManagedType, maxPerStageDescriptorUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUniformBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorStorageBuffers", "maxPerStageDescriptorStorageBuffers", offsetof(ManagedType, maxPerStageDescriptorStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorStorageBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorSampledImages", "maxPerStageDescriptorSampledImages", offsetof(ManagedType, maxPerStageDescriptorSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorSampledImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorStorageImages", "maxPerStageDescriptorStorageImages", offsetof(ManagedType, maxPerStageDescriptorStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorStorageImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorInputAttachments", "maxPerStageDescriptorInputAttachments", offsetof(ManagedType, maxPerStageDescriptorInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorInputAttachments)>(*mlib));
    addFieldEx("maxPerStageResources", "maxPerStageResources", offsetof(ManagedType, maxPerStageResources), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageResources)>(*mlib));
    addFieldEx("maxDescriptorSetSamplers", "maxDescriptorSetSamplers", offsetof(ManagedType, maxDescriptorSetSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetSamplers)>(*mlib));
    addFieldEx("maxDescriptorSetUniformBuffers", "maxDescriptorSetUniformBuffers", offsetof(ManagedType, maxDescriptorSetUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUniformBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetUniformBuffersDynamic", "maxDescriptorSetUniformBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUniformBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUniformBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetStorageBuffers", "maxDescriptorSetStorageBuffers", offsetof(ManagedType, maxDescriptorSetStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetStorageBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetStorageBuffersDynamic", "maxDescriptorSetStorageBuffersDynamic", offsetof(ManagedType, maxDescriptorSetStorageBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetStorageBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetSampledImages", "maxDescriptorSetSampledImages", offsetof(ManagedType, maxDescriptorSetSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetSampledImages)>(*mlib));
    addFieldEx("maxDescriptorSetStorageImages", "maxDescriptorSetStorageImages", offsetof(ManagedType, maxDescriptorSetStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetStorageImages)>(*mlib));
    addFieldEx("maxDescriptorSetInputAttachments", "maxDescriptorSetInputAttachments", offsetof(ManagedType, maxDescriptorSetInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetInputAttachments)>(*mlib));
    addFieldEx("maxVertexInputAttributes", "maxVertexInputAttributes", offsetof(ManagedType, maxVertexInputAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexInputAttributes)>(*mlib));
    addFieldEx("maxVertexInputBindings", "maxVertexInputBindings", offsetof(ManagedType, maxVertexInputBindings), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexInputBindings)>(*mlib));
    addFieldEx("maxVertexInputAttributeOffset", "maxVertexInputAttributeOffset", offsetof(ManagedType, maxVertexInputAttributeOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexInputAttributeOffset)>(*mlib));
    addFieldEx("maxVertexInputBindingStride", "maxVertexInputBindingStride", offsetof(ManagedType, maxVertexInputBindingStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexInputBindingStride)>(*mlib));
    addFieldEx("maxVertexOutputComponents", "maxVertexOutputComponents", offsetof(ManagedType, maxVertexOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexOutputComponents)>(*mlib));
    addFieldEx("maxTessellationGenerationLevel", "maxTessellationGenerationLevel", offsetof(ManagedType, maxTessellationGenerationLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationGenerationLevel)>(*mlib));
    addFieldEx("maxTessellationPatchSize", "maxTessellationPatchSize", offsetof(ManagedType, maxTessellationPatchSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationPatchSize)>(*mlib));
    addFieldEx("maxTessellationControlPerVertexInputComponents", "maxTessellationControlPerVertexInputComponents", offsetof(ManagedType, maxTessellationControlPerVertexInputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationControlPerVertexInputComponents)>(*mlib));
    addFieldEx("maxTessellationControlPerVertexOutputComponents", "maxTessellationControlPerVertexOutputComponents", offsetof(ManagedType, maxTessellationControlPerVertexOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationControlPerVertexOutputComponents)>(*mlib));
    addFieldEx("maxTessellationControlPerPatchOutputComponents", "maxTessellationControlPerPatchOutputComponents", offsetof(ManagedType, maxTessellationControlPerPatchOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationControlPerPatchOutputComponents)>(*mlib));
    addFieldEx("maxTessellationControlTotalOutputComponents", "maxTessellationControlTotalOutputComponents", offsetof(ManagedType, maxTessellationControlTotalOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationControlTotalOutputComponents)>(*mlib));
    addFieldEx("maxTessellationEvaluationInputComponents", "maxTessellationEvaluationInputComponents", offsetof(ManagedType, maxTessellationEvaluationInputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationEvaluationInputComponents)>(*mlib));
    addFieldEx("maxTessellationEvaluationOutputComponents", "maxTessellationEvaluationOutputComponents", offsetof(ManagedType, maxTessellationEvaluationOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxTessellationEvaluationOutputComponents)>(*mlib));
    addFieldEx("maxGeometryShaderInvocations", "maxGeometryShaderInvocations", offsetof(ManagedType, maxGeometryShaderInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryShaderInvocations)>(*mlib));
    addFieldEx("maxGeometryInputComponents", "maxGeometryInputComponents", offsetof(ManagedType, maxGeometryInputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryInputComponents)>(*mlib));
    addFieldEx("maxGeometryOutputComponents", "maxGeometryOutputComponents", offsetof(ManagedType, maxGeometryOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryOutputComponents)>(*mlib));
    addFieldEx("maxGeometryOutputVertices", "maxGeometryOutputVertices", offsetof(ManagedType, maxGeometryOutputVertices), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryOutputVertices)>(*mlib));
    addFieldEx("maxGeometryTotalOutputComponents", "maxGeometryTotalOutputComponents", offsetof(ManagedType, maxGeometryTotalOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryTotalOutputComponents)>(*mlib));
    addFieldEx("maxFragmentInputComponents", "maxFragmentInputComponents", offsetof(ManagedType, maxFragmentInputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentInputComponents)>(*mlib));
    addFieldEx("maxFragmentOutputAttachments", "maxFragmentOutputAttachments", offsetof(ManagedType, maxFragmentOutputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentOutputAttachments)>(*mlib));
    addFieldEx("maxFragmentDualSrcAttachments", "maxFragmentDualSrcAttachments", offsetof(ManagedType, maxFragmentDualSrcAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentDualSrcAttachments)>(*mlib));
    addFieldEx("maxFragmentCombinedOutputResources", "maxFragmentCombinedOutputResources", offsetof(ManagedType, maxFragmentCombinedOutputResources), das::makeFieldType<decltype(das::declval<ManagedType>().maxFragmentCombinedOutputResources)>(*mlib));
    addFieldEx("maxComputeSharedMemorySize", "maxComputeSharedMemorySize", offsetof(ManagedType, maxComputeSharedMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeSharedMemorySize)>(*mlib));
    addFieldEx("maxComputeWorkGroupCount", "maxComputeWorkGroupCount", offsetof(ManagedType, maxComputeWorkGroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeWorkGroupCount)>(*mlib));
    addFieldEx("maxComputeWorkGroupInvocations", "maxComputeWorkGroupInvocations", offsetof(ManagedType, maxComputeWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeWorkGroupInvocations)>(*mlib));
    addFieldEx("maxComputeWorkGroupSize", "maxComputeWorkGroupSize", offsetof(ManagedType, maxComputeWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeWorkGroupSize)>(*mlib));
    addFieldEx("subPixelPrecisionBits", "subPixelPrecisionBits", offsetof(ManagedType, subPixelPrecisionBits), das::makeFieldType<decltype(das::declval<ManagedType>().subPixelPrecisionBits)>(*mlib));
    addFieldEx("subTexelPrecisionBits", "subTexelPrecisionBits", offsetof(ManagedType, subTexelPrecisionBits), das::makeFieldType<decltype(das::declval<ManagedType>().subTexelPrecisionBits)>(*mlib));
    addFieldEx("mipmapPrecisionBits", "mipmapPrecisionBits", offsetof(ManagedType, mipmapPrecisionBits), das::makeFieldType<decltype(das::declval<ManagedType>().mipmapPrecisionBits)>(*mlib));
    addFieldEx("maxDrawIndexedIndexValue", "maxDrawIndexedIndexValue", offsetof(ManagedType, maxDrawIndexedIndexValue), das::makeFieldType<decltype(das::declval<ManagedType>().maxDrawIndexedIndexValue)>(*mlib));
    addFieldEx("maxDrawIndirectCount", "maxDrawIndirectCount", offsetof(ManagedType, maxDrawIndirectCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxDrawIndirectCount)>(*mlib));
    addFieldEx("maxSamplerLodBias", "maxSamplerLodBias", offsetof(ManagedType, maxSamplerLodBias), das::makeFieldType<decltype(das::declval<ManagedType>().maxSamplerLodBias)>(*mlib));
    addFieldEx("maxSamplerAnisotropy", "maxSamplerAnisotropy", offsetof(ManagedType, maxSamplerAnisotropy), das::makeFieldType<decltype(das::declval<ManagedType>().maxSamplerAnisotropy)>(*mlib));
    addFieldEx("maxViewports", "maxViewports", offsetof(ManagedType, maxViewports), das::makeFieldType<decltype(das::declval<ManagedType>().maxViewports)>(*mlib));
    addFieldEx("maxViewportDimensions", "maxViewportDimensions", offsetof(ManagedType, maxViewportDimensions), das::makeFieldType<decltype(das::declval<ManagedType>().maxViewportDimensions)>(*mlib));
    addFieldEx("viewportBoundsRange", "viewportBoundsRange", offsetof(ManagedType, viewportBoundsRange), das::makeFieldType<decltype(das::declval<ManagedType>().viewportBoundsRange)>(*mlib));
    addFieldEx("viewportSubPixelBits", "viewportSubPixelBits", offsetof(ManagedType, viewportSubPixelBits), das::makeFieldType<decltype(das::declval<ManagedType>().viewportSubPixelBits)>(*mlib));
    addFieldEx("minMemoryMapAlignment", "minMemoryMapAlignment", offsetof(ManagedType, minMemoryMapAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minMemoryMapAlignment)>(*mlib));
    addFieldEx("minTexelBufferOffsetAlignment", "minTexelBufferOffsetAlignment", offsetof(ManagedType, minTexelBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minTexelBufferOffsetAlignment)>(*mlib));
    addFieldEx("minUniformBufferOffsetAlignment", "minUniformBufferOffsetAlignment", offsetof(ManagedType, minUniformBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minUniformBufferOffsetAlignment)>(*mlib));
    addFieldEx("minStorageBufferOffsetAlignment", "minStorageBufferOffsetAlignment", offsetof(ManagedType, minStorageBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minStorageBufferOffsetAlignment)>(*mlib));
    addFieldEx("minTexelOffset", "minTexelOffset", offsetof(ManagedType, minTexelOffset), das::makeFieldType<decltype(das::declval<ManagedType>().minTexelOffset)>(*mlib));
    addFieldEx("maxTexelOffset", "maxTexelOffset", offsetof(ManagedType, maxTexelOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxTexelOffset)>(*mlib));
    addFieldEx("minTexelGatherOffset", "minTexelGatherOffset", offsetof(ManagedType, minTexelGatherOffset), das::makeFieldType<decltype(das::declval<ManagedType>().minTexelGatherOffset)>(*mlib));
    addFieldEx("maxTexelGatherOffset", "maxTexelGatherOffset", offsetof(ManagedType, maxTexelGatherOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxTexelGatherOffset)>(*mlib));
    addFieldEx("minInterpolationOffset", "minInterpolationOffset", offsetof(ManagedType, minInterpolationOffset), das::makeFieldType<decltype(das::declval<ManagedType>().minInterpolationOffset)>(*mlib));
    addFieldEx("maxInterpolationOffset", "maxInterpolationOffset", offsetof(ManagedType, maxInterpolationOffset), das::makeFieldType<decltype(das::declval<ManagedType>().maxInterpolationOffset)>(*mlib));
    addFieldEx("subPixelInterpolationOffsetBits", "subPixelInterpolationOffsetBits", offsetof(ManagedType, subPixelInterpolationOffsetBits), das::makeFieldType<decltype(das::declval<ManagedType>().subPixelInterpolationOffsetBits)>(*mlib));
    addFieldEx("maxFramebufferWidth", "maxFramebufferWidth", offsetof(ManagedType, maxFramebufferWidth), das::makeFieldType<decltype(das::declval<ManagedType>().maxFramebufferWidth)>(*mlib));
    addFieldEx("maxFramebufferHeight", "maxFramebufferHeight", offsetof(ManagedType, maxFramebufferHeight), das::makeFieldType<decltype(das::declval<ManagedType>().maxFramebufferHeight)>(*mlib));
    addFieldEx("maxFramebufferLayers", "maxFramebufferLayers", offsetof(ManagedType, maxFramebufferLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxFramebufferLayers)>(*mlib));
    addFieldEx("framebufferColorSampleCounts", "framebufferColorSampleCounts", offsetof(ManagedType, framebufferColorSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().framebufferColorSampleCounts)>(*mlib));
    addFieldEx("framebufferDepthSampleCounts", "framebufferDepthSampleCounts", offsetof(ManagedType, framebufferDepthSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().framebufferDepthSampleCounts)>(*mlib));
    addFieldEx("framebufferStencilSampleCounts", "framebufferStencilSampleCounts", offsetof(ManagedType, framebufferStencilSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().framebufferStencilSampleCounts)>(*mlib));
    addFieldEx("framebufferNoAttachmentsSampleCounts", "framebufferNoAttachmentsSampleCounts", offsetof(ManagedType, framebufferNoAttachmentsSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().framebufferNoAttachmentsSampleCounts)>(*mlib));
    addFieldEx("maxColorAttachments", "maxColorAttachments", offsetof(ManagedType, maxColorAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxColorAttachments)>(*mlib));
    addFieldEx("sampledImageColorSampleCounts", "sampledImageColorSampleCounts", offsetof(ManagedType, sampledImageColorSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampledImageColorSampleCounts)>(*mlib));
    addFieldEx("sampledImageIntegerSampleCounts", "sampledImageIntegerSampleCounts", offsetof(ManagedType, sampledImageIntegerSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampledImageIntegerSampleCounts)>(*mlib));
    addFieldEx("sampledImageDepthSampleCounts", "sampledImageDepthSampleCounts", offsetof(ManagedType, sampledImageDepthSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampledImageDepthSampleCounts)>(*mlib));
    addFieldEx("sampledImageStencilSampleCounts", "sampledImageStencilSampleCounts", offsetof(ManagedType, sampledImageStencilSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampledImageStencilSampleCounts)>(*mlib));
    addFieldEx("storageImageSampleCounts", "storageImageSampleCounts", offsetof(ManagedType, storageImageSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().storageImageSampleCounts)>(*mlib));
    addFieldEx("maxSampleMaskWords", "maxSampleMaskWords", offsetof(ManagedType, maxSampleMaskWords), das::makeFieldType<decltype(das::declval<ManagedType>().maxSampleMaskWords)>(*mlib));
    addFieldEx("timestampComputeAndGraphics", "timestampComputeAndGraphics", offsetof(ManagedType, timestampComputeAndGraphics), das::makeFieldType<decltype(das::declval<ManagedType>().timestampComputeAndGraphics)>(*mlib));
    addFieldEx("timestampPeriod", "timestampPeriod", offsetof(ManagedType, timestampPeriod), das::makeFieldType<decltype(das::declval<ManagedType>().timestampPeriod)>(*mlib));
    addFieldEx("maxClipDistances", "maxClipDistances", offsetof(ManagedType, maxClipDistances), das::makeFieldType<decltype(das::declval<ManagedType>().maxClipDistances)>(*mlib));
    addFieldEx("maxCullDistances", "maxCullDistances", offsetof(ManagedType, maxCullDistances), das::makeFieldType<decltype(das::declval<ManagedType>().maxCullDistances)>(*mlib));
    addFieldEx("maxCombinedClipAndCullDistances", "maxCombinedClipAndCullDistances", offsetof(ManagedType, maxCombinedClipAndCullDistances), das::makeFieldType<decltype(das::declval<ManagedType>().maxCombinedClipAndCullDistances)>(*mlib));
    addFieldEx("discreteQueuePriorities", "discreteQueuePriorities", offsetof(ManagedType, discreteQueuePriorities), das::makeFieldType<decltype(das::declval<ManagedType>().discreteQueuePriorities)>(*mlib));
    addFieldEx("pointSizeRange", "pointSizeRange", offsetof(ManagedType, pointSizeRange), das::makeFieldType<decltype(das::declval<ManagedType>().pointSizeRange)>(*mlib));
    addFieldEx("lineWidthRange", "lineWidthRange", offsetof(ManagedType, lineWidthRange), das::makeFieldType<decltype(das::declval<ManagedType>().lineWidthRange)>(*mlib));
    addFieldEx("pointSizeGranularity", "pointSizeGranularity", offsetof(ManagedType, pointSizeGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().pointSizeGranularity)>(*mlib));
    addFieldEx("lineWidthGranularity", "lineWidthGranularity", offsetof(ManagedType, lineWidthGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().lineWidthGranularity)>(*mlib));
    addFieldEx("strictLines", "strictLines", offsetof(ManagedType, strictLines), das::makeFieldType<decltype(das::declval<ManagedType>().strictLines)>(*mlib));
    addFieldEx("standardSampleLocations", "standardSampleLocations", offsetof(ManagedType, standardSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().standardSampleLocations)>(*mlib));
    addFieldEx("optimalBufferCopyOffsetAlignment", "optimalBufferCopyOffsetAlignment", offsetof(ManagedType, optimalBufferCopyOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().optimalBufferCopyOffsetAlignment)>(*mlib));
    addFieldEx("optimalBufferCopyRowPitchAlignment", "optimalBufferCopyRowPitchAlignment", offsetof(ManagedType, optimalBufferCopyRowPitchAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().optimalBufferCopyRowPitchAlignment)>(*mlib));
    addFieldEx("nonCoherentAtomSize", "nonCoherentAtomSize", offsetof(ManagedType, nonCoherentAtomSize), das::makeFieldType<decltype(das::declval<ManagedType>().nonCoherentAtomSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceSparsePropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSparseProperties> {
  VkPhysicalDeviceSparsePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSparseProperties", lib) {
    addFieldEx("residencyStandard2DBlockShape", "residencyStandard2DBlockShape", offsetof(ManagedType, residencyStandard2DBlockShape), das::makeFieldType<decltype(das::declval<ManagedType>().residencyStandard2DBlockShape)>(*mlib));
    addFieldEx("residencyStandard2DMultisampleBlockShape", "residencyStandard2DMultisampleBlockShape", offsetof(ManagedType, residencyStandard2DMultisampleBlockShape), das::makeFieldType<decltype(das::declval<ManagedType>().residencyStandard2DMultisampleBlockShape)>(*mlib));
    addFieldEx("residencyStandard3DBlockShape", "residencyStandard3DBlockShape", offsetof(ManagedType, residencyStandard3DBlockShape), das::makeFieldType<decltype(das::declval<ManagedType>().residencyStandard3DBlockShape)>(*mlib));
    addFieldEx("residencyAlignedMipSize", "residencyAlignedMipSize", offsetof(ManagedType, residencyAlignedMipSize), das::makeFieldType<decltype(das::declval<ManagedType>().residencyAlignedMipSize)>(*mlib));
    addFieldEx("residencyNonResidentStrict", "residencyNonResidentStrict", offsetof(ManagedType, residencyNonResidentStrict), das::makeFieldType<decltype(das::declval<ManagedType>().residencyNonResidentStrict)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceProperties> {
  VkPhysicalDevicePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProperties", lib) {
    addFieldEx("apiVersion", "apiVersion", offsetof(ManagedType, apiVersion), das::makeFieldType<decltype(das::declval<ManagedType>().apiVersion)>(*mlib));
    addFieldEx("driverVersion", "driverVersion", offsetof(ManagedType, driverVersion), das::makeFieldType<decltype(das::declval<ManagedType>().driverVersion)>(*mlib));
    addFieldEx("vendorID", "vendorID", offsetof(ManagedType, vendorID), das::makeFieldType<decltype(das::declval<ManagedType>().vendorID)>(*mlib));
    addFieldEx("deviceID", "deviceID", offsetof(ManagedType, deviceID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceID)>(*mlib));
    addFieldEx("deviceType", "deviceType", offsetof(ManagedType, deviceType), das::makeFieldType<decltype(das::declval<ManagedType>().deviceType)>(*mlib));
    addFieldEx("deviceName", "deviceName", offsetof(ManagedType, deviceName), das::makeFieldType<decltype(das::declval<ManagedType>().deviceName)>(*mlib));
    addFieldEx("pipelineCacheUUID", "pipelineCacheUUID", offsetof(ManagedType, pipelineCacheUUID), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCacheUUID)>(*mlib));
    addFieldEx("limits", "limits", offsetof(ManagedType, limits), das::makeFieldType<decltype(das::declval<ManagedType>().limits)>(*mlib));
    addFieldEx("sparseProperties", "sparseProperties", offsetof(ManagedType, sparseProperties), das::makeFieldType<decltype(das::declval<ManagedType>().sparseProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceProperties2Annotation : ManagedStructureAnnotation<VkPhysicalDeviceProperties2> {
  VkPhysicalDeviceProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("properties", "properties", offsetof(ManagedType, properties), das::makeFieldType<decltype(das::declval<ManagedType>().properties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_maintenance7)
struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLayeredApiVulkanPropertiesKHR> {
  VkPhysicalDeviceLayeredApiVulkanPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLayeredApiVulkanPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("properties", "properties", offsetof(ManagedType, properties), das::makeFieldType<decltype(das::declval<ManagedType>().properties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_MSFT_layered_driver)
struct VkPhysicalDeviceLayeredDriverPropertiesMSFTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLayeredDriverPropertiesMSFT> {
  VkPhysicalDeviceLayeredDriverPropertiesMSFTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLayeredDriverPropertiesMSFT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("underlyingAPI", "underlyingAPI", offsetof(ManagedType, underlyingAPI), das::makeFieldType<decltype(das::declval<ManagedType>().underlyingAPI)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_MSFT_layered_driver) */
#if defined(VK_EXT_legacy_dithering)
struct VkPhysicalDeviceLegacyDitheringFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLegacyDitheringFeaturesEXT> {
  VkPhysicalDeviceLegacyDitheringFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLegacyDitheringFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("legacyDithering", "legacyDithering", offsetof(ManagedType, legacyDithering), das::makeFieldType<decltype(das::declval<ManagedType>().legacyDithering)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_legacy_dithering) */
#if defined(VK_EXT_legacy_vertex_attributes)
struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT> {
  VkPhysicalDeviceLegacyVertexAttributesFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("legacyVertexAttributes", "legacyVertexAttributes", offsetof(ManagedType, legacyVertexAttributes), das::makeFieldType<decltype(das::declval<ManagedType>().legacyVertexAttributes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT> {
  VkPhysicalDeviceLegacyVertexAttributesPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("nativeUnalignedPerformance", "nativeUnalignedPerformance", offsetof(ManagedType, nativeUnalignedPerformance), das::makeFieldType<decltype(das::declval<ManagedType>().nativeUnalignedPerformance)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_legacy_vertex_attributes) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceLineRasterizationFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLineRasterizationFeatures> {
  VkPhysicalDeviceLineRasterizationFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLineRasterizationFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rectangularLines", "rectangularLines", offsetof(ManagedType, rectangularLines), das::makeFieldType<decltype(das::declval<ManagedType>().rectangularLines)>(*mlib));
    addFieldEx("bresenhamLines", "bresenhamLines", offsetof(ManagedType, bresenhamLines), das::makeFieldType<decltype(das::declval<ManagedType>().bresenhamLines)>(*mlib));
    addFieldEx("smoothLines", "smoothLines", offsetof(ManagedType, smoothLines), das::makeFieldType<decltype(das::declval<ManagedType>().smoothLines)>(*mlib));
    addFieldEx("stippledRectangularLines", "stippledRectangularLines", offsetof(ManagedType, stippledRectangularLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledRectangularLines)>(*mlib));
    addFieldEx("stippledBresenhamLines", "stippledBresenhamLines", offsetof(ManagedType, stippledBresenhamLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledBresenhamLines)>(*mlib));
    addFieldEx("stippledSmoothLines", "stippledSmoothLines", offsetof(ManagedType, stippledSmoothLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledSmoothLines)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceLineRasterizationPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLineRasterizationProperties> {
  VkPhysicalDeviceLineRasterizationPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLineRasterizationProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("lineSubPixelPrecisionBits", "lineSubPixelPrecisionBits", offsetof(ManagedType, lineSubPixelPrecisionBits), das::makeFieldType<decltype(das::declval<ManagedType>().lineSubPixelPrecisionBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_linear_color_attachment)
struct VkPhysicalDeviceLinearColorAttachmentFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceLinearColorAttachmentFeaturesNV> {
  VkPhysicalDeviceLinearColorAttachmentFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceLinearColorAttachmentFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("linearColorAttachment", "linearColorAttachment", offsetof(ManagedType, linearColorAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().linearColorAttachment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_linear_color_attachment) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceMaintenance3PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance3Properties> {
  VkPhysicalDeviceMaintenance3PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance3Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxPerSetDescriptors", "maxPerSetDescriptors", offsetof(ManagedType, maxPerSetDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerSetDescriptors)>(*mlib));
    addFieldEx("maxMemoryAllocationSize", "maxMemoryAllocationSize", offsetof(ManagedType, maxMemoryAllocationSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMemoryAllocationSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceMaintenance4FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance4Features> {
  VkPhysicalDeviceMaintenance4FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance4Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maintenance4", "maintenance4", offsetof(ManagedType, maintenance4), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance4)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMaintenance4PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance4Properties> {
  VkPhysicalDeviceMaintenance4PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance4Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxBufferSize", "maxBufferSize", offsetof(ManagedType, maxBufferSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxBufferSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceMaintenance5FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance5Features> {
  VkPhysicalDeviceMaintenance5FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance5Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maintenance5", "maintenance5", offsetof(ManagedType, maintenance5), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance5)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMaintenance5PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance5Properties> {
  VkPhysicalDeviceMaintenance5PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance5Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("earlyFragmentMultisampleCoverageAfterSampleCounting", "earlyFragmentMultisampleCoverageAfterSampleCounting", offsetof(ManagedType, earlyFragmentMultisampleCoverageAfterSampleCounting), das::makeFieldType<decltype(das::declval<ManagedType>().earlyFragmentMultisampleCoverageAfterSampleCounting)>(*mlib));
    addFieldEx("earlyFragmentSampleMaskTestBeforeSampleCounting", "earlyFragmentSampleMaskTestBeforeSampleCounting", offsetof(ManagedType, earlyFragmentSampleMaskTestBeforeSampleCounting), das::makeFieldType<decltype(das::declval<ManagedType>().earlyFragmentSampleMaskTestBeforeSampleCounting)>(*mlib));
    addFieldEx("depthStencilSwizzleOneSupport", "depthStencilSwizzleOneSupport", offsetof(ManagedType, depthStencilSwizzleOneSupport), das::makeFieldType<decltype(das::declval<ManagedType>().depthStencilSwizzleOneSupport)>(*mlib));
    addFieldEx("polygonModePointSize", "polygonModePointSize", offsetof(ManagedType, polygonModePointSize), das::makeFieldType<decltype(das::declval<ManagedType>().polygonModePointSize)>(*mlib));
    addFieldEx("nonStrictSinglePixelWideLinesUseParallelogram", "nonStrictSinglePixelWideLinesUseParallelogram", offsetof(ManagedType, nonStrictSinglePixelWideLinesUseParallelogram), das::makeFieldType<decltype(das::declval<ManagedType>().nonStrictSinglePixelWideLinesUseParallelogram)>(*mlib));
    addFieldEx("nonStrictWideLinesUseParallelogram", "nonStrictWideLinesUseParallelogram", offsetof(ManagedType, nonStrictWideLinesUseParallelogram), das::makeFieldType<decltype(das::declval<ManagedType>().nonStrictWideLinesUseParallelogram)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMaintenance6FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance6Features> {
  VkPhysicalDeviceMaintenance6FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance6Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maintenance6", "maintenance6", offsetof(ManagedType, maintenance6), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance6)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMaintenance6PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance6Properties> {
  VkPhysicalDeviceMaintenance6PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance6Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("blockTexelViewCompatibleMultipleLayers", "blockTexelViewCompatibleMultipleLayers", offsetof(ManagedType, blockTexelViewCompatibleMultipleLayers), das::makeFieldType<decltype(das::declval<ManagedType>().blockTexelViewCompatibleMultipleLayers)>(*mlib));
    addFieldEx("maxCombinedImageSamplerDescriptorCount", "maxCombinedImageSamplerDescriptorCount", offsetof(ManagedType, maxCombinedImageSamplerDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxCombinedImageSamplerDescriptorCount)>(*mlib));
    addFieldEx("fragmentShadingRateClampCombinerInputs", "fragmentShadingRateClampCombinerInputs", offsetof(ManagedType, fragmentShadingRateClampCombinerInputs), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateClampCombinerInputs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_maintenance7)
struct VkPhysicalDeviceMaintenance7FeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance7FeaturesKHR> {
  VkPhysicalDeviceMaintenance7FeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance7FeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maintenance7", "maintenance7", offsetof(ManagedType, maintenance7), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance7)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMaintenance7PropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMaintenance7PropertiesKHR> {
  VkPhysicalDeviceMaintenance7PropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMaintenance7PropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("robustFragmentShadingRateAttachmentAccess", "robustFragmentShadingRateAttachmentAccess", offsetof(ManagedType, robustFragmentShadingRateAttachmentAccess), das::makeFieldType<decltype(das::declval<ManagedType>().robustFragmentShadingRateAttachmentAccess)>(*mlib));
    addFieldEx("separateDepthStencilAttachmentAccess", "separateDepthStencilAttachmentAccess", offsetof(ManagedType, separateDepthStencilAttachmentAccess), das::makeFieldType<decltype(das::declval<ManagedType>().separateDepthStencilAttachmentAccess)>(*mlib));
    addFieldEx("maxDescriptorSetTotalUniformBuffersDynamic", "maxDescriptorSetTotalUniformBuffersDynamic", offsetof(ManagedType, maxDescriptorSetTotalUniformBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetTotalUniformBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetTotalStorageBuffersDynamic", "maxDescriptorSetTotalStorageBuffersDynamic", offsetof(ManagedType, maxDescriptorSetTotalStorageBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetTotalStorageBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetTotalBuffersDynamic", "maxDescriptorSetTotalBuffersDynamic", offsetof(ManagedType, maxDescriptorSetTotalBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetTotalBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic", "maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic", "maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindTotalBuffersDynamic", "maxDescriptorSetUpdateAfterBindTotalBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindTotalBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindTotalBuffersDynamic)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_EXT_map_memory_placed)
struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT> {
  VkPhysicalDeviceMapMemoryPlacedFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMapMemoryPlacedFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryMapPlaced", "memoryMapPlaced", offsetof(ManagedType, memoryMapPlaced), das::makeFieldType<decltype(das::declval<ManagedType>().memoryMapPlaced)>(*mlib));
    addFieldEx("memoryMapRangePlaced", "memoryMapRangePlaced", offsetof(ManagedType, memoryMapRangePlaced), das::makeFieldType<decltype(das::declval<ManagedType>().memoryMapRangePlaced)>(*mlib));
    addFieldEx("memoryUnmapReserve", "memoryUnmapReserve", offsetof(ManagedType, memoryUnmapReserve), das::makeFieldType<decltype(das::declval<ManagedType>().memoryUnmapReserve)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT> {
  VkPhysicalDeviceMapMemoryPlacedPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMapMemoryPlacedPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minPlacedMemoryMapAlignment", "minPlacedMemoryMapAlignment", offsetof(ManagedType, minPlacedMemoryMapAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minPlacedMemoryMapAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_map_memory_placed) */
#if defined(VK_EXT_memory_budget)
struct VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryBudgetPropertiesEXT> {
  VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryBudgetPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("heapBudget", "heapBudget", offsetof(ManagedType, heapBudget), das::makeFieldType<decltype(das::declval<ManagedType>().heapBudget)>(*mlib));
    addFieldEx("heapUsage", "heapUsage", offsetof(ManagedType, heapUsage), das::makeFieldType<decltype(das::declval<ManagedType>().heapUsage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_memory_budget) */
#if defined(VK_NV_memory_decompression)
struct VkPhysicalDeviceMemoryDecompressionFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryDecompressionFeaturesNV> {
  VkPhysicalDeviceMemoryDecompressionFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryDecompressionFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryDecompression", "memoryDecompression", offsetof(ManagedType, memoryDecompression), das::makeFieldType<decltype(das::declval<ManagedType>().memoryDecompression)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMemoryDecompressionPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryDecompressionPropertiesNV> {
  VkPhysicalDeviceMemoryDecompressionPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryDecompressionPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("decompressionMethods", "decompressionMethods", offsetof(ManagedType, decompressionMethods), das::makeFieldType<decltype(das::declval<ManagedType>().decompressionMethods)>(*mlib));
    addFieldEx("maxDecompressionIndirectCount", "maxDecompressionIndirectCount", offsetof(ManagedType, maxDecompressionIndirectCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxDecompressionIndirectCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_EXT_memory_priority)
struct VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryPriorityFeaturesEXT> {
  VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryPriorityFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryPriority", "memoryPriority", offsetof(ManagedType, memoryPriority), das::makeFieldType<decltype(das::declval<ManagedType>().memoryPriority)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_memory_priority) */
#if defined(VK_VERSION_1_0)
struct VkPhysicalDeviceMemoryPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryProperties> {
  VkPhysicalDeviceMemoryPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryProperties", lib) {
    addFieldEx("memoryTypeCount", "memoryTypeCount", offsetof(ManagedType, memoryTypeCount), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeCount)>(*mlib));
    addFieldEx("memoryTypes", "memoryTypes", offsetof(ManagedType, memoryTypes), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypes)>(*mlib));
    addFieldEx("memoryHeapCount", "memoryHeapCount", offsetof(ManagedType, memoryHeapCount), das::makeFieldType<decltype(das::declval<ManagedType>().memoryHeapCount)>(*mlib));
    addFieldEx("memoryHeaps", "memoryHeaps", offsetof(ManagedType, memoryHeaps), das::makeFieldType<decltype(das::declval<ManagedType>().memoryHeaps)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceMemoryProperties2Annotation : ManagedStructureAnnotation<VkPhysicalDeviceMemoryProperties2> {
  VkPhysicalDeviceMemoryProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMemoryProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryProperties", "memoryProperties", offsetof(ManagedType, memoryProperties), das::makeFieldType<decltype(das::declval<ManagedType>().memoryProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_mesh_shader)
struct VkPhysicalDeviceMeshShaderFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderFeaturesEXT> {
  VkPhysicalDeviceMeshShaderFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMeshShaderFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("taskShader", "taskShader", offsetof(ManagedType, taskShader), das::makeFieldType<decltype(das::declval<ManagedType>().taskShader)>(*mlib));
    addFieldEx("meshShader", "meshShader", offsetof(ManagedType, meshShader), das::makeFieldType<decltype(das::declval<ManagedType>().meshShader)>(*mlib));
    addFieldEx("multiviewMeshShader", "multiviewMeshShader", offsetof(ManagedType, multiviewMeshShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewMeshShader)>(*mlib));
    addFieldEx("primitiveFragmentShadingRateMeshShader", "primitiveFragmentShadingRateMeshShader", offsetof(ManagedType, primitiveFragmentShadingRateMeshShader), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveFragmentShadingRateMeshShader)>(*mlib));
    addFieldEx("meshShaderQueries", "meshShaderQueries", offsetof(ManagedType, meshShaderQueries), das::makeFieldType<decltype(das::declval<ManagedType>().meshShaderQueries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
struct VkPhysicalDeviceMeshShaderFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderFeaturesNV> {
  VkPhysicalDeviceMeshShaderFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMeshShaderFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("taskShader", "taskShader", offsetof(ManagedType, taskShader), das::makeFieldType<decltype(das::declval<ManagedType>().taskShader)>(*mlib));
    addFieldEx("meshShader", "meshShader", offsetof(ManagedType, meshShader), das::makeFieldType<decltype(das::declval<ManagedType>().meshShader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_mesh_shader)
struct VkPhysicalDeviceMeshShaderPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderPropertiesEXT> {
  VkPhysicalDeviceMeshShaderPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMeshShaderPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxTaskWorkGroupTotalCount", "maxTaskWorkGroupTotalCount", offsetof(ManagedType, maxTaskWorkGroupTotalCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupTotalCount)>(*mlib));
    addFieldEx("maxTaskWorkGroupCount", "maxTaskWorkGroupCount", offsetof(ManagedType, maxTaskWorkGroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupCount)>(*mlib));
    addFieldEx("maxTaskWorkGroupInvocations", "maxTaskWorkGroupInvocations", offsetof(ManagedType, maxTaskWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupInvocations)>(*mlib));
    addFieldEx("maxTaskWorkGroupSize", "maxTaskWorkGroupSize", offsetof(ManagedType, maxTaskWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupSize)>(*mlib));
    addFieldEx("maxTaskPayloadSize", "maxTaskPayloadSize", offsetof(ManagedType, maxTaskPayloadSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskPayloadSize)>(*mlib));
    addFieldEx("maxTaskSharedMemorySize", "maxTaskSharedMemorySize", offsetof(ManagedType, maxTaskSharedMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskSharedMemorySize)>(*mlib));
    addFieldEx("maxTaskPayloadAndSharedMemorySize", "maxTaskPayloadAndSharedMemorySize", offsetof(ManagedType, maxTaskPayloadAndSharedMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskPayloadAndSharedMemorySize)>(*mlib));
    addFieldEx("maxMeshWorkGroupTotalCount", "maxMeshWorkGroupTotalCount", offsetof(ManagedType, maxMeshWorkGroupTotalCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupTotalCount)>(*mlib));
    addFieldEx("maxMeshWorkGroupCount", "maxMeshWorkGroupCount", offsetof(ManagedType, maxMeshWorkGroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupCount)>(*mlib));
    addFieldEx("maxMeshWorkGroupInvocations", "maxMeshWorkGroupInvocations", offsetof(ManagedType, maxMeshWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupInvocations)>(*mlib));
    addFieldEx("maxMeshWorkGroupSize", "maxMeshWorkGroupSize", offsetof(ManagedType, maxMeshWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupSize)>(*mlib));
    addFieldEx("maxMeshSharedMemorySize", "maxMeshSharedMemorySize", offsetof(ManagedType, maxMeshSharedMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshSharedMemorySize)>(*mlib));
    addFieldEx("maxMeshPayloadAndSharedMemorySize", "maxMeshPayloadAndSharedMemorySize", offsetof(ManagedType, maxMeshPayloadAndSharedMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshPayloadAndSharedMemorySize)>(*mlib));
    addFieldEx("maxMeshOutputMemorySize", "maxMeshOutputMemorySize", offsetof(ManagedType, maxMeshOutputMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputMemorySize)>(*mlib));
    addFieldEx("maxMeshPayloadAndOutputMemorySize", "maxMeshPayloadAndOutputMemorySize", offsetof(ManagedType, maxMeshPayloadAndOutputMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshPayloadAndOutputMemorySize)>(*mlib));
    addFieldEx("maxMeshOutputComponents", "maxMeshOutputComponents", offsetof(ManagedType, maxMeshOutputComponents), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputComponents)>(*mlib));
    addFieldEx("maxMeshOutputVertices", "maxMeshOutputVertices", offsetof(ManagedType, maxMeshOutputVertices), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputVertices)>(*mlib));
    addFieldEx("maxMeshOutputPrimitives", "maxMeshOutputPrimitives", offsetof(ManagedType, maxMeshOutputPrimitives), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputPrimitives)>(*mlib));
    addFieldEx("maxMeshOutputLayers", "maxMeshOutputLayers", offsetof(ManagedType, maxMeshOutputLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputLayers)>(*mlib));
    addFieldEx("maxMeshMultiviewViewCount", "maxMeshMultiviewViewCount", offsetof(ManagedType, maxMeshMultiviewViewCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshMultiviewViewCount)>(*mlib));
    addFieldEx("meshOutputPerVertexGranularity", "meshOutputPerVertexGranularity", offsetof(ManagedType, meshOutputPerVertexGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().meshOutputPerVertexGranularity)>(*mlib));
    addFieldEx("meshOutputPerPrimitiveGranularity", "meshOutputPerPrimitiveGranularity", offsetof(ManagedType, meshOutputPerPrimitiveGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().meshOutputPerPrimitiveGranularity)>(*mlib));
    addFieldEx("maxPreferredTaskWorkGroupInvocations", "maxPreferredTaskWorkGroupInvocations", offsetof(ManagedType, maxPreferredTaskWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxPreferredTaskWorkGroupInvocations)>(*mlib));
    addFieldEx("maxPreferredMeshWorkGroupInvocations", "maxPreferredMeshWorkGroupInvocations", offsetof(ManagedType, maxPreferredMeshWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxPreferredMeshWorkGroupInvocations)>(*mlib));
    addFieldEx("prefersLocalInvocationVertexOutput", "prefersLocalInvocationVertexOutput", offsetof(ManagedType, prefersLocalInvocationVertexOutput), das::makeFieldType<decltype(das::declval<ManagedType>().prefersLocalInvocationVertexOutput)>(*mlib));
    addFieldEx("prefersLocalInvocationPrimitiveOutput", "prefersLocalInvocationPrimitiveOutput", offsetof(ManagedType, prefersLocalInvocationPrimitiveOutput), das::makeFieldType<decltype(das::declval<ManagedType>().prefersLocalInvocationPrimitiveOutput)>(*mlib));
    addFieldEx("prefersCompactVertexOutput", "prefersCompactVertexOutput", offsetof(ManagedType, prefersCompactVertexOutput), das::makeFieldType<decltype(das::declval<ManagedType>().prefersCompactVertexOutput)>(*mlib));
    addFieldEx("prefersCompactPrimitiveOutput", "prefersCompactPrimitiveOutput", offsetof(ManagedType, prefersCompactPrimitiveOutput), das::makeFieldType<decltype(das::declval<ManagedType>().prefersCompactPrimitiveOutput)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
struct VkPhysicalDeviceMeshShaderPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderPropertiesNV> {
  VkPhysicalDeviceMeshShaderPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMeshShaderPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxDrawMeshTasksCount", "maxDrawMeshTasksCount", offsetof(ManagedType, maxDrawMeshTasksCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxDrawMeshTasksCount)>(*mlib));
    addFieldEx("maxTaskWorkGroupInvocations", "maxTaskWorkGroupInvocations", offsetof(ManagedType, maxTaskWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupInvocations)>(*mlib));
    addFieldEx("maxTaskWorkGroupSize", "maxTaskWorkGroupSize", offsetof(ManagedType, maxTaskWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskWorkGroupSize)>(*mlib));
    addFieldEx("maxTaskTotalMemorySize", "maxTaskTotalMemorySize", offsetof(ManagedType, maxTaskTotalMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskTotalMemorySize)>(*mlib));
    addFieldEx("maxTaskOutputCount", "maxTaskOutputCount", offsetof(ManagedType, maxTaskOutputCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTaskOutputCount)>(*mlib));
    addFieldEx("maxMeshWorkGroupInvocations", "maxMeshWorkGroupInvocations", offsetof(ManagedType, maxMeshWorkGroupInvocations), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupInvocations)>(*mlib));
    addFieldEx("maxMeshWorkGroupSize", "maxMeshWorkGroupSize", offsetof(ManagedType, maxMeshWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshWorkGroupSize)>(*mlib));
    addFieldEx("maxMeshTotalMemorySize", "maxMeshTotalMemorySize", offsetof(ManagedType, maxMeshTotalMemorySize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshTotalMemorySize)>(*mlib));
    addFieldEx("maxMeshOutputVertices", "maxMeshOutputVertices", offsetof(ManagedType, maxMeshOutputVertices), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputVertices)>(*mlib));
    addFieldEx("maxMeshOutputPrimitives", "maxMeshOutputPrimitives", offsetof(ManagedType, maxMeshOutputPrimitives), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshOutputPrimitives)>(*mlib));
    addFieldEx("maxMeshMultiviewViewCount", "maxMeshMultiviewViewCount", offsetof(ManagedType, maxMeshMultiviewViewCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMeshMultiviewViewCount)>(*mlib));
    addFieldEx("meshOutputPerVertexGranularity", "meshOutputPerVertexGranularity", offsetof(ManagedType, meshOutputPerVertexGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().meshOutputPerVertexGranularity)>(*mlib));
    addFieldEx("meshOutputPerPrimitiveGranularity", "meshOutputPerPrimitiveGranularity", offsetof(ManagedType, meshOutputPerPrimitiveGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().meshOutputPerPrimitiveGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_multi_draw)
struct VkPhysicalDeviceMultiDrawFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiDrawFeaturesEXT> {
  VkPhysicalDeviceMultiDrawFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiDrawFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multiDraw", "multiDraw", offsetof(ManagedType, multiDraw), das::makeFieldType<decltype(das::declval<ManagedType>().multiDraw)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceMultiDrawPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiDrawPropertiesEXT> {
  VkPhysicalDeviceMultiDrawPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiDrawPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxMultiDrawCount", "maxMultiDrawCount", offsetof(ManagedType, maxMultiDrawCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMultiDrawCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT> {
  VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multisampledRenderToSingleSampled", "multisampledRenderToSingleSampled", offsetof(ManagedType, multisampledRenderToSingleSampled), das::makeFieldType<decltype(das::declval<ManagedType>().multisampledRenderToSingleSampled)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceMultiviewFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiviewFeatures> {
  VkPhysicalDeviceMultiviewFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiviewFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multiview", "multiview", offsetof(ManagedType, multiview), das::makeFieldType<decltype(das::declval<ManagedType>().multiview)>(*mlib));
    addFieldEx("multiviewGeometryShader", "multiviewGeometryShader", offsetof(ManagedType, multiviewGeometryShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewGeometryShader)>(*mlib));
    addFieldEx("multiviewTessellationShader", "multiviewTessellationShader", offsetof(ManagedType, multiviewTessellationShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewTessellationShader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NVX_multiview_per_view_attributes)
struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX> {
  VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("perViewPositionAllComponents", "perViewPositionAllComponents", offsetof(ManagedType, perViewPositionAllComponents), das::makeFieldType<decltype(das::declval<ManagedType>().perViewPositionAllComponents)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NVX_multiview_per_view_attributes) */
#if defined(VK_QCOM_multiview_per_view_render_areas)
struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM> {
  VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multiviewPerViewRenderAreas", "multiviewPerViewRenderAreas", offsetof(ManagedType, multiviewPerViewRenderAreas), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewPerViewRenderAreas)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_multiview_per_view_render_areas) */
#if defined(VK_QCOM_multiview_per_view_viewports)
struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM> {
  VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("multiviewPerViewViewports", "multiviewPerViewViewports", offsetof(ManagedType, multiviewPerViewViewports), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewPerViewViewports)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_multiview_per_view_viewports) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceMultiviewPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMultiviewProperties> {
  VkPhysicalDeviceMultiviewPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMultiviewProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxMultiviewViewCount", "maxMultiviewViewCount", offsetof(ManagedType, maxMultiviewViewCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMultiviewViewCount)>(*mlib));
    addFieldEx("maxMultiviewInstanceIndex", "maxMultiviewInstanceIndex", offsetof(ManagedType, maxMultiviewInstanceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().maxMultiviewInstanceIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_mutable_descriptor_type)
struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT> {
  VkPhysicalDeviceMutableDescriptorTypeFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("mutableDescriptorType", "mutableDescriptorType", offsetof(ManagedType, mutableDescriptorType), das::makeFieldType<decltype(das::declval<ManagedType>().mutableDescriptorType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_mutable_descriptor_type) */
#if defined(VK_EXT_nested_command_buffer)
struct VkPhysicalDeviceNestedCommandBufferFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceNestedCommandBufferFeaturesEXT> {
  VkPhysicalDeviceNestedCommandBufferFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceNestedCommandBufferFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("nestedCommandBuffer", "nestedCommandBuffer", offsetof(ManagedType, nestedCommandBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().nestedCommandBuffer)>(*mlib));
    addFieldEx("nestedCommandBufferRendering", "nestedCommandBufferRendering", offsetof(ManagedType, nestedCommandBufferRendering), das::makeFieldType<decltype(das::declval<ManagedType>().nestedCommandBufferRendering)>(*mlib));
    addFieldEx("nestedCommandBufferSimultaneousUse", "nestedCommandBufferSimultaneousUse", offsetof(ManagedType, nestedCommandBufferSimultaneousUse), das::makeFieldType<decltype(das::declval<ManagedType>().nestedCommandBufferSimultaneousUse)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceNestedCommandBufferPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceNestedCommandBufferPropertiesEXT> {
  VkPhysicalDeviceNestedCommandBufferPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceNestedCommandBufferPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxCommandBufferNestingLevel", "maxCommandBufferNestingLevel", offsetof(ManagedType, maxCommandBufferNestingLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxCommandBufferNestingLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_nested_command_buffer) */
#if defined(VK_EXT_non_seamless_cube_map)
struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT> {
  VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("nonSeamlessCubeMap", "nonSeamlessCubeMap", offsetof(ManagedType, nonSeamlessCubeMap), das::makeFieldType<decltype(das::declval<ManagedType>().nonSeamlessCubeMap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_non_seamless_cube_map) */
#if defined(VK_EXT_opacity_micromap)
struct VkPhysicalDeviceOpacityMicromapFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceOpacityMicromapFeaturesEXT> {
  VkPhysicalDeviceOpacityMicromapFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceOpacityMicromapFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("micromap", "micromap", offsetof(ManagedType, micromap), das::makeFieldType<decltype(das::declval<ManagedType>().micromap)>(*mlib));
    addFieldEx("micromapCaptureReplay", "micromapCaptureReplay", offsetof(ManagedType, micromapCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().micromapCaptureReplay)>(*mlib));
    addFieldEx("micromapHostCommands", "micromapHostCommands", offsetof(ManagedType, micromapHostCommands), das::makeFieldType<decltype(das::declval<ManagedType>().micromapHostCommands)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceOpacityMicromapPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceOpacityMicromapPropertiesEXT> {
  VkPhysicalDeviceOpacityMicromapPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceOpacityMicromapPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxOpacity2StateSubdivisionLevel", "maxOpacity2StateSubdivisionLevel", offsetof(ManagedType, maxOpacity2StateSubdivisionLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxOpacity2StateSubdivisionLevel)>(*mlib));
    addFieldEx("maxOpacity4StateSubdivisionLevel", "maxOpacity4StateSubdivisionLevel", offsetof(ManagedType, maxOpacity4StateSubdivisionLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxOpacity4StateSubdivisionLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NV_optical_flow)
struct VkPhysicalDeviceOpticalFlowFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceOpticalFlowFeaturesNV> {
  VkPhysicalDeviceOpticalFlowFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceOpticalFlowFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("opticalFlow", "opticalFlow", offsetof(ManagedType, opticalFlow), das::makeFieldType<decltype(das::declval<ManagedType>().opticalFlow)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceOpticalFlowPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceOpticalFlowPropertiesNV> {
  VkPhysicalDeviceOpticalFlowPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceOpticalFlowPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportedOutputGridSizes", "supportedOutputGridSizes", offsetof(ManagedType, supportedOutputGridSizes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedOutputGridSizes)>(*mlib));
    addFieldEx("supportedHintGridSizes", "supportedHintGridSizes", offsetof(ManagedType, supportedHintGridSizes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedHintGridSizes)>(*mlib));
    addFieldEx("hintSupported", "hintSupported", offsetof(ManagedType, hintSupported), das::makeFieldType<decltype(das::declval<ManagedType>().hintSupported)>(*mlib));
    addFieldEx("costSupported", "costSupported", offsetof(ManagedType, costSupported), das::makeFieldType<decltype(das::declval<ManagedType>().costSupported)>(*mlib));
    addFieldEx("bidirectionalFlowSupported", "bidirectionalFlowSupported", offsetof(ManagedType, bidirectionalFlowSupported), das::makeFieldType<decltype(das::declval<ManagedType>().bidirectionalFlowSupported)>(*mlib));
    addFieldEx("globalFlowSupported", "globalFlowSupported", offsetof(ManagedType, globalFlowSupported), das::makeFieldType<decltype(das::declval<ManagedType>().globalFlowSupported)>(*mlib));
    addFieldEx("minWidth", "minWidth", offsetof(ManagedType, minWidth), das::makeFieldType<decltype(das::declval<ManagedType>().minWidth)>(*mlib));
    addFieldEx("minHeight", "minHeight", offsetof(ManagedType, minHeight), das::makeFieldType<decltype(das::declval<ManagedType>().minHeight)>(*mlib));
    addFieldEx("maxWidth", "maxWidth", offsetof(ManagedType, maxWidth), das::makeFieldType<decltype(das::declval<ManagedType>().maxWidth)>(*mlib));
    addFieldEx("maxHeight", "maxHeight", offsetof(ManagedType, maxHeight), das::makeFieldType<decltype(das::declval<ManagedType>().maxHeight)>(*mlib));
    addFieldEx("maxNumRegionsOfInterest", "maxNumRegionsOfInterest", offsetof(ManagedType, maxNumRegionsOfInterest), das::makeFieldType<decltype(das::declval<ManagedType>().maxNumRegionsOfInterest)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_EXT_pci_bus_info)
struct VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePCIBusInfoPropertiesEXT> {
  VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePCIBusInfoPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pciDomain", "pciDomain", offsetof(ManagedType, pciDomain), das::makeFieldType<decltype(das::declval<ManagedType>().pciDomain)>(*mlib));
    addFieldEx("pciBus", "pciBus", offsetof(ManagedType, pciBus), das::makeFieldType<decltype(das::declval<ManagedType>().pciBus)>(*mlib));
    addFieldEx("pciDevice", "pciDevice", offsetof(ManagedType, pciDevice), das::makeFieldType<decltype(das::declval<ManagedType>().pciDevice)>(*mlib));
    addFieldEx("pciFunction", "pciFunction", offsetof(ManagedType, pciFunction), das::makeFieldType<decltype(das::declval<ManagedType>().pciFunction)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_pci_bus_info) */
#if defined(VK_EXT_pageable_device_local_memory)
struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT> {
  VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pageableDeviceLocalMemory", "pageableDeviceLocalMemory", offsetof(ManagedType, pageableDeviceLocalMemory), das::makeFieldType<decltype(das::declval<ManagedType>().pageableDeviceLocalMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_NV_per_stage_descriptor_set)
struct VkPhysicalDevicePerStageDescriptorSetFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePerStageDescriptorSetFeaturesNV> {
  VkPhysicalDevicePerStageDescriptorSetFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePerStageDescriptorSetFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("perStageDescriptorSet", "perStageDescriptorSet", offsetof(ManagedType, perStageDescriptorSet), das::makeFieldType<decltype(das::declval<ManagedType>().perStageDescriptorSet)>(*mlib));
    addFieldEx("dynamicPipelineLayout", "dynamicPipelineLayout", offsetof(ManagedType, dynamicPipelineLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicPipelineLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_per_stage_descriptor_set) */
#if defined(VK_KHR_performance_query)
struct VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryFeaturesKHR> {
  VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePerformanceQueryFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("performanceCounterQueryPools", "performanceCounterQueryPools", offsetof(ManagedType, performanceCounterQueryPools), das::makeFieldType<decltype(das::declval<ManagedType>().performanceCounterQueryPools)>(*mlib));
    addFieldEx("performanceCounterMultipleQueryPools", "performanceCounterMultipleQueryPools", offsetof(ManagedType, performanceCounterMultipleQueryPools), das::makeFieldType<decltype(das::declval<ManagedType>().performanceCounterMultipleQueryPools)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryPropertiesKHR> {
  VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePerformanceQueryPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("allowCommandBufferQueryCopies", "allowCommandBufferQueryCopies", offsetof(ManagedType, allowCommandBufferQueryCopies), das::makeFieldType<decltype(das::declval<ManagedType>().allowCommandBufferQueryCopies)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_binary)
struct VkPhysicalDevicePipelineBinaryFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineBinaryFeaturesKHR> {
  VkPhysicalDevicePipelineBinaryFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineBinaryFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBinaries", "pipelineBinaries", offsetof(ManagedType, pipelineBinaries), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePipelineBinaryPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineBinaryPropertiesKHR> {
  VkPhysicalDevicePipelineBinaryPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineBinaryPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBinaryInternalCache", "pipelineBinaryInternalCache", offsetof(ManagedType, pipelineBinaryInternalCache), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryInternalCache)>(*mlib));
    addFieldEx("pipelineBinaryInternalCacheControl", "pipelineBinaryInternalCacheControl", offsetof(ManagedType, pipelineBinaryInternalCacheControl), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryInternalCacheControl)>(*mlib));
    addFieldEx("pipelineBinaryPrefersInternalCache", "pipelineBinaryPrefersInternalCache", offsetof(ManagedType, pipelineBinaryPrefersInternalCache), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryPrefersInternalCache)>(*mlib));
    addFieldEx("pipelineBinaryPrecompiledInternalCache", "pipelineBinaryPrecompiledInternalCache", offsetof(ManagedType, pipelineBinaryPrecompiledInternalCache), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryPrecompiledInternalCache)>(*mlib));
    addFieldEx("pipelineBinaryCompressedData", "pipelineBinaryCompressedData", offsetof(ManagedType, pipelineBinaryCompressedData), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryCompressedData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDevicePipelineCreationCacheControlFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineCreationCacheControlFeatures> {
  VkPhysicalDevicePipelineCreationCacheControlFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineCreationCacheControlFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineCreationCacheControl", "pipelineCreationCacheControl", offsetof(ManagedType, pipelineCreationCacheControl), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCreationCacheControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_pipeline_executable_properties)
struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR> {
  VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineExecutableInfo", "pipelineExecutableInfo", offsetof(ManagedType, pipelineExecutableInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineExecutableInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_EXT_pipeline_library_group_handles)
struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT> {
  VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineLibraryGroupHandles", "pipelineLibraryGroupHandles", offsetof(ManagedType, pipelineLibraryGroupHandles), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineLibraryGroupHandles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_pipeline_library_group_handles) */
#if defined(VK_EXT_pipeline_properties)
struct VkPhysicalDevicePipelinePropertiesFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelinePropertiesFeaturesEXT> {
  VkPhysicalDevicePipelinePropertiesFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelinePropertiesFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelinePropertiesIdentifier", "pipelinePropertiesIdentifier", offsetof(ManagedType, pipelinePropertiesIdentifier), das::makeFieldType<decltype(das::declval<ManagedType>().pipelinePropertiesIdentifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDevicePipelineProtectedAccessFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineProtectedAccessFeatures> {
  VkPhysicalDevicePipelineProtectedAccessFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineProtectedAccessFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineProtectedAccess", "pipelineProtectedAccess", offsetof(ManagedType, pipelineProtectedAccess), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineProtectedAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePipelineRobustnessFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineRobustnessFeatures> {
  VkPhysicalDevicePipelineRobustnessFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineRobustnessFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineRobustness", "pipelineRobustness", offsetof(ManagedType, pipelineRobustness), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineRobustness)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePipelineRobustnessPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePipelineRobustnessProperties> {
  VkPhysicalDevicePipelineRobustnessPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePipelineRobustnessProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("defaultRobustnessStorageBuffers", "defaultRobustnessStorageBuffers", offsetof(ManagedType, defaultRobustnessStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessStorageBuffers)>(*mlib));
    addFieldEx("defaultRobustnessUniformBuffers", "defaultRobustnessUniformBuffers", offsetof(ManagedType, defaultRobustnessUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessUniformBuffers)>(*mlib));
    addFieldEx("defaultRobustnessVertexInputs", "defaultRobustnessVertexInputs", offsetof(ManagedType, defaultRobustnessVertexInputs), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessVertexInputs)>(*mlib));
    addFieldEx("defaultRobustnessImages", "defaultRobustnessImages", offsetof(ManagedType, defaultRobustnessImages), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessImages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDevicePointClippingPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePointClippingProperties> {
  VkPhysicalDevicePointClippingPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePointClippingProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pointClippingBehavior", "pointClippingBehavior", offsetof(ManagedType, pointClippingBehavior), das::makeFieldType<decltype(das::declval<ManagedType>().pointClippingBehavior)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_portability_subset)
struct VkPhysicalDevicePortabilitySubsetFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePortabilitySubsetFeaturesKHR> {
  VkPhysicalDevicePortabilitySubsetFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePortabilitySubsetFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("constantAlphaColorBlendFactors", "constantAlphaColorBlendFactors", offsetof(ManagedType, constantAlphaColorBlendFactors), das::makeFieldType<decltype(das::declval<ManagedType>().constantAlphaColorBlendFactors)>(*mlib));
    addFieldEx("events", "events", offsetof(ManagedType, events), das::makeFieldType<decltype(das::declval<ManagedType>().events)>(*mlib));
    addFieldEx("imageViewFormatReinterpretation", "imageViewFormatReinterpretation", offsetof(ManagedType, imageViewFormatReinterpretation), das::makeFieldType<decltype(das::declval<ManagedType>().imageViewFormatReinterpretation)>(*mlib));
    addFieldEx("imageViewFormatSwizzle", "imageViewFormatSwizzle", offsetof(ManagedType, imageViewFormatSwizzle), das::makeFieldType<decltype(das::declval<ManagedType>().imageViewFormatSwizzle)>(*mlib));
    addFieldEx("imageView2DOn3DImage", "imageView2DOn3DImage", offsetof(ManagedType, imageView2DOn3DImage), das::makeFieldType<decltype(das::declval<ManagedType>().imageView2DOn3DImage)>(*mlib));
    addFieldEx("multisampleArrayImage", "multisampleArrayImage", offsetof(ManagedType, multisampleArrayImage), das::makeFieldType<decltype(das::declval<ManagedType>().multisampleArrayImage)>(*mlib));
    addFieldEx("mutableComparisonSamplers", "mutableComparisonSamplers", offsetof(ManagedType, mutableComparisonSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().mutableComparisonSamplers)>(*mlib));
    addFieldEx("pointPolygons", "pointPolygons", offsetof(ManagedType, pointPolygons), das::makeFieldType<decltype(das::declval<ManagedType>().pointPolygons)>(*mlib));
    addFieldEx("samplerMipLodBias", "samplerMipLodBias", offsetof(ManagedType, samplerMipLodBias), das::makeFieldType<decltype(das::declval<ManagedType>().samplerMipLodBias)>(*mlib));
    addFieldEx("separateStencilMaskRef", "separateStencilMaskRef", offsetof(ManagedType, separateStencilMaskRef), das::makeFieldType<decltype(das::declval<ManagedType>().separateStencilMaskRef)>(*mlib));
    addFieldEx("shaderSampleRateInterpolationFunctions", "shaderSampleRateInterpolationFunctions", offsetof(ManagedType, shaderSampleRateInterpolationFunctions), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampleRateInterpolationFunctions)>(*mlib));
    addFieldEx("tessellationIsolines", "tessellationIsolines", offsetof(ManagedType, tessellationIsolines), das::makeFieldType<decltype(das::declval<ManagedType>().tessellationIsolines)>(*mlib));
    addFieldEx("tessellationPointMode", "tessellationPointMode", offsetof(ManagedType, tessellationPointMode), das::makeFieldType<decltype(das::declval<ManagedType>().tessellationPointMode)>(*mlib));
    addFieldEx("triangleFans", "triangleFans", offsetof(ManagedType, triangleFans), das::makeFieldType<decltype(das::declval<ManagedType>().triangleFans)>(*mlib));
    addFieldEx("vertexAttributeAccessBeyondStride", "vertexAttributeAccessBeyondStride", offsetof(ManagedType, vertexAttributeAccessBeyondStride), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeAccessBeyondStride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDevicePortabilitySubsetPropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePortabilitySubsetPropertiesKHR> {
  VkPhysicalDevicePortabilitySubsetPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePortabilitySubsetPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minVertexInputBindingStrideAlignment", "minVertexInputBindingStrideAlignment", offsetof(ManagedType, minVertexInputBindingStrideAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minVertexInputBindingStrideAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_portability_subset) */
#if defined(VK_NV_present_barrier)
struct VkPhysicalDevicePresentBarrierFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePresentBarrierFeaturesNV> {
  VkPhysicalDevicePresentBarrierFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePresentBarrierFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentBarrier", "presentBarrier", offsetof(ManagedType, presentBarrier), das::makeFieldType<decltype(das::declval<ManagedType>().presentBarrier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_KHR_present_id)
struct VkPhysicalDevicePresentIdFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePresentIdFeaturesKHR> {
  VkPhysicalDevicePresentIdFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePresentIdFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentId", "presentId", offsetof(ManagedType, presentId), das::makeFieldType<decltype(das::declval<ManagedType>().presentId)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_present_id) */
#if defined(VK_EXT_present_mode_fifo_latest_ready)
struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT> {
  VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentModeFifoLatestReady", "presentModeFifoLatestReady", offsetof(ManagedType, presentModeFifoLatestReady), das::makeFieldType<decltype(das::declval<ManagedType>().presentModeFifoLatestReady)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_present_mode_fifo_latest_ready) */
#if defined(VK_KHR_present_wait)
struct VkPhysicalDevicePresentWaitFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePresentWaitFeaturesKHR> {
  VkPhysicalDevicePresentWaitFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePresentWaitFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentWait", "presentWait", offsetof(ManagedType, presentWait), das::makeFieldType<decltype(das::declval<ManagedType>().presentWait)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_EXT_primitive_topology_list_restart)
struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT> {
  VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("primitiveTopologyListRestart", "primitiveTopologyListRestart", offsetof(ManagedType, primitiveTopologyListRestart), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveTopologyListRestart)>(*mlib));
    addFieldEx("primitiveTopologyPatchListRestart", "primitiveTopologyPatchListRestart", offsetof(ManagedType, primitiveTopologyPatchListRestart), das::makeFieldType<decltype(das::declval<ManagedType>().primitiveTopologyPatchListRestart)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_primitive_topology_list_restart) */
#if defined(VK_EXT_primitives_generated_query)
struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT> {
  VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("primitivesGeneratedQuery", "primitivesGeneratedQuery", offsetof(ManagedType, primitivesGeneratedQuery), das::makeFieldType<decltype(das::declval<ManagedType>().primitivesGeneratedQuery)>(*mlib));
    addFieldEx("primitivesGeneratedQueryWithRasterizerDiscard", "primitivesGeneratedQueryWithRasterizerDiscard", offsetof(ManagedType, primitivesGeneratedQueryWithRasterizerDiscard), das::makeFieldType<decltype(das::declval<ManagedType>().primitivesGeneratedQueryWithRasterizerDiscard)>(*mlib));
    addFieldEx("primitivesGeneratedQueryWithNonZeroStreams", "primitivesGeneratedQueryWithNonZeroStreams", offsetof(ManagedType, primitivesGeneratedQueryWithNonZeroStreams), das::makeFieldType<decltype(das::declval<ManagedType>().primitivesGeneratedQueryWithNonZeroStreams)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_primitives_generated_query) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDevicePrivateDataFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePrivateDataFeatures> {
  VkPhysicalDevicePrivateDataFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePrivateDataFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("privateData", "privateData", offsetof(ManagedType, privateData), das::makeFieldType<decltype(das::declval<ManagedType>().privateData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceProtectedMemoryFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceProtectedMemoryFeatures> {
  VkPhysicalDeviceProtectedMemoryFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProtectedMemoryFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("protectedMemory", "protectedMemory", offsetof(ManagedType, protectedMemory), das::makeFieldType<decltype(das::declval<ManagedType>().protectedMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceProtectedMemoryPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceProtectedMemoryProperties> {
  VkPhysicalDeviceProtectedMemoryPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProtectedMemoryProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("protectedNoFault", "protectedNoFault", offsetof(ManagedType, protectedNoFault), das::makeFieldType<decltype(das::declval<ManagedType>().protectedNoFault)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_provoking_vertex)
struct VkPhysicalDeviceProvokingVertexFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceProvokingVertexFeaturesEXT> {
  VkPhysicalDeviceProvokingVertexFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProvokingVertexFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("provokingVertexLast", "provokingVertexLast", offsetof(ManagedType, provokingVertexLast), das::makeFieldType<decltype(das::declval<ManagedType>().provokingVertexLast)>(*mlib));
    addFieldEx("transformFeedbackPreservesProvokingVertex", "transformFeedbackPreservesProvokingVertex", offsetof(ManagedType, transformFeedbackPreservesProvokingVertex), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackPreservesProvokingVertex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceProvokingVertexPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceProvokingVertexPropertiesEXT> {
  VkPhysicalDeviceProvokingVertexPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceProvokingVertexPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("provokingVertexModePerPipeline", "provokingVertexModePerPipeline", offsetof(ManagedType, provokingVertexModePerPipeline), das::makeFieldType<decltype(das::declval<ManagedType>().provokingVertexModePerPipeline)>(*mlib));
    addFieldEx("transformFeedbackPreservesTriangleFanProvokingVertex", "transformFeedbackPreservesTriangleFanProvokingVertex", offsetof(ManagedType, transformFeedbackPreservesTriangleFanProvokingVertex), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackPreservesTriangleFanProvokingVertex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_provoking_vertex) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDevicePushDescriptorPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDevicePushDescriptorProperties> {
  VkPhysicalDevicePushDescriptorPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDevicePushDescriptorProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxPushDescriptors", "maxPushDescriptors", offsetof(ManagedType, maxPushDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().maxPushDescriptors)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_rgba10x6_formats)
struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT> {
  VkPhysicalDeviceRGBA10X6FormatsFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("formatRgba10x6WithoutYCbCrSampler", "formatRgba10x6WithoutYCbCrSampler", offsetof(ManagedType, formatRgba10x6WithoutYCbCrSampler), das::makeFieldType<decltype(das::declval<ManagedType>().formatRgba10x6WithoutYCbCrSampler)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_rgba10x6_formats) */
#if defined(VK_EXT_rasterization_order_attachment_access)
struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT> {
  VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rasterizationOrderColorAttachmentAccess", "rasterizationOrderColorAttachmentAccess", offsetof(ManagedType, rasterizationOrderColorAttachmentAccess), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationOrderColorAttachmentAccess)>(*mlib));
    addFieldEx("rasterizationOrderDepthAttachmentAccess", "rasterizationOrderDepthAttachmentAccess", offsetof(ManagedType, rasterizationOrderDepthAttachmentAccess), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationOrderDepthAttachmentAccess)>(*mlib));
    addFieldEx("rasterizationOrderStencilAttachmentAccess", "rasterizationOrderStencilAttachmentAccess", offsetof(ManagedType, rasterizationOrderStencilAttachmentAccess), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationOrderStencilAttachmentAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_rasterization_order_attachment_access) */
#if defined(VK_NV_raw_access_chains)
struct VkPhysicalDeviceRawAccessChainsFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRawAccessChainsFeaturesNV> {
  VkPhysicalDeviceRawAccessChainsFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRawAccessChainsFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderRawAccessChains", "shaderRawAccessChains", offsetof(ManagedType, shaderRawAccessChains), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRawAccessChains)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_raw_access_chains) */
#if defined(VK_KHR_ray_query)
struct VkPhysicalDeviceRayQueryFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayQueryFeaturesKHR> {
  VkPhysicalDeviceRayQueryFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayQueryFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayQuery", "rayQuery", offsetof(ManagedType, rayQuery), das::makeFieldType<decltype(das::declval<ManagedType>().rayQuery)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_query) */
#if defined(VK_NV_ray_tracing_invocation_reorder)
struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV> {
  VkPhysicalDeviceRayTracingInvocationReorderFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingInvocationReorder", "rayTracingInvocationReorder", offsetof(ManagedType, rayTracingInvocationReorder), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingInvocationReorder)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV> {
  VkPhysicalDeviceRayTracingInvocationReorderPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingInvocationReorderReorderingHint", "rayTracingInvocationReorderReorderingHint", offsetof(ManagedType, rayTracingInvocationReorderReorderingHint), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingInvocationReorderReorderingHint)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_invocation_reorder) */
#if defined(VK_KHR_ray_tracing_maintenance1)
struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR> {
  VkPhysicalDeviceRayTracingMaintenance1FeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingMaintenance1", "rayTracingMaintenance1", offsetof(ManagedType, rayTracingMaintenance1), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingMaintenance1)>(*mlib));
    addFieldEx("rayTracingPipelineTraceRaysIndirect2", "rayTracingPipelineTraceRaysIndirect2", offsetof(ManagedType, rayTracingPipelineTraceRaysIndirect2), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPipelineTraceRaysIndirect2)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_maintenance1) */
#if defined(VK_NV_ray_tracing_motion_blur)
struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV> {
  VkPhysicalDeviceRayTracingMotionBlurFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingMotionBlurFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingMotionBlur", "rayTracingMotionBlur", offsetof(ManagedType, rayTracingMotionBlur), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingMotionBlur)>(*mlib));
    addFieldEx("rayTracingMotionBlurPipelineTraceRaysIndirect", "rayTracingMotionBlurPipelineTraceRaysIndirect", offsetof(ManagedType, rayTracingMotionBlurPipelineTraceRaysIndirect), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingMotionBlurPipelineTraceRaysIndirect)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_KHR_ray_tracing_pipeline)
struct VkPhysicalDeviceRayTracingPipelineFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPipelineFeaturesKHR> {
  VkPhysicalDeviceRayTracingPipelineFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingPipelineFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingPipeline", "rayTracingPipeline", offsetof(ManagedType, rayTracingPipeline), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPipeline)>(*mlib));
    addFieldEx("rayTracingPipelineShaderGroupHandleCaptureReplay", "rayTracingPipelineShaderGroupHandleCaptureReplay", offsetof(ManagedType, rayTracingPipelineShaderGroupHandleCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPipelineShaderGroupHandleCaptureReplay)>(*mlib));
    addFieldEx("rayTracingPipelineShaderGroupHandleCaptureReplayMixed", "rayTracingPipelineShaderGroupHandleCaptureReplayMixed", offsetof(ManagedType, rayTracingPipelineShaderGroupHandleCaptureReplayMixed), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPipelineShaderGroupHandleCaptureReplayMixed)>(*mlib));
    addFieldEx("rayTracingPipelineTraceRaysIndirect", "rayTracingPipelineTraceRaysIndirect", offsetof(ManagedType, rayTracingPipelineTraceRaysIndirect), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPipelineTraceRaysIndirect)>(*mlib));
    addFieldEx("rayTraversalPrimitiveCulling", "rayTraversalPrimitiveCulling", offsetof(ManagedType, rayTraversalPrimitiveCulling), das::makeFieldType<decltype(das::declval<ManagedType>().rayTraversalPrimitiveCulling)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceRayTracingPipelinePropertiesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPipelinePropertiesKHR> {
  VkPhysicalDeviceRayTracingPipelinePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingPipelinePropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderGroupHandleSize", "shaderGroupHandleSize", offsetof(ManagedType, shaderGroupHandleSize), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupHandleSize)>(*mlib));
    addFieldEx("maxRayRecursionDepth", "maxRayRecursionDepth", offsetof(ManagedType, maxRayRecursionDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxRayRecursionDepth)>(*mlib));
    addFieldEx("maxShaderGroupStride", "maxShaderGroupStride", offsetof(ManagedType, maxShaderGroupStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxShaderGroupStride)>(*mlib));
    addFieldEx("shaderGroupBaseAlignment", "shaderGroupBaseAlignment", offsetof(ManagedType, shaderGroupBaseAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupBaseAlignment)>(*mlib));
    addFieldEx("shaderGroupHandleCaptureReplaySize", "shaderGroupHandleCaptureReplaySize", offsetof(ManagedType, shaderGroupHandleCaptureReplaySize), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupHandleCaptureReplaySize)>(*mlib));
    addFieldEx("maxRayDispatchInvocationCount", "maxRayDispatchInvocationCount", offsetof(ManagedType, maxRayDispatchInvocationCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxRayDispatchInvocationCount)>(*mlib));
    addFieldEx("shaderGroupHandleAlignment", "shaderGroupHandleAlignment", offsetof(ManagedType, shaderGroupHandleAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupHandleAlignment)>(*mlib));
    addFieldEx("maxRayHitAttributeSize", "maxRayHitAttributeSize", offsetof(ManagedType, maxRayHitAttributeSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxRayHitAttributeSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_position_fetch)
struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR> {
  VkPhysicalDeviceRayTracingPositionFetchFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingPositionFetch", "rayTracingPositionFetch", offsetof(ManagedType, rayTracingPositionFetch), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingPositionFetch)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_position_fetch) */
#if defined(VK_NV_ray_tracing)
struct VkPhysicalDeviceRayTracingPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPropertiesNV> {
  VkPhysicalDeviceRayTracingPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderGroupHandleSize", "shaderGroupHandleSize", offsetof(ManagedType, shaderGroupHandleSize), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupHandleSize)>(*mlib));
    addFieldEx("maxRecursionDepth", "maxRecursionDepth", offsetof(ManagedType, maxRecursionDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxRecursionDepth)>(*mlib));
    addFieldEx("maxShaderGroupStride", "maxShaderGroupStride", offsetof(ManagedType, maxShaderGroupStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxShaderGroupStride)>(*mlib));
    addFieldEx("shaderGroupBaseAlignment", "shaderGroupBaseAlignment", offsetof(ManagedType, shaderGroupBaseAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().shaderGroupBaseAlignment)>(*mlib));
    addFieldEx("maxGeometryCount", "maxGeometryCount", offsetof(ManagedType, maxGeometryCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxGeometryCount)>(*mlib));
    addFieldEx("maxInstanceCount", "maxInstanceCount", offsetof(ManagedType, maxInstanceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxInstanceCount)>(*mlib));
    addFieldEx("maxTriangleCount", "maxTriangleCount", offsetof(ManagedType, maxTriangleCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTriangleCount)>(*mlib));
    addFieldEx("maxDescriptorSetAccelerationStructures", "maxDescriptorSetAccelerationStructures", offsetof(ManagedType, maxDescriptorSetAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetAccelerationStructures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_ray_tracing_validation)
struct VkPhysicalDeviceRayTracingValidationFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRayTracingValidationFeaturesNV> {
  VkPhysicalDeviceRayTracingValidationFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRayTracingValidationFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rayTracingValidation", "rayTracingValidation", offsetof(ManagedType, rayTracingValidation), das::makeFieldType<decltype(das::declval<ManagedType>().rayTracingValidation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_validation) */
#if defined(VK_IMG_relaxed_line_rasterization)
struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMGAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG> {
  VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMGAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("relaxedLineRasterization", "relaxedLineRasterization", offsetof(ManagedType, relaxedLineRasterization), das::makeFieldType<decltype(das::declval<ManagedType>().relaxedLineRasterization)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_IMG_relaxed_line_rasterization) */
#if defined(VK_ARM_render_pass_striped)
struct VkPhysicalDeviceRenderPassStripedFeaturesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRenderPassStripedFeaturesARM> {
  VkPhysicalDeviceRenderPassStripedFeaturesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRenderPassStripedFeaturesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("renderPassStriped", "renderPassStriped", offsetof(ManagedType, renderPassStriped), das::makeFieldType<decltype(das::declval<ManagedType>().renderPassStriped)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceRenderPassStripedPropertiesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRenderPassStripedPropertiesARM> {
  VkPhysicalDeviceRenderPassStripedPropertiesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRenderPassStripedPropertiesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("renderPassStripeGranularity", "renderPassStripeGranularity", offsetof(ManagedType, renderPassStripeGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().renderPassStripeGranularity)>(*mlib));
    addFieldEx("maxRenderPassStripes", "maxRenderPassStripes", offsetof(ManagedType, maxRenderPassStripes), das::makeFieldType<decltype(das::declval<ManagedType>().maxRenderPassStripes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_NV_representative_fragment_test)
struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV> {
  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("representativeFragmentTest", "representativeFragmentTest", offsetof(ManagedType, representativeFragmentTest), das::makeFieldType<decltype(das::declval<ManagedType>().representativeFragmentTest)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_representative_fragment_test) */
#if defined(VK_EXT_robustness2)
struct VkPhysicalDeviceRobustness2FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRobustness2FeaturesEXT> {
  VkPhysicalDeviceRobustness2FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRobustness2FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("robustBufferAccess2", "robustBufferAccess2", offsetof(ManagedType, robustBufferAccess2), das::makeFieldType<decltype(das::declval<ManagedType>().robustBufferAccess2)>(*mlib));
    addFieldEx("robustImageAccess2", "robustImageAccess2", offsetof(ManagedType, robustImageAccess2), das::makeFieldType<decltype(das::declval<ManagedType>().robustImageAccess2)>(*mlib));
    addFieldEx("nullDescriptor", "nullDescriptor", offsetof(ManagedType, nullDescriptor), das::makeFieldType<decltype(das::declval<ManagedType>().nullDescriptor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceRobustness2PropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceRobustness2PropertiesEXT> {
  VkPhysicalDeviceRobustness2PropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceRobustness2PropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("robustStorageBufferAccessSizeAlignment", "robustStorageBufferAccessSizeAlignment", offsetof(ManagedType, robustStorageBufferAccessSizeAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().robustStorageBufferAccessSizeAlignment)>(*mlib));
    addFieldEx("robustUniformBufferAccessSizeAlignment", "robustUniformBufferAccessSizeAlignment", offsetof(ManagedType, robustUniformBufferAccessSizeAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().robustUniformBufferAccessSizeAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_robustness2) */
#if defined(VK_EXT_sample_locations)
struct VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSampleLocationsPropertiesEXT> {
  VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSampleLocationsPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampleLocationSampleCounts", "sampleLocationSampleCounts", offsetof(ManagedType, sampleLocationSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationSampleCounts)>(*mlib));
    addFieldEx("maxSampleLocationGridSize", "maxSampleLocationGridSize", offsetof(ManagedType, maxSampleLocationGridSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxSampleLocationGridSize)>(*mlib));
    addFieldEx("sampleLocationCoordinateRange", "sampleLocationCoordinateRange", offsetof(ManagedType, sampleLocationCoordinateRange), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationCoordinateRange)>(*mlib));
    addFieldEx("sampleLocationSubPixelBits", "sampleLocationSubPixelBits", offsetof(ManagedType, sampleLocationSubPixelBits), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationSubPixelBits)>(*mlib));
    addFieldEx("variableSampleLocations", "variableSampleLocations", offsetof(ManagedType, variableSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().variableSampleLocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSamplerFilterMinmaxProperties> {
  VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSamplerFilterMinmaxProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("filterMinmaxSingleComponentFormats", "filterMinmaxSingleComponentFormats", offsetof(ManagedType, filterMinmaxSingleComponentFormats), das::makeFieldType<decltype(das::declval<ManagedType>().filterMinmaxSingleComponentFormats)>(*mlib));
    addFieldEx("filterMinmaxImageComponentMapping", "filterMinmaxImageComponentMapping", offsetof(ManagedType, filterMinmaxImageComponentMapping), das::makeFieldType<decltype(das::declval<ManagedType>().filterMinmaxImageComponentMapping)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSamplerYcbcrConversionFeatures> {
  VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSamplerYcbcrConversionFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("samplerYcbcrConversion", "samplerYcbcrConversion", offsetof(ManagedType, samplerYcbcrConversion), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceScalarBlockLayoutFeatures> {
  VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceScalarBlockLayoutFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("scalarBlockLayout", "scalarBlockLayout", offsetof(ManagedType, scalarBlockLayout), das::makeFieldType<decltype(das::declval<ManagedType>().scalarBlockLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_ARM_scheduling_controls)
struct VkPhysicalDeviceSchedulingControlsFeaturesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSchedulingControlsFeaturesARM> {
  VkPhysicalDeviceSchedulingControlsFeaturesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSchedulingControlsFeaturesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("schedulingControls", "schedulingControls", offsetof(ManagedType, schedulingControls), das::makeFieldType<decltype(das::declval<ManagedType>().schedulingControls)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceSchedulingControlsPropertiesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSchedulingControlsPropertiesARM> {
  VkPhysicalDeviceSchedulingControlsPropertiesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSchedulingControlsPropertiesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("schedulingControlsFlags", "schedulingControlsFlags", offsetof(ManagedType, schedulingControlsFlags), das::makeFieldType<decltype(das::declval<ManagedType>().schedulingControlsFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_scheduling_controls) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures> {
  VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("separateDepthStencilLayouts", "separateDepthStencilLayouts", offsetof(ManagedType, separateDepthStencilLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().separateDepthStencilLayouts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_shader_atomic_float16_vector)
struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV> {
  VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderFloat16VectorAtomics", "shaderFloat16VectorAtomics", offsetof(ManagedType, shaderFloat16VectorAtomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloat16VectorAtomics)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shader_atomic_float16_vector) */
#if defined(VK_EXT_shader_atomic_float2)
struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT> {
  VkPhysicalDeviceShaderAtomicFloat2FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderBufferFloat16Atomics", "shaderBufferFloat16Atomics", offsetof(ManagedType, shaderBufferFloat16Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat16Atomics)>(*mlib));
    addFieldEx("shaderBufferFloat16AtomicAdd", "shaderBufferFloat16AtomicAdd", offsetof(ManagedType, shaderBufferFloat16AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat16AtomicAdd)>(*mlib));
    addFieldEx("shaderBufferFloat16AtomicMinMax", "shaderBufferFloat16AtomicMinMax", offsetof(ManagedType, shaderBufferFloat16AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat16AtomicMinMax)>(*mlib));
    addFieldEx("shaderBufferFloat32AtomicMinMax", "shaderBufferFloat32AtomicMinMax", offsetof(ManagedType, shaderBufferFloat32AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat32AtomicMinMax)>(*mlib));
    addFieldEx("shaderBufferFloat64AtomicMinMax", "shaderBufferFloat64AtomicMinMax", offsetof(ManagedType, shaderBufferFloat64AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat64AtomicMinMax)>(*mlib));
    addFieldEx("shaderSharedFloat16Atomics", "shaderSharedFloat16Atomics", offsetof(ManagedType, shaderSharedFloat16Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat16Atomics)>(*mlib));
    addFieldEx("shaderSharedFloat16AtomicAdd", "shaderSharedFloat16AtomicAdd", offsetof(ManagedType, shaderSharedFloat16AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat16AtomicAdd)>(*mlib));
    addFieldEx("shaderSharedFloat16AtomicMinMax", "shaderSharedFloat16AtomicMinMax", offsetof(ManagedType, shaderSharedFloat16AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat16AtomicMinMax)>(*mlib));
    addFieldEx("shaderSharedFloat32AtomicMinMax", "shaderSharedFloat32AtomicMinMax", offsetof(ManagedType, shaderSharedFloat32AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat32AtomicMinMax)>(*mlib));
    addFieldEx("shaderSharedFloat64AtomicMinMax", "shaderSharedFloat64AtomicMinMax", offsetof(ManagedType, shaderSharedFloat64AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat64AtomicMinMax)>(*mlib));
    addFieldEx("shaderImageFloat32AtomicMinMax", "shaderImageFloat32AtomicMinMax", offsetof(ManagedType, shaderImageFloat32AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().shaderImageFloat32AtomicMinMax)>(*mlib));
    addFieldEx("sparseImageFloat32AtomicMinMax", "sparseImageFloat32AtomicMinMax", offsetof(ManagedType, sparseImageFloat32AtomicMinMax), das::makeFieldType<decltype(das::declval<ManagedType>().sparseImageFloat32AtomicMinMax)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_atomic_float2) */
#if defined(VK_EXT_shader_atomic_float)
struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT> {
  VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderBufferFloat32Atomics", "shaderBufferFloat32Atomics", offsetof(ManagedType, shaderBufferFloat32Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat32Atomics)>(*mlib));
    addFieldEx("shaderBufferFloat32AtomicAdd", "shaderBufferFloat32AtomicAdd", offsetof(ManagedType, shaderBufferFloat32AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat32AtomicAdd)>(*mlib));
    addFieldEx("shaderBufferFloat64Atomics", "shaderBufferFloat64Atomics", offsetof(ManagedType, shaderBufferFloat64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat64Atomics)>(*mlib));
    addFieldEx("shaderBufferFloat64AtomicAdd", "shaderBufferFloat64AtomicAdd", offsetof(ManagedType, shaderBufferFloat64AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferFloat64AtomicAdd)>(*mlib));
    addFieldEx("shaderSharedFloat32Atomics", "shaderSharedFloat32Atomics", offsetof(ManagedType, shaderSharedFloat32Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat32Atomics)>(*mlib));
    addFieldEx("shaderSharedFloat32AtomicAdd", "shaderSharedFloat32AtomicAdd", offsetof(ManagedType, shaderSharedFloat32AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat32AtomicAdd)>(*mlib));
    addFieldEx("shaderSharedFloat64Atomics", "shaderSharedFloat64Atomics", offsetof(ManagedType, shaderSharedFloat64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat64Atomics)>(*mlib));
    addFieldEx("shaderSharedFloat64AtomicAdd", "shaderSharedFloat64AtomicAdd", offsetof(ManagedType, shaderSharedFloat64AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedFloat64AtomicAdd)>(*mlib));
    addFieldEx("shaderImageFloat32Atomics", "shaderImageFloat32Atomics", offsetof(ManagedType, shaderImageFloat32Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderImageFloat32Atomics)>(*mlib));
    addFieldEx("shaderImageFloat32AtomicAdd", "shaderImageFloat32AtomicAdd", offsetof(ManagedType, shaderImageFloat32AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().shaderImageFloat32AtomicAdd)>(*mlib));
    addFieldEx("sparseImageFloat32Atomics", "sparseImageFloat32Atomics", offsetof(ManagedType, sparseImageFloat32Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().sparseImageFloat32Atomics)>(*mlib));
    addFieldEx("sparseImageFloat32AtomicAdd", "sparseImageFloat32AtomicAdd", offsetof(ManagedType, sparseImageFloat32AtomicAdd), das::makeFieldType<decltype(das::declval<ManagedType>().sparseImageFloat32AtomicAdd)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_atomic_float) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicInt64Features> {
  VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderAtomicInt64Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderBufferInt64Atomics", "shaderBufferInt64Atomics", offsetof(ManagedType, shaderBufferInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferInt64Atomics)>(*mlib));
    addFieldEx("shaderSharedInt64Atomics", "shaderSharedInt64Atomics", offsetof(ManagedType, shaderSharedInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedInt64Atomics)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_shader_clock)
struct VkPhysicalDeviceShaderClockFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderClockFeaturesKHR> {
  VkPhysicalDeviceShaderClockFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderClockFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSubgroupClock", "shaderSubgroupClock", offsetof(ManagedType, shaderSubgroupClock), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupClock)>(*mlib));
    addFieldEx("shaderDeviceClock", "shaderDeviceClock", offsetof(ManagedType, shaderDeviceClock), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDeviceClock)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shader_clock) */
#if defined(VK_ARM_shader_core_builtins)
struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM> {
  VkPhysicalDeviceShaderCoreBuiltinsFeaturesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCoreBuiltins", "shaderCoreBuiltins", offsetof(ManagedType, shaderCoreBuiltins), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCoreBuiltins)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM> {
  VkPhysicalDeviceShaderCoreBuiltinsPropertiesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCoreMask", "shaderCoreMask", offsetof(ManagedType, shaderCoreMask), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCoreMask)>(*mlib));
    addFieldEx("shaderCoreCount", "shaderCoreCount", offsetof(ManagedType, shaderCoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCoreCount)>(*mlib));
    addFieldEx("shaderWarpsPerCore", "shaderWarpsPerCore", offsetof(ManagedType, shaderWarpsPerCore), das::makeFieldType<decltype(das::declval<ManagedType>().shaderWarpsPerCore)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_shader_core_builtins) */
#if defined(VK_AMD_shader_core_properties2)
struct VkPhysicalDeviceShaderCoreProperties2AMDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderCoreProperties2AMD> {
  VkPhysicalDeviceShaderCoreProperties2AMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderCoreProperties2AMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderCoreFeatures", "shaderCoreFeatures", offsetof(ManagedType, shaderCoreFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().shaderCoreFeatures)>(*mlib));
    addFieldEx("activeComputeUnitCount", "activeComputeUnitCount", offsetof(ManagedType, activeComputeUnitCount), das::makeFieldType<decltype(das::declval<ManagedType>().activeComputeUnitCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_shader_core_properties2) */
#if defined(VK_AMD_shader_core_properties)
struct VkPhysicalDeviceShaderCorePropertiesAMDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderCorePropertiesAMD> {
  VkPhysicalDeviceShaderCorePropertiesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderCorePropertiesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderEngineCount", "shaderEngineCount", offsetof(ManagedType, shaderEngineCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderEngineCount)>(*mlib));
    addFieldEx("shaderArraysPerEngineCount", "shaderArraysPerEngineCount", offsetof(ManagedType, shaderArraysPerEngineCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderArraysPerEngineCount)>(*mlib));
    addFieldEx("computeUnitsPerShaderArray", "computeUnitsPerShaderArray", offsetof(ManagedType, computeUnitsPerShaderArray), das::makeFieldType<decltype(das::declval<ManagedType>().computeUnitsPerShaderArray)>(*mlib));
    addFieldEx("simdPerComputeUnit", "simdPerComputeUnit", offsetof(ManagedType, simdPerComputeUnit), das::makeFieldType<decltype(das::declval<ManagedType>().simdPerComputeUnit)>(*mlib));
    addFieldEx("wavefrontsPerSimd", "wavefrontsPerSimd", offsetof(ManagedType, wavefrontsPerSimd), das::makeFieldType<decltype(das::declval<ManagedType>().wavefrontsPerSimd)>(*mlib));
    addFieldEx("wavefrontSize", "wavefrontSize", offsetof(ManagedType, wavefrontSize), das::makeFieldType<decltype(das::declval<ManagedType>().wavefrontSize)>(*mlib));
    addFieldEx("sgprsPerSimd", "sgprsPerSimd", offsetof(ManagedType, sgprsPerSimd), das::makeFieldType<decltype(das::declval<ManagedType>().sgprsPerSimd)>(*mlib));
    addFieldEx("minSgprAllocation", "minSgprAllocation", offsetof(ManagedType, minSgprAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().minSgprAllocation)>(*mlib));
    addFieldEx("maxSgprAllocation", "maxSgprAllocation", offsetof(ManagedType, maxSgprAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().maxSgprAllocation)>(*mlib));
    addFieldEx("sgprAllocationGranularity", "sgprAllocationGranularity", offsetof(ManagedType, sgprAllocationGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().sgprAllocationGranularity)>(*mlib));
    addFieldEx("vgprsPerSimd", "vgprsPerSimd", offsetof(ManagedType, vgprsPerSimd), das::makeFieldType<decltype(das::declval<ManagedType>().vgprsPerSimd)>(*mlib));
    addFieldEx("minVgprAllocation", "minVgprAllocation", offsetof(ManagedType, minVgprAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().minVgprAllocation)>(*mlib));
    addFieldEx("maxVgprAllocation", "maxVgprAllocation", offsetof(ManagedType, maxVgprAllocation), das::makeFieldType<decltype(das::declval<ManagedType>().maxVgprAllocation)>(*mlib));
    addFieldEx("vgprAllocationGranularity", "vgprAllocationGranularity", offsetof(ManagedType, vgprAllocationGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().vgprAllocationGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_shader_core_properties) */
#if defined(VK_ARM_shader_core_properties)
struct VkPhysicalDeviceShaderCorePropertiesARMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderCorePropertiesARM> {
  VkPhysicalDeviceShaderCorePropertiesARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderCorePropertiesARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pixelRate", "pixelRate", offsetof(ManagedType, pixelRate), das::makeFieldType<decltype(das::declval<ManagedType>().pixelRate)>(*mlib));
    addFieldEx("texelRate", "texelRate", offsetof(ManagedType, texelRate), das::makeFieldType<decltype(das::declval<ManagedType>().texelRate)>(*mlib));
    addFieldEx("fmaRate", "fmaRate", offsetof(ManagedType, fmaRate), das::makeFieldType<decltype(das::declval<ManagedType>().fmaRate)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_shader_core_properties) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures> {
  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderDemoteToHelperInvocation", "shaderDemoteToHelperInvocation", offsetof(ManagedType, shaderDemoteToHelperInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDemoteToHelperInvocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderDrawParametersFeatures> {
  VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderDrawParametersFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderDrawParameters", "shaderDrawParameters", offsetof(ManagedType, shaderDrawParameters), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDrawParameters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_AMD_shader_early_and_late_fragment_tests)
struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD> {
  VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderEarlyAndLateFragmentTests", "shaderEarlyAndLateFragmentTests", offsetof(ManagedType, shaderEarlyAndLateFragmentTests), das::makeFieldType<decltype(das::declval<ManagedType>().shaderEarlyAndLateFragmentTests)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_shader_early_and_late_fragment_tests) */
#if defined(VK_AMDX_shader_enqueue)
struct VkPhysicalDeviceShaderEnqueueFeaturesAMDXAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderEnqueueFeaturesAMDX> {
  VkPhysicalDeviceShaderEnqueueFeaturesAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderEnqueueFeaturesAMDX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderEnqueue", "shaderEnqueue", offsetof(ManagedType, shaderEnqueue), das::makeFieldType<decltype(das::declval<ManagedType>().shaderEnqueue)>(*mlib));
    addFieldEx("shaderMeshEnqueue", "shaderMeshEnqueue", offsetof(ManagedType, shaderMeshEnqueue), das::makeFieldType<decltype(das::declval<ManagedType>().shaderMeshEnqueue)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderEnqueuePropertiesAMDXAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderEnqueuePropertiesAMDX> {
  VkPhysicalDeviceShaderEnqueuePropertiesAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderEnqueuePropertiesAMDX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxExecutionGraphDepth", "maxExecutionGraphDepth", offsetof(ManagedType, maxExecutionGraphDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphDepth)>(*mlib));
    addFieldEx("maxExecutionGraphShaderOutputNodes", "maxExecutionGraphShaderOutputNodes", offsetof(ManagedType, maxExecutionGraphShaderOutputNodes), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphShaderOutputNodes)>(*mlib));
    addFieldEx("maxExecutionGraphShaderPayloadSize", "maxExecutionGraphShaderPayloadSize", offsetof(ManagedType, maxExecutionGraphShaderPayloadSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphShaderPayloadSize)>(*mlib));
    addFieldEx("maxExecutionGraphShaderPayloadCount", "maxExecutionGraphShaderPayloadCount", offsetof(ManagedType, maxExecutionGraphShaderPayloadCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphShaderPayloadCount)>(*mlib));
    addFieldEx("executionGraphDispatchAddressAlignment", "executionGraphDispatchAddressAlignment", offsetof(ManagedType, executionGraphDispatchAddressAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().executionGraphDispatchAddressAlignment)>(*mlib));
    addFieldEx("maxExecutionGraphWorkgroupCount", "maxExecutionGraphWorkgroupCount", offsetof(ManagedType, maxExecutionGraphWorkgroupCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphWorkgroupCount)>(*mlib));
    addFieldEx("maxExecutionGraphWorkgroups", "maxExecutionGraphWorkgroups", offsetof(ManagedType, maxExecutionGraphWorkgroups), das::makeFieldType<decltype(das::declval<ManagedType>().maxExecutionGraphWorkgroups)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceShaderExpectAssumeFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderExpectAssumeFeatures> {
  VkPhysicalDeviceShaderExpectAssumeFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderExpectAssumeFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderExpectAssume", "shaderExpectAssume", offsetof(ManagedType, shaderExpectAssume), das::makeFieldType<decltype(das::declval<ManagedType>().shaderExpectAssume)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderFloat16Int8Features> {
  VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderFloat16Int8Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderFloat16", "shaderFloat16", offsetof(ManagedType, shaderFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloat16)>(*mlib));
    addFieldEx("shaderInt8", "shaderInt8", offsetof(ManagedType, shaderInt8), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInt8)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceShaderFloatControls2FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderFloatControls2Features> {
  VkPhysicalDeviceShaderFloatControls2FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderFloatControls2Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderFloatControls2", "shaderFloatControls2", offsetof(ManagedType, shaderFloatControls2), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloatControls2)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_shader_image_atomic_int64)
struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT> {
  VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderImageInt64Atomics", "shaderImageInt64Atomics", offsetof(ManagedType, shaderImageInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderImageInt64Atomics)>(*mlib));
    addFieldEx("sparseImageInt64Atomics", "sparseImageInt64Atomics", offsetof(ManagedType, sparseImageInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().sparseImageInt64Atomics)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_image_atomic_int64) */
#if defined(VK_NV_shader_image_footprint)
struct VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderImageFootprintFeaturesNV> {
  VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderImageFootprintFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageFootprint", "imageFootprint", offsetof(ManagedType, imageFootprint), das::makeFieldType<decltype(das::declval<ManagedType>().imageFootprint)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shader_image_footprint) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceShaderIntegerDotProductFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderIntegerDotProductFeatures> {
  VkPhysicalDeviceShaderIntegerDotProductFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderIntegerDotProductFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderIntegerDotProduct", "shaderIntegerDotProduct", offsetof(ManagedType, shaderIntegerDotProduct), das::makeFieldType<decltype(das::declval<ManagedType>().shaderIntegerDotProduct)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderIntegerDotProductPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderIntegerDotProductProperties> {
  VkPhysicalDeviceShaderIntegerDotProductPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderIntegerDotProductProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("integerDotProduct8BitUnsignedAccelerated", "integerDotProduct8BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct8BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct8BitSignedAccelerated", "integerDotProduct8BitSignedAccelerated", offsetof(ManagedType, integerDotProduct8BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct8BitMixedSignednessAccelerated", "integerDotProduct8BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct8BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedUnsignedAccelerated", "integerDotProduct4x8BitPackedUnsignedAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedSignedAccelerated", "integerDotProduct4x8BitPackedSignedAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedMixedSignednessAccelerated", "integerDotProduct4x8BitPackedMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitUnsignedAccelerated", "integerDotProduct16BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct16BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitSignedAccelerated", "integerDotProduct16BitSignedAccelerated", offsetof(ManagedType, integerDotProduct16BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitMixedSignednessAccelerated", "integerDotProduct16BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct16BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitUnsignedAccelerated", "integerDotProduct32BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct32BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitSignedAccelerated", "integerDotProduct32BitSignedAccelerated", offsetof(ManagedType, integerDotProduct32BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitMixedSignednessAccelerated", "integerDotProduct32BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct32BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitUnsignedAccelerated", "integerDotProduct64BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct64BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitSignedAccelerated", "integerDotProduct64BitSignedAccelerated", offsetof(ManagedType, integerDotProduct64BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitMixedSignednessAccelerated", "integerDotProduct64BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct64BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitSignedAccelerated", "integerDotProductAccumulatingSaturating8BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitSignedAccelerated", "integerDotProductAccumulatingSaturating16BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitSignedAccelerated", "integerDotProductAccumulatingSaturating32BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitSignedAccelerated", "integerDotProductAccumulatingSaturating64BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_INTEL_shader_integer_functions2)
struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL> {
  VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderIntegerFunctions2", "shaderIntegerFunctions2", offsetof(ManagedType, shaderIntegerFunctions2), das::makeFieldType<decltype(das::declval<ManagedType>().shaderIntegerFunctions2)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_shader_integer_functions2) */
#if defined(VK_KHR_shader_maximal_reconvergence)
struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR> {
  VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderMaximalReconvergence", "shaderMaximalReconvergence", offsetof(ManagedType, shaderMaximalReconvergence), das::makeFieldType<decltype(das::declval<ManagedType>().shaderMaximalReconvergence)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shader_maximal_reconvergence) */
#if defined(VK_EXT_shader_module_identifier)
struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT> {
  VkPhysicalDeviceShaderModuleIdentifierFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderModuleIdentifier", "shaderModuleIdentifier", offsetof(ManagedType, shaderModuleIdentifier), das::makeFieldType<decltype(das::declval<ManagedType>().shaderModuleIdentifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT> {
  VkPhysicalDeviceShaderModuleIdentifierPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderModuleIdentifierAlgorithmUUID", "shaderModuleIdentifierAlgorithmUUID", offsetof(ManagedType, shaderModuleIdentifierAlgorithmUUID), das::makeFieldType<decltype(das::declval<ManagedType>().shaderModuleIdentifierAlgorithmUUID)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
struct VkPhysicalDeviceShaderObjectFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderObjectFeaturesEXT> {
  VkPhysicalDeviceShaderObjectFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderObjectFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderObject", "shaderObject", offsetof(ManagedType, shaderObject), das::makeFieldType<decltype(das::declval<ManagedType>().shaderObject)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderObjectPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderObjectPropertiesEXT> {
  VkPhysicalDeviceShaderObjectPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderObjectPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderBinaryUUID", "shaderBinaryUUID", offsetof(ManagedType, shaderBinaryUUID), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBinaryUUID)>(*mlib));
    addFieldEx("shaderBinaryVersion", "shaderBinaryVersion", offsetof(ManagedType, shaderBinaryVersion), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBinaryVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_KHR_shader_quad_control)
struct VkPhysicalDeviceShaderQuadControlFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderQuadControlFeaturesKHR> {
  VkPhysicalDeviceShaderQuadControlFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderQuadControlFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderQuadControl", "shaderQuadControl", offsetof(ManagedType, shaderQuadControl), das::makeFieldType<decltype(das::declval<ManagedType>().shaderQuadControl)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shader_quad_control) */
#if defined(VK_KHR_shader_relaxed_extended_instruction)
struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR> {
  VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderRelaxedExtendedInstruction", "shaderRelaxedExtendedInstruction", offsetof(ManagedType, shaderRelaxedExtendedInstruction), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRelaxedExtendedInstruction)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shader_relaxed_extended_instruction) */
#if defined(VK_EXT_shader_replicated_composites)
struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT> {
  VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderReplicatedComposites", "shaderReplicatedComposites", offsetof(ManagedType, shaderReplicatedComposites), das::makeFieldType<decltype(das::declval<ManagedType>().shaderReplicatedComposites)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_replicated_composites) */
#if defined(VK_NV_shader_sm_builtins)
struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV> {
  VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderSMBuiltinsFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSMBuiltins", "shaderSMBuiltins", offsetof(ManagedType, shaderSMBuiltins), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSMBuiltins)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV> {
  VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderSMBuiltinsPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSMCount", "shaderSMCount", offsetof(ManagedType, shaderSMCount), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSMCount)>(*mlib));
    addFieldEx("shaderWarpsPerSM", "shaderWarpsPerSM", offsetof(ManagedType, shaderWarpsPerSM), das::makeFieldType<decltype(das::declval<ManagedType>().shaderWarpsPerSM)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shader_sm_builtins) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures> {
  VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSubgroupExtendedTypes", "shaderSubgroupExtendedTypes", offsetof(ManagedType, shaderSubgroupExtendedTypes), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupExtendedTypes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceShaderSubgroupRotateFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderSubgroupRotateFeatures> {
  VkPhysicalDeviceShaderSubgroupRotateFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderSubgroupRotateFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSubgroupRotate", "shaderSubgroupRotate", offsetof(ManagedType, shaderSubgroupRotate), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupRotate)>(*mlib));
    addFieldEx("shaderSubgroupRotateClustered", "shaderSubgroupRotateClustered", offsetof(ManagedType, shaderSubgroupRotateClustered), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupRotateClustered)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_shader_subgroup_uniform_control_flow)
struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR> {
  VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderSubgroupUniformControlFlow", "shaderSubgroupUniformControlFlow", offsetof(ManagedType, shaderSubgroupUniformControlFlow), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupUniformControlFlow)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shader_subgroup_uniform_control_flow) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceShaderTerminateInvocationFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderTerminateInvocationFeatures> {
  VkPhysicalDeviceShaderTerminateInvocationFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderTerminateInvocationFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderTerminateInvocation", "shaderTerminateInvocation", offsetof(ManagedType, shaderTerminateInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTerminateInvocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_shader_tile_image)
struct VkPhysicalDeviceShaderTileImageFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderTileImageFeaturesEXT> {
  VkPhysicalDeviceShaderTileImageFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderTileImageFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderTileImageColorReadAccess", "shaderTileImageColorReadAccess", offsetof(ManagedType, shaderTileImageColorReadAccess), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageColorReadAccess)>(*mlib));
    addFieldEx("shaderTileImageDepthReadAccess", "shaderTileImageDepthReadAccess", offsetof(ManagedType, shaderTileImageDepthReadAccess), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageDepthReadAccess)>(*mlib));
    addFieldEx("shaderTileImageStencilReadAccess", "shaderTileImageStencilReadAccess", offsetof(ManagedType, shaderTileImageStencilReadAccess), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageStencilReadAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShaderTileImagePropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShaderTileImagePropertiesEXT> {
  VkPhysicalDeviceShaderTileImagePropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShaderTileImagePropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderTileImageCoherentReadAccelerated", "shaderTileImageCoherentReadAccelerated", offsetof(ManagedType, shaderTileImageCoherentReadAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageCoherentReadAccelerated)>(*mlib));
    addFieldEx("shaderTileImageReadSampleFromPixelRateInvocation", "shaderTileImageReadSampleFromPixelRateInvocation", offsetof(ManagedType, shaderTileImageReadSampleFromPixelRateInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageReadSampleFromPixelRateInvocation)>(*mlib));
    addFieldEx("shaderTileImageReadFromHelperInvocation", "shaderTileImageReadFromHelperInvocation", offsetof(ManagedType, shaderTileImageReadFromHelperInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTileImageReadFromHelperInvocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_tile_image) */
#if defined(VK_NV_shading_rate_image)
struct VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImageFeaturesNV> {
  VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShadingRateImageFeaturesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shadingRateImage", "shadingRateImage", offsetof(ManagedType, shadingRateImage), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateImage)>(*mlib));
    addFieldEx("shadingRateCoarseSampleOrder", "shadingRateCoarseSampleOrder", offsetof(ManagedType, shadingRateCoarseSampleOrder), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateCoarseSampleOrder)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImagePropertiesNV> {
  VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceShadingRateImagePropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shadingRateTexelSize", "shadingRateTexelSize", offsetof(ManagedType, shadingRateTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateTexelSize)>(*mlib));
    addFieldEx("shadingRatePaletteSize", "shadingRatePaletteSize", offsetof(ManagedType, shadingRatePaletteSize), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRatePaletteSize)>(*mlib));
    addFieldEx("shadingRateMaxCoarseSamples", "shadingRateMaxCoarseSamples", offsetof(ManagedType, shadingRateMaxCoarseSamples), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateMaxCoarseSamples)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceSparseImageFormatInfo2Annotation : ManagedStructureAnnotation<VkPhysicalDeviceSparseImageFormatInfo2> {
  VkPhysicalDeviceSparseImageFormatInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSparseImageFormatInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("samples", "samples", offsetof(ManagedType, samples), das::makeFieldType<decltype(das::declval<ManagedType>().samples)>(*mlib));
    addFieldEx("usage", "usage", offsetof(ManagedType, usage), das::makeFieldType<decltype(das::declval<ManagedType>().usage)>(*mlib));
    addFieldEx("tiling", "tiling", offsetof(ManagedType, tiling), das::makeFieldType<decltype(das::declval<ManagedType>().tiling)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceSubgroupPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubgroupProperties> {
  VkPhysicalDeviceSubgroupPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubgroupProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subgroupSize", "subgroupSize", offsetof(ManagedType, subgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSize)>(*mlib));
    addFieldEx("supportedStages", "supportedStages", offsetof(ManagedType, supportedStages), das::makeFieldType<decltype(das::declval<ManagedType>().supportedStages)>(*mlib));
    addFieldEx("supportedOperations", "supportedOperations", offsetof(ManagedType, supportedOperations), das::makeFieldType<decltype(das::declval<ManagedType>().supportedOperations)>(*mlib));
    addFieldEx("quadOperationsInAllStages", "quadOperationsInAllStages", offsetof(ManagedType, quadOperationsInAllStages), das::makeFieldType<decltype(das::declval<ManagedType>().quadOperationsInAllStages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceSubgroupSizeControlFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubgroupSizeControlFeatures> {
  VkPhysicalDeviceSubgroupSizeControlFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubgroupSizeControlFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subgroupSizeControl", "subgroupSizeControl", offsetof(ManagedType, subgroupSizeControl), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSizeControl)>(*mlib));
    addFieldEx("computeFullSubgroups", "computeFullSubgroups", offsetof(ManagedType, computeFullSubgroups), das::makeFieldType<decltype(das::declval<ManagedType>().computeFullSubgroups)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceSubgroupSizeControlPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubgroupSizeControlProperties> {
  VkPhysicalDeviceSubgroupSizeControlPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubgroupSizeControlProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minSubgroupSize", "minSubgroupSize", offsetof(ManagedType, minSubgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().minSubgroupSize)>(*mlib));
    addFieldEx("maxSubgroupSize", "maxSubgroupSize", offsetof(ManagedType, maxSubgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxSubgroupSize)>(*mlib));
    addFieldEx("maxComputeWorkgroupSubgroups", "maxComputeWorkgroupSubgroups", offsetof(ManagedType, maxComputeWorkgroupSubgroups), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeWorkgroupSubgroups)>(*mlib));
    addFieldEx("requiredSubgroupSizeStages", "requiredSubgroupSizeStages", offsetof(ManagedType, requiredSubgroupSizeStages), das::makeFieldType<decltype(das::declval<ManagedType>().requiredSubgroupSizeStages)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_subpass_merge_feedback)
struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT> {
  VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subpassMergeFeedback", "subpassMergeFeedback", offsetof(ManagedType, subpassMergeFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().subpassMergeFeedback)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_HUAWEI_subpass_shading)
struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI> {
  VkPhysicalDeviceSubpassShadingFeaturesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubpassShadingFeaturesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subpassShading", "subpassShading", offsetof(ManagedType, subpassShading), das::makeFieldType<decltype(das::declval<ManagedType>().subpassShading)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEIAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI> {
  VkPhysicalDeviceSubpassShadingPropertiesHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSubpassShadingPropertiesHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxSubpassShadingWorkgroupSizeAspectRatio", "maxSubpassShadingWorkgroupSizeAspectRatio", offsetof(ManagedType, maxSubpassShadingWorkgroupSizeAspectRatio), das::makeFieldType<decltype(das::declval<ManagedType>().maxSubpassShadingWorkgroupSizeAspectRatio)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_KHR_get_surface_capabilities2)
struct VkPhysicalDeviceSurfaceInfo2KHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSurfaceInfo2KHR> {
  VkPhysicalDeviceSurfaceInfo2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSurfaceInfo2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("surface", "surface", offsetof(ManagedType, surface), das::makeFieldType<decltype(das::declval<ManagedType>().surface)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_swapchain_maintenance1)
struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT> {
  VkPhysicalDeviceSwapchainMaintenance1FeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainMaintenance1", "swapchainMaintenance1", offsetof(ManagedType, swapchainMaintenance1), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainMaintenance1)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceSynchronization2FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceSynchronization2Features> {
  VkPhysicalDeviceSynchronization2FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceSynchronization2Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("synchronization2", "synchronization2", offsetof(ManagedType, synchronization2), das::makeFieldType<decltype(das::declval<ManagedType>().synchronization2)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_texel_buffer_alignment)
struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT> {
  VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("texelBufferAlignment", "texelBufferAlignment", offsetof(ManagedType, texelBufferAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().texelBufferAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_texel_buffer_alignment) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceTexelBufferAlignmentPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTexelBufferAlignmentProperties> {
  VkPhysicalDeviceTexelBufferAlignmentPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTexelBufferAlignmentProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("storageTexelBufferOffsetAlignmentBytes", "storageTexelBufferOffsetAlignmentBytes", offsetof(ManagedType, storageTexelBufferOffsetAlignmentBytes), das::makeFieldType<decltype(das::declval<ManagedType>().storageTexelBufferOffsetAlignmentBytes)>(*mlib));
    addFieldEx("storageTexelBufferOffsetSingleTexelAlignment", "storageTexelBufferOffsetSingleTexelAlignment", offsetof(ManagedType, storageTexelBufferOffsetSingleTexelAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().storageTexelBufferOffsetSingleTexelAlignment)>(*mlib));
    addFieldEx("uniformTexelBufferOffsetAlignmentBytes", "uniformTexelBufferOffsetAlignmentBytes", offsetof(ManagedType, uniformTexelBufferOffsetAlignmentBytes), das::makeFieldType<decltype(das::declval<ManagedType>().uniformTexelBufferOffsetAlignmentBytes)>(*mlib));
    addFieldEx("uniformTexelBufferOffsetSingleTexelAlignment", "uniformTexelBufferOffsetSingleTexelAlignment", offsetof(ManagedType, uniformTexelBufferOffsetSingleTexelAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().uniformTexelBufferOffsetSingleTexelAlignment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTextureCompressionASTCHDRFeatures> {
  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTextureCompressionASTCHDRFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("textureCompressionASTC_HDR", "textureCompressionASTC_HDR", offsetof(ManagedType, textureCompressionASTC_HDR), das::makeFieldType<decltype(das::declval<ManagedType>().textureCompressionASTC_HDR)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_QCOM_tile_properties)
struct VkPhysicalDeviceTilePropertiesFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTilePropertiesFeaturesQCOM> {
  VkPhysicalDeviceTilePropertiesFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTilePropertiesFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("tileProperties", "tileProperties", offsetof(ManagedType, tileProperties), das::makeFieldType<decltype(das::declval<ManagedType>().tileProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTimelineSemaphoreFeatures> {
  VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTimelineSemaphoreFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("timelineSemaphore", "timelineSemaphore", offsetof(ManagedType, timelineSemaphore), das::makeFieldType<decltype(das::declval<ManagedType>().timelineSemaphore)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTimelineSemaphoreProperties> {
  VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTimelineSemaphoreProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxTimelineSemaphoreValueDifference", "maxTimelineSemaphoreValueDifference", offsetof(ManagedType, maxTimelineSemaphoreValueDifference), das::makeFieldType<decltype(das::declval<ManagedType>().maxTimelineSemaphoreValueDifference)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceToolPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceToolProperties> {
  VkPhysicalDeviceToolPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceToolProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
    addFieldEx("version", "version", offsetof(ManagedType, version), das::makeFieldType<decltype(das::declval<ManagedType>().version)>(*mlib));
    addFieldEx("purposes", "purposes", offsetof(ManagedType, purposes), das::makeFieldType<decltype(das::declval<ManagedType>().purposes)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("layer", "layer", offsetof(ManagedType, layer), das::makeFieldType<decltype(das::declval<ManagedType>().layer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_transform_feedback)
struct VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTransformFeedbackFeaturesEXT> {
  VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTransformFeedbackFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("transformFeedback", "transformFeedback", offsetof(ManagedType, transformFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedback)>(*mlib));
    addFieldEx("geometryStreams", "geometryStreams", offsetof(ManagedType, geometryStreams), das::makeFieldType<decltype(das::declval<ManagedType>().geometryStreams)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceTransformFeedbackPropertiesEXT> {
  VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceTransformFeedbackPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxTransformFeedbackStreams", "maxTransformFeedbackStreams", offsetof(ManagedType, maxTransformFeedbackStreams), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackStreams)>(*mlib));
    addFieldEx("maxTransformFeedbackBuffers", "maxTransformFeedbackBuffers", offsetof(ManagedType, maxTransformFeedbackBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackBuffers)>(*mlib));
    addFieldEx("maxTransformFeedbackBufferSize", "maxTransformFeedbackBufferSize", offsetof(ManagedType, maxTransformFeedbackBufferSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackBufferSize)>(*mlib));
    addFieldEx("maxTransformFeedbackStreamDataSize", "maxTransformFeedbackStreamDataSize", offsetof(ManagedType, maxTransformFeedbackStreamDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackStreamDataSize)>(*mlib));
    addFieldEx("maxTransformFeedbackBufferDataSize", "maxTransformFeedbackBufferDataSize", offsetof(ManagedType, maxTransformFeedbackBufferDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackBufferDataSize)>(*mlib));
    addFieldEx("maxTransformFeedbackBufferDataStride", "maxTransformFeedbackBufferDataStride", offsetof(ManagedType, maxTransformFeedbackBufferDataStride), das::makeFieldType<decltype(das::declval<ManagedType>().maxTransformFeedbackBufferDataStride)>(*mlib));
    addFieldEx("transformFeedbackQueries", "transformFeedbackQueries", offsetof(ManagedType, transformFeedbackQueries), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackQueries)>(*mlib));
    addFieldEx("transformFeedbackStreamsLinesTriangles", "transformFeedbackStreamsLinesTriangles", offsetof(ManagedType, transformFeedbackStreamsLinesTriangles), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackStreamsLinesTriangles)>(*mlib));
    addFieldEx("transformFeedbackRasterizationStreamSelect", "transformFeedbackRasterizationStreamSelect", offsetof(ManagedType, transformFeedbackRasterizationStreamSelect), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackRasterizationStreamSelect)>(*mlib));
    addFieldEx("transformFeedbackDraw", "transformFeedbackDraw", offsetof(ManagedType, transformFeedbackDraw), das::makeFieldType<decltype(das::declval<ManagedType>().transformFeedbackDraw)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceUniformBufferStandardLayoutFeatures> {
  VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceUniformBufferStandardLayoutFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("uniformBufferStandardLayout", "uniformBufferStandardLayout", offsetof(ManagedType, uniformBufferStandardLayout), das::makeFieldType<decltype(das::declval<ManagedType>().uniformBufferStandardLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkPhysicalDeviceVariablePointersFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVariablePointersFeatures> {
  VkPhysicalDeviceVariablePointersFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVariablePointersFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("variablePointersStorageBuffer", "variablePointersStorageBuffer", offsetof(ManagedType, variablePointersStorageBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().variablePointersStorageBuffer)>(*mlib));
    addFieldEx("variablePointers", "variablePointers", offsetof(ManagedType, variablePointers), das::makeFieldType<decltype(das::declval<ManagedType>().variablePointers)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceVertexAttributeDivisorFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeDivisorFeatures> {
  VkPhysicalDeviceVertexAttributeDivisorFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVertexAttributeDivisorFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexAttributeInstanceRateDivisor", "vertexAttributeInstanceRateDivisor", offsetof(ManagedType, vertexAttributeInstanceRateDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeInstanceRateDivisor)>(*mlib));
    addFieldEx("vertexAttributeInstanceRateZeroDivisor", "vertexAttributeInstanceRateZeroDivisor", offsetof(ManagedType, vertexAttributeInstanceRateZeroDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeInstanceRateZeroDivisor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVertexAttributeDivisorPropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeDivisorProperties> {
  VkPhysicalDeviceVertexAttributeDivisorPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVertexAttributeDivisorProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxVertexAttribDivisor", "maxVertexAttribDivisor", offsetof(ManagedType, maxVertexAttribDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexAttribDivisor)>(*mlib));
    addFieldEx("supportsNonZeroFirstInstance", "supportsNonZeroFirstInstance", offsetof(ManagedType, supportsNonZeroFirstInstance), das::makeFieldType<decltype(das::declval<ManagedType>().supportsNonZeroFirstInstance)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_vertex_attribute_divisor)
struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT> {
  VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxVertexAttribDivisor", "maxVertexAttribDivisor", offsetof(ManagedType, maxVertexAttribDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexAttribDivisor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_vertex_attribute_divisor) */
#if defined(VK_EXT_vertex_attribute_robustness)
struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT> {
  VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexAttributeRobustness", "vertexAttributeRobustness", offsetof(ManagedType, vertexAttributeRobustness), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeRobustness)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_vertex_attribute_robustness) */
#if defined(VK_EXT_vertex_input_dynamic_state)
struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT> {
  VkPhysicalDeviceVertexInputDynamicStateFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexInputDynamicState", "vertexInputDynamicState", offsetof(ManagedType, vertexInputDynamicState), das::makeFieldType<decltype(das::declval<ManagedType>().vertexInputDynamicState)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_vertex_input_dynamic_state) */
#if defined(VK_KHR_video_encode_av1)
struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR> {
  VkPhysicalDeviceVideoEncodeAV1FeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVideoEncodeAV1FeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoEncodeAV1", "videoEncodeAV1", offsetof(ManagedType, videoEncodeAV1), das::makeFieldType<decltype(das::declval<ManagedType>().videoEncodeAV1)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_queue)
struct VkVideoProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoProfileInfoKHR> {
  VkVideoProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoCodecOperation", "videoCodecOperation", offsetof(ManagedType, videoCodecOperation), das::makeFieldType<decltype(das::declval<ManagedType>().videoCodecOperation)>(*mlib));
    addFieldEx("chromaSubsampling", "chromaSubsampling", offsetof(ManagedType, chromaSubsampling), das::makeFieldType<decltype(das::declval<ManagedType>().chromaSubsampling)>(*mlib));
    addFieldEx("lumaBitDepth", "lumaBitDepth", offsetof(ManagedType, lumaBitDepth), das::makeFieldType<decltype(das::declval<ManagedType>().lumaBitDepth)>(*mlib));
    addFieldEx("chromaBitDepth", "chromaBitDepth", offsetof(ManagedType, chromaBitDepth), das::makeFieldType<decltype(das::declval<ManagedType>().chromaBitDepth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_queue)
struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR> {
  VkPhysicalDeviceVideoEncodeQualityLevelInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pVideoProfile", "pVideoProfile", offsetof(ManagedType, pVideoProfile), das::makeFieldType<decltype(das::declval<ManagedType>().pVideoProfile)>(*mlib));
    addFieldEx("qualityLevel", "qualityLevel", offsetof(ManagedType, qualityLevel), das::makeFieldType<decltype(das::declval<ManagedType>().qualityLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR> {
  VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoEncodeQuantizationMap", "videoEncodeQuantizationMap", offsetof(ManagedType, videoEncodeQuantizationMap), das::makeFieldType<decltype(das::declval<ManagedType>().videoEncodeQuantizationMap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_queue)
struct VkPhysicalDeviceVideoFormatInfoKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVideoFormatInfoKHR> {
  VkPhysicalDeviceVideoFormatInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVideoFormatInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageUsage", "imageUsage", offsetof(ManagedType, imageUsage), das::makeFieldType<decltype(das::declval<ManagedType>().imageUsage)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_maintenance1)
struct VkPhysicalDeviceVideoMaintenance1FeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVideoMaintenance1FeaturesKHR> {
  VkPhysicalDeviceVideoMaintenance1FeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVideoMaintenance1FeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoMaintenance1", "videoMaintenance1", offsetof(ManagedType, videoMaintenance1), das::makeFieldType<decltype(das::declval<ManagedType>().videoMaintenance1)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_maintenance1) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceVulkan11FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan11Features> {
  VkPhysicalDeviceVulkan11FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan11Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("storageBuffer16BitAccess", "storageBuffer16BitAccess", offsetof(ManagedType, storageBuffer16BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().storageBuffer16BitAccess)>(*mlib));
    addFieldEx("uniformAndStorageBuffer16BitAccess", "uniformAndStorageBuffer16BitAccess", offsetof(ManagedType, uniformAndStorageBuffer16BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().uniformAndStorageBuffer16BitAccess)>(*mlib));
    addFieldEx("storagePushConstant16", "storagePushConstant16", offsetof(ManagedType, storagePushConstant16), das::makeFieldType<decltype(das::declval<ManagedType>().storagePushConstant16)>(*mlib));
    addFieldEx("storageInputOutput16", "storageInputOutput16", offsetof(ManagedType, storageInputOutput16), das::makeFieldType<decltype(das::declval<ManagedType>().storageInputOutput16)>(*mlib));
    addFieldEx("multiview", "multiview", offsetof(ManagedType, multiview), das::makeFieldType<decltype(das::declval<ManagedType>().multiview)>(*mlib));
    addFieldEx("multiviewGeometryShader", "multiviewGeometryShader", offsetof(ManagedType, multiviewGeometryShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewGeometryShader)>(*mlib));
    addFieldEx("multiviewTessellationShader", "multiviewTessellationShader", offsetof(ManagedType, multiviewTessellationShader), das::makeFieldType<decltype(das::declval<ManagedType>().multiviewTessellationShader)>(*mlib));
    addFieldEx("variablePointersStorageBuffer", "variablePointersStorageBuffer", offsetof(ManagedType, variablePointersStorageBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().variablePointersStorageBuffer)>(*mlib));
    addFieldEx("variablePointers", "variablePointers", offsetof(ManagedType, variablePointers), das::makeFieldType<decltype(das::declval<ManagedType>().variablePointers)>(*mlib));
    addFieldEx("protectedMemory", "protectedMemory", offsetof(ManagedType, protectedMemory), das::makeFieldType<decltype(das::declval<ManagedType>().protectedMemory)>(*mlib));
    addFieldEx("samplerYcbcrConversion", "samplerYcbcrConversion", offsetof(ManagedType, samplerYcbcrConversion), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversion)>(*mlib));
    addFieldEx("shaderDrawParameters", "shaderDrawParameters", offsetof(ManagedType, shaderDrawParameters), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDrawParameters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVulkan11PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan11Properties> {
  VkPhysicalDeviceVulkan11PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan11Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("deviceUUID", "deviceUUID", offsetof(ManagedType, deviceUUID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceUUID)>(*mlib));
    addFieldEx("driverUUID", "driverUUID", offsetof(ManagedType, driverUUID), das::makeFieldType<decltype(das::declval<ManagedType>().driverUUID)>(*mlib));
    addFieldEx("deviceLUID", "deviceLUID", offsetof(ManagedType, deviceLUID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceLUID)>(*mlib));
    addFieldEx("deviceNodeMask", "deviceNodeMask", offsetof(ManagedType, deviceNodeMask), das::makeFieldType<decltype(das::declval<ManagedType>().deviceNodeMask)>(*mlib));
    addFieldEx("deviceLUIDValid", "deviceLUIDValid", offsetof(ManagedType, deviceLUIDValid), das::makeFieldType<decltype(das::declval<ManagedType>().deviceLUIDValid)>(*mlib));
    addFieldEx("subgroupSize", "subgroupSize", offsetof(ManagedType, subgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSize)>(*mlib));
    addFieldEx("subgroupSupportedStages", "subgroupSupportedStages", offsetof(ManagedType, subgroupSupportedStages), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSupportedStages)>(*mlib));
    addFieldEx("subgroupSupportedOperations", "subgroupSupportedOperations", offsetof(ManagedType, subgroupSupportedOperations), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSupportedOperations)>(*mlib));
    addFieldEx("subgroupQuadOperationsInAllStages", "subgroupQuadOperationsInAllStages", offsetof(ManagedType, subgroupQuadOperationsInAllStages), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupQuadOperationsInAllStages)>(*mlib));
    addFieldEx("pointClippingBehavior", "pointClippingBehavior", offsetof(ManagedType, pointClippingBehavior), das::makeFieldType<decltype(das::declval<ManagedType>().pointClippingBehavior)>(*mlib));
    addFieldEx("maxMultiviewViewCount", "maxMultiviewViewCount", offsetof(ManagedType, maxMultiviewViewCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxMultiviewViewCount)>(*mlib));
    addFieldEx("maxMultiviewInstanceIndex", "maxMultiviewInstanceIndex", offsetof(ManagedType, maxMultiviewInstanceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().maxMultiviewInstanceIndex)>(*mlib));
    addFieldEx("protectedNoFault", "protectedNoFault", offsetof(ManagedType, protectedNoFault), das::makeFieldType<decltype(das::declval<ManagedType>().protectedNoFault)>(*mlib));
    addFieldEx("maxPerSetDescriptors", "maxPerSetDescriptors", offsetof(ManagedType, maxPerSetDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerSetDescriptors)>(*mlib));
    addFieldEx("maxMemoryAllocationSize", "maxMemoryAllocationSize", offsetof(ManagedType, maxMemoryAllocationSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxMemoryAllocationSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVulkan12FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan12Features> {
  VkPhysicalDeviceVulkan12FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan12Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("samplerMirrorClampToEdge", "samplerMirrorClampToEdge", offsetof(ManagedType, samplerMirrorClampToEdge), das::makeFieldType<decltype(das::declval<ManagedType>().samplerMirrorClampToEdge)>(*mlib));
    addFieldEx("drawIndirectCount", "drawIndirectCount", offsetof(ManagedType, drawIndirectCount), das::makeFieldType<decltype(das::declval<ManagedType>().drawIndirectCount)>(*mlib));
    addFieldEx("storageBuffer8BitAccess", "storageBuffer8BitAccess", offsetof(ManagedType, storageBuffer8BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().storageBuffer8BitAccess)>(*mlib));
    addFieldEx("uniformAndStorageBuffer8BitAccess", "uniformAndStorageBuffer8BitAccess", offsetof(ManagedType, uniformAndStorageBuffer8BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().uniformAndStorageBuffer8BitAccess)>(*mlib));
    addFieldEx("storagePushConstant8", "storagePushConstant8", offsetof(ManagedType, storagePushConstant8), das::makeFieldType<decltype(das::declval<ManagedType>().storagePushConstant8)>(*mlib));
    addFieldEx("shaderBufferInt64Atomics", "shaderBufferInt64Atomics", offsetof(ManagedType, shaderBufferInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderBufferInt64Atomics)>(*mlib));
    addFieldEx("shaderSharedInt64Atomics", "shaderSharedInt64Atomics", offsetof(ManagedType, shaderSharedInt64Atomics), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSharedInt64Atomics)>(*mlib));
    addFieldEx("shaderFloat16", "shaderFloat16", offsetof(ManagedType, shaderFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloat16)>(*mlib));
    addFieldEx("shaderInt8", "shaderInt8", offsetof(ManagedType, shaderInt8), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInt8)>(*mlib));
    addFieldEx("descriptorIndexing", "descriptorIndexing", offsetof(ManagedType, descriptorIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorIndexing)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayDynamicIndexing", "shaderInputAttachmentArrayDynamicIndexing", offsetof(ManagedType, shaderInputAttachmentArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderUniformTexelBufferArrayDynamicIndexing", "shaderUniformTexelBufferArrayDynamicIndexing", offsetof(ManagedType, shaderUniformTexelBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformTexelBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderStorageTexelBufferArrayDynamicIndexing", "shaderStorageTexelBufferArrayDynamicIndexing", offsetof(ManagedType, shaderStorageTexelBufferArrayDynamicIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageTexelBufferArrayDynamicIndexing)>(*mlib));
    addFieldEx("shaderUniformBufferArrayNonUniformIndexing", "shaderUniformBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderUniformBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderSampledImageArrayNonUniformIndexing", "shaderSampledImageArrayNonUniformIndexing", offsetof(ManagedType, shaderSampledImageArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampledImageArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageBufferArrayNonUniformIndexing", "shaderStorageBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageImageArrayNonUniformIndexing", "shaderStorageImageArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageImageArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayNonUniformIndexing", "shaderInputAttachmentArrayNonUniformIndexing", offsetof(ManagedType, shaderInputAttachmentArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderUniformTexelBufferArrayNonUniformIndexing", "shaderUniformTexelBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderUniformTexelBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformTexelBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("shaderStorageTexelBufferArrayNonUniformIndexing", "shaderStorageTexelBufferArrayNonUniformIndexing", offsetof(ManagedType, shaderStorageTexelBufferArrayNonUniformIndexing), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageTexelBufferArrayNonUniformIndexing)>(*mlib));
    addFieldEx("descriptorBindingUniformBufferUpdateAfterBind", "descriptorBindingUniformBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingUniformBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUniformBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingSampledImageUpdateAfterBind", "descriptorBindingSampledImageUpdateAfterBind", offsetof(ManagedType, descriptorBindingSampledImageUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingSampledImageUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageImageUpdateAfterBind", "descriptorBindingStorageImageUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageImageUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageImageUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageBufferUpdateAfterBind", "descriptorBindingStorageBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingUniformTexelBufferUpdateAfterBind", "descriptorBindingUniformTexelBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingUniformTexelBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUniformTexelBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingStorageTexelBufferUpdateAfterBind", "descriptorBindingStorageTexelBufferUpdateAfterBind", offsetof(ManagedType, descriptorBindingStorageTexelBufferUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingStorageTexelBufferUpdateAfterBind)>(*mlib));
    addFieldEx("descriptorBindingUpdateUnusedWhilePending", "descriptorBindingUpdateUnusedWhilePending", offsetof(ManagedType, descriptorBindingUpdateUnusedWhilePending), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingUpdateUnusedWhilePending)>(*mlib));
    addFieldEx("descriptorBindingPartiallyBound", "descriptorBindingPartiallyBound", offsetof(ManagedType, descriptorBindingPartiallyBound), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingPartiallyBound)>(*mlib));
    addFieldEx("descriptorBindingVariableDescriptorCount", "descriptorBindingVariableDescriptorCount", offsetof(ManagedType, descriptorBindingVariableDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingVariableDescriptorCount)>(*mlib));
    addFieldEx("runtimeDescriptorArray", "runtimeDescriptorArray", offsetof(ManagedType, runtimeDescriptorArray), das::makeFieldType<decltype(das::declval<ManagedType>().runtimeDescriptorArray)>(*mlib));
    addFieldEx("samplerFilterMinmax", "samplerFilterMinmax", offsetof(ManagedType, samplerFilterMinmax), das::makeFieldType<decltype(das::declval<ManagedType>().samplerFilterMinmax)>(*mlib));
    addFieldEx("scalarBlockLayout", "scalarBlockLayout", offsetof(ManagedType, scalarBlockLayout), das::makeFieldType<decltype(das::declval<ManagedType>().scalarBlockLayout)>(*mlib));
    addFieldEx("imagelessFramebuffer", "imagelessFramebuffer", offsetof(ManagedType, imagelessFramebuffer), das::makeFieldType<decltype(das::declval<ManagedType>().imagelessFramebuffer)>(*mlib));
    addFieldEx("uniformBufferStandardLayout", "uniformBufferStandardLayout", offsetof(ManagedType, uniformBufferStandardLayout), das::makeFieldType<decltype(das::declval<ManagedType>().uniformBufferStandardLayout)>(*mlib));
    addFieldEx("shaderSubgroupExtendedTypes", "shaderSubgroupExtendedTypes", offsetof(ManagedType, shaderSubgroupExtendedTypes), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupExtendedTypes)>(*mlib));
    addFieldEx("separateDepthStencilLayouts", "separateDepthStencilLayouts", offsetof(ManagedType, separateDepthStencilLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().separateDepthStencilLayouts)>(*mlib));
    addFieldEx("hostQueryReset", "hostQueryReset", offsetof(ManagedType, hostQueryReset), das::makeFieldType<decltype(das::declval<ManagedType>().hostQueryReset)>(*mlib));
    addFieldEx("timelineSemaphore", "timelineSemaphore", offsetof(ManagedType, timelineSemaphore), das::makeFieldType<decltype(das::declval<ManagedType>().timelineSemaphore)>(*mlib));
    addFieldEx("bufferDeviceAddress", "bufferDeviceAddress", offsetof(ManagedType, bufferDeviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddress)>(*mlib));
    addFieldEx("bufferDeviceAddressCaptureReplay", "bufferDeviceAddressCaptureReplay", offsetof(ManagedType, bufferDeviceAddressCaptureReplay), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressCaptureReplay)>(*mlib));
    addFieldEx("bufferDeviceAddressMultiDevice", "bufferDeviceAddressMultiDevice", offsetof(ManagedType, bufferDeviceAddressMultiDevice), das::makeFieldType<decltype(das::declval<ManagedType>().bufferDeviceAddressMultiDevice)>(*mlib));
    addFieldEx("vulkanMemoryModel", "vulkanMemoryModel", offsetof(ManagedType, vulkanMemoryModel), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModel)>(*mlib));
    addFieldEx("vulkanMemoryModelDeviceScope", "vulkanMemoryModelDeviceScope", offsetof(ManagedType, vulkanMemoryModelDeviceScope), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModelDeviceScope)>(*mlib));
    addFieldEx("vulkanMemoryModelAvailabilityVisibilityChains", "vulkanMemoryModelAvailabilityVisibilityChains", offsetof(ManagedType, vulkanMemoryModelAvailabilityVisibilityChains), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModelAvailabilityVisibilityChains)>(*mlib));
    addFieldEx("shaderOutputViewportIndex", "shaderOutputViewportIndex", offsetof(ManagedType, shaderOutputViewportIndex), das::makeFieldType<decltype(das::declval<ManagedType>().shaderOutputViewportIndex)>(*mlib));
    addFieldEx("shaderOutputLayer", "shaderOutputLayer", offsetof(ManagedType, shaderOutputLayer), das::makeFieldType<decltype(das::declval<ManagedType>().shaderOutputLayer)>(*mlib));
    addFieldEx("subgroupBroadcastDynamicId", "subgroupBroadcastDynamicId", offsetof(ManagedType, subgroupBroadcastDynamicId), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupBroadcastDynamicId)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVulkan12PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan12Properties> {
  VkPhysicalDeviceVulkan12PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan12Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("driverID", "driverID", offsetof(ManagedType, driverID), das::makeFieldType<decltype(das::declval<ManagedType>().driverID)>(*mlib));
    addFieldEx("driverName", "driverName", offsetof(ManagedType, driverName), das::makeFieldType<decltype(das::declval<ManagedType>().driverName)>(*mlib));
    addFieldEx("driverInfo", "driverInfo", offsetof(ManagedType, driverInfo), das::makeFieldType<decltype(das::declval<ManagedType>().driverInfo)>(*mlib));
    addFieldEx("conformanceVersion", "conformanceVersion", offsetof(ManagedType, conformanceVersion), das::makeFieldType<decltype(das::declval<ManagedType>().conformanceVersion)>(*mlib));
    addFieldEx("denormBehaviorIndependence", "denormBehaviorIndependence", offsetof(ManagedType, denormBehaviorIndependence), das::makeFieldType<decltype(das::declval<ManagedType>().denormBehaviorIndependence)>(*mlib));
    addFieldEx("roundingModeIndependence", "roundingModeIndependence", offsetof(ManagedType, roundingModeIndependence), das::makeFieldType<decltype(das::declval<ManagedType>().roundingModeIndependence)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat16", "shaderSignedZeroInfNanPreserveFloat16", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat16)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat32", "shaderSignedZeroInfNanPreserveFloat32", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat32)>(*mlib));
    addFieldEx("shaderSignedZeroInfNanPreserveFloat64", "shaderSignedZeroInfNanPreserveFloat64", offsetof(ManagedType, shaderSignedZeroInfNanPreserveFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSignedZeroInfNanPreserveFloat64)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat16", "shaderDenormPreserveFloat16", offsetof(ManagedType, shaderDenormPreserveFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat16)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat32", "shaderDenormPreserveFloat32", offsetof(ManagedType, shaderDenormPreserveFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat32)>(*mlib));
    addFieldEx("shaderDenormPreserveFloat64", "shaderDenormPreserveFloat64", offsetof(ManagedType, shaderDenormPreserveFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormPreserveFloat64)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat16", "shaderDenormFlushToZeroFloat16", offsetof(ManagedType, shaderDenormFlushToZeroFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat16)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat32", "shaderDenormFlushToZeroFloat32", offsetof(ManagedType, shaderDenormFlushToZeroFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat32)>(*mlib));
    addFieldEx("shaderDenormFlushToZeroFloat64", "shaderDenormFlushToZeroFloat64", offsetof(ManagedType, shaderDenormFlushToZeroFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDenormFlushToZeroFloat64)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat16", "shaderRoundingModeRTEFloat16", offsetof(ManagedType, shaderRoundingModeRTEFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat16)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat32", "shaderRoundingModeRTEFloat32", offsetof(ManagedType, shaderRoundingModeRTEFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat32)>(*mlib));
    addFieldEx("shaderRoundingModeRTEFloat64", "shaderRoundingModeRTEFloat64", offsetof(ManagedType, shaderRoundingModeRTEFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTEFloat64)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat16", "shaderRoundingModeRTZFloat16", offsetof(ManagedType, shaderRoundingModeRTZFloat16), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat16)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat32", "shaderRoundingModeRTZFloat32", offsetof(ManagedType, shaderRoundingModeRTZFloat32), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat32)>(*mlib));
    addFieldEx("shaderRoundingModeRTZFloat64", "shaderRoundingModeRTZFloat64", offsetof(ManagedType, shaderRoundingModeRTZFloat64), das::makeFieldType<decltype(das::declval<ManagedType>().shaderRoundingModeRTZFloat64)>(*mlib));
    addFieldEx("maxUpdateAfterBindDescriptorsInAllPools", "maxUpdateAfterBindDescriptorsInAllPools", offsetof(ManagedType, maxUpdateAfterBindDescriptorsInAllPools), das::makeFieldType<decltype(das::declval<ManagedType>().maxUpdateAfterBindDescriptorsInAllPools)>(*mlib));
    addFieldEx("shaderUniformBufferArrayNonUniformIndexingNative", "shaderUniformBufferArrayNonUniformIndexingNative", offsetof(ManagedType, shaderUniformBufferArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderUniformBufferArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderSampledImageArrayNonUniformIndexingNative", "shaderSampledImageArrayNonUniformIndexingNative", offsetof(ManagedType, shaderSampledImageArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSampledImageArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderStorageBufferArrayNonUniformIndexingNative", "shaderStorageBufferArrayNonUniformIndexingNative", offsetof(ManagedType, shaderStorageBufferArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageBufferArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderStorageImageArrayNonUniformIndexingNative", "shaderStorageImageArrayNonUniformIndexingNative", offsetof(ManagedType, shaderStorageImageArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStorageImageArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("shaderInputAttachmentArrayNonUniformIndexingNative", "shaderInputAttachmentArrayNonUniformIndexingNative", offsetof(ManagedType, shaderInputAttachmentArrayNonUniformIndexingNative), das::makeFieldType<decltype(das::declval<ManagedType>().shaderInputAttachmentArrayNonUniformIndexingNative)>(*mlib));
    addFieldEx("robustBufferAccessUpdateAfterBind", "robustBufferAccessUpdateAfterBind", offsetof(ManagedType, robustBufferAccessUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().robustBufferAccessUpdateAfterBind)>(*mlib));
    addFieldEx("quadDivergentImplicitLod", "quadDivergentImplicitLod", offsetof(ManagedType, quadDivergentImplicitLod), das::makeFieldType<decltype(das::declval<ManagedType>().quadDivergentImplicitLod)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindSamplers", "maxPerStageDescriptorUpdateAfterBindSamplers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindSamplers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindUniformBuffers", "maxPerStageDescriptorUpdateAfterBindUniformBuffers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindUniformBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindStorageBuffers", "maxPerStageDescriptorUpdateAfterBindStorageBuffers", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindStorageBuffers)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindSampledImages", "maxPerStageDescriptorUpdateAfterBindSampledImages", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindSampledImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindStorageImages", "maxPerStageDescriptorUpdateAfterBindStorageImages", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindStorageImages)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindInputAttachments", "maxPerStageDescriptorUpdateAfterBindInputAttachments", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindInputAttachments)>(*mlib));
    addFieldEx("maxPerStageUpdateAfterBindResources", "maxPerStageUpdateAfterBindResources", offsetof(ManagedType, maxPerStageUpdateAfterBindResources), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageUpdateAfterBindResources)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindSamplers", "maxDescriptorSetUpdateAfterBindSamplers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindSamplers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindSamplers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindUniformBuffers", "maxDescriptorSetUpdateAfterBindUniformBuffers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindUniformBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageBuffers", "maxDescriptorSetUpdateAfterBindStorageBuffers", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageBuffers)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindSampledImages", "maxDescriptorSetUpdateAfterBindSampledImages", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindSampledImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindSampledImages)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindStorageImages", "maxDescriptorSetUpdateAfterBindStorageImages", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindStorageImages), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindStorageImages)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindInputAttachments", "maxDescriptorSetUpdateAfterBindInputAttachments", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindInputAttachments)>(*mlib));
    addFieldEx("supportedDepthResolveModes", "supportedDepthResolveModes", offsetof(ManagedType, supportedDepthResolveModes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedDepthResolveModes)>(*mlib));
    addFieldEx("supportedStencilResolveModes", "supportedStencilResolveModes", offsetof(ManagedType, supportedStencilResolveModes), das::makeFieldType<decltype(das::declval<ManagedType>().supportedStencilResolveModes)>(*mlib));
    addFieldEx("independentResolveNone", "independentResolveNone", offsetof(ManagedType, independentResolveNone), das::makeFieldType<decltype(das::declval<ManagedType>().independentResolveNone)>(*mlib));
    addFieldEx("independentResolve", "independentResolve", offsetof(ManagedType, independentResolve), das::makeFieldType<decltype(das::declval<ManagedType>().independentResolve)>(*mlib));
    addFieldEx("filterMinmaxSingleComponentFormats", "filterMinmaxSingleComponentFormats", offsetof(ManagedType, filterMinmaxSingleComponentFormats), das::makeFieldType<decltype(das::declval<ManagedType>().filterMinmaxSingleComponentFormats)>(*mlib));
    addFieldEx("filterMinmaxImageComponentMapping", "filterMinmaxImageComponentMapping", offsetof(ManagedType, filterMinmaxImageComponentMapping), das::makeFieldType<decltype(das::declval<ManagedType>().filterMinmaxImageComponentMapping)>(*mlib));
    addFieldEx("maxTimelineSemaphoreValueDifference", "maxTimelineSemaphoreValueDifference", offsetof(ManagedType, maxTimelineSemaphoreValueDifference), das::makeFieldType<decltype(das::declval<ManagedType>().maxTimelineSemaphoreValueDifference)>(*mlib));
    addFieldEx("framebufferIntegerColorSampleCounts", "framebufferIntegerColorSampleCounts", offsetof(ManagedType, framebufferIntegerColorSampleCounts), das::makeFieldType<decltype(das::declval<ManagedType>().framebufferIntegerColorSampleCounts)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceVulkan13FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan13Features> {
  VkPhysicalDeviceVulkan13FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan13Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("robustImageAccess", "robustImageAccess", offsetof(ManagedType, robustImageAccess), das::makeFieldType<decltype(das::declval<ManagedType>().robustImageAccess)>(*mlib));
    addFieldEx("inlineUniformBlock", "inlineUniformBlock", offsetof(ManagedType, inlineUniformBlock), das::makeFieldType<decltype(das::declval<ManagedType>().inlineUniformBlock)>(*mlib));
    addFieldEx("descriptorBindingInlineUniformBlockUpdateAfterBind", "descriptorBindingInlineUniformBlockUpdateAfterBind", offsetof(ManagedType, descriptorBindingInlineUniformBlockUpdateAfterBind), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorBindingInlineUniformBlockUpdateAfterBind)>(*mlib));
    addFieldEx("pipelineCreationCacheControl", "pipelineCreationCacheControl", offsetof(ManagedType, pipelineCreationCacheControl), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCreationCacheControl)>(*mlib));
    addFieldEx("privateData", "privateData", offsetof(ManagedType, privateData), das::makeFieldType<decltype(das::declval<ManagedType>().privateData)>(*mlib));
    addFieldEx("shaderDemoteToHelperInvocation", "shaderDemoteToHelperInvocation", offsetof(ManagedType, shaderDemoteToHelperInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderDemoteToHelperInvocation)>(*mlib));
    addFieldEx("shaderTerminateInvocation", "shaderTerminateInvocation", offsetof(ManagedType, shaderTerminateInvocation), das::makeFieldType<decltype(das::declval<ManagedType>().shaderTerminateInvocation)>(*mlib));
    addFieldEx("subgroupSizeControl", "subgroupSizeControl", offsetof(ManagedType, subgroupSizeControl), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSizeControl)>(*mlib));
    addFieldEx("computeFullSubgroups", "computeFullSubgroups", offsetof(ManagedType, computeFullSubgroups), das::makeFieldType<decltype(das::declval<ManagedType>().computeFullSubgroups)>(*mlib));
    addFieldEx("synchronization2", "synchronization2", offsetof(ManagedType, synchronization2), das::makeFieldType<decltype(das::declval<ManagedType>().synchronization2)>(*mlib));
    addFieldEx("textureCompressionASTC_HDR", "textureCompressionASTC_HDR", offsetof(ManagedType, textureCompressionASTC_HDR), das::makeFieldType<decltype(das::declval<ManagedType>().textureCompressionASTC_HDR)>(*mlib));
    addFieldEx("shaderZeroInitializeWorkgroupMemory", "shaderZeroInitializeWorkgroupMemory", offsetof(ManagedType, shaderZeroInitializeWorkgroupMemory), das::makeFieldType<decltype(das::declval<ManagedType>().shaderZeroInitializeWorkgroupMemory)>(*mlib));
    addFieldEx("dynamicRendering", "dynamicRendering", offsetof(ManagedType, dynamicRendering), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRendering)>(*mlib));
    addFieldEx("shaderIntegerDotProduct", "shaderIntegerDotProduct", offsetof(ManagedType, shaderIntegerDotProduct), das::makeFieldType<decltype(das::declval<ManagedType>().shaderIntegerDotProduct)>(*mlib));
    addFieldEx("maintenance4", "maintenance4", offsetof(ManagedType, maintenance4), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance4)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVulkan13PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan13Properties> {
  VkPhysicalDeviceVulkan13PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan13Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minSubgroupSize", "minSubgroupSize", offsetof(ManagedType, minSubgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().minSubgroupSize)>(*mlib));
    addFieldEx("maxSubgroupSize", "maxSubgroupSize", offsetof(ManagedType, maxSubgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxSubgroupSize)>(*mlib));
    addFieldEx("maxComputeWorkgroupSubgroups", "maxComputeWorkgroupSubgroups", offsetof(ManagedType, maxComputeWorkgroupSubgroups), das::makeFieldType<decltype(das::declval<ManagedType>().maxComputeWorkgroupSubgroups)>(*mlib));
    addFieldEx("requiredSubgroupSizeStages", "requiredSubgroupSizeStages", offsetof(ManagedType, requiredSubgroupSizeStages), das::makeFieldType<decltype(das::declval<ManagedType>().requiredSubgroupSizeStages)>(*mlib));
    addFieldEx("maxInlineUniformBlockSize", "maxInlineUniformBlockSize", offsetof(ManagedType, maxInlineUniformBlockSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxInlineUniformBlockSize)>(*mlib));
    addFieldEx("maxPerStageDescriptorInlineUniformBlocks", "maxPerStageDescriptorInlineUniformBlocks", offsetof(ManagedType, maxPerStageDescriptorInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorInlineUniformBlocks)>(*mlib));
    addFieldEx("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", offsetof(ManagedType, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)>(*mlib));
    addFieldEx("maxDescriptorSetInlineUniformBlocks", "maxDescriptorSetInlineUniformBlocks", offsetof(ManagedType, maxDescriptorSetInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetInlineUniformBlocks)>(*mlib));
    addFieldEx("maxDescriptorSetUpdateAfterBindInlineUniformBlocks", "maxDescriptorSetUpdateAfterBindInlineUniformBlocks", offsetof(ManagedType, maxDescriptorSetUpdateAfterBindInlineUniformBlocks), das::makeFieldType<decltype(das::declval<ManagedType>().maxDescriptorSetUpdateAfterBindInlineUniformBlocks)>(*mlib));
    addFieldEx("maxInlineUniformTotalSize", "maxInlineUniformTotalSize", offsetof(ManagedType, maxInlineUniformTotalSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxInlineUniformTotalSize)>(*mlib));
    addFieldEx("integerDotProduct8BitUnsignedAccelerated", "integerDotProduct8BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct8BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct8BitSignedAccelerated", "integerDotProduct8BitSignedAccelerated", offsetof(ManagedType, integerDotProduct8BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct8BitMixedSignednessAccelerated", "integerDotProduct8BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct8BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct8BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedUnsignedAccelerated", "integerDotProduct4x8BitPackedUnsignedAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedSignedAccelerated", "integerDotProduct4x8BitPackedSignedAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct4x8BitPackedMixedSignednessAccelerated", "integerDotProduct4x8BitPackedMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct4x8BitPackedMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct4x8BitPackedMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitUnsignedAccelerated", "integerDotProduct16BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct16BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitSignedAccelerated", "integerDotProduct16BitSignedAccelerated", offsetof(ManagedType, integerDotProduct16BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct16BitMixedSignednessAccelerated", "integerDotProduct16BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct16BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct16BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitUnsignedAccelerated", "integerDotProduct32BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct32BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitSignedAccelerated", "integerDotProduct32BitSignedAccelerated", offsetof(ManagedType, integerDotProduct32BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct32BitMixedSignednessAccelerated", "integerDotProduct32BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct32BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct32BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitUnsignedAccelerated", "integerDotProduct64BitUnsignedAccelerated", offsetof(ManagedType, integerDotProduct64BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitSignedAccelerated", "integerDotProduct64BitSignedAccelerated", offsetof(ManagedType, integerDotProduct64BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProduct64BitMixedSignednessAccelerated", "integerDotProduct64BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProduct64BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProduct64BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitSignedAccelerated", "integerDotProductAccumulatingSaturating8BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitSignedAccelerated", "integerDotProductAccumulatingSaturating16BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitSignedAccelerated", "integerDotProductAccumulatingSaturating32BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitSignedAccelerated", "integerDotProductAccumulatingSaturating64BitSignedAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitSignedAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitSignedAccelerated)>(*mlib));
    addFieldEx("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", offsetof(ManagedType, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated), das::makeFieldType<decltype(das::declval<ManagedType>().integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)>(*mlib));
    addFieldEx("storageTexelBufferOffsetAlignmentBytes", "storageTexelBufferOffsetAlignmentBytes", offsetof(ManagedType, storageTexelBufferOffsetAlignmentBytes), das::makeFieldType<decltype(das::declval<ManagedType>().storageTexelBufferOffsetAlignmentBytes)>(*mlib));
    addFieldEx("storageTexelBufferOffsetSingleTexelAlignment", "storageTexelBufferOffsetSingleTexelAlignment", offsetof(ManagedType, storageTexelBufferOffsetSingleTexelAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().storageTexelBufferOffsetSingleTexelAlignment)>(*mlib));
    addFieldEx("uniformTexelBufferOffsetAlignmentBytes", "uniformTexelBufferOffsetAlignmentBytes", offsetof(ManagedType, uniformTexelBufferOffsetAlignmentBytes), das::makeFieldType<decltype(das::declval<ManagedType>().uniformTexelBufferOffsetAlignmentBytes)>(*mlib));
    addFieldEx("uniformTexelBufferOffsetSingleTexelAlignment", "uniformTexelBufferOffsetSingleTexelAlignment", offsetof(ManagedType, uniformTexelBufferOffsetSingleTexelAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().uniformTexelBufferOffsetSingleTexelAlignment)>(*mlib));
    addFieldEx("maxBufferSize", "maxBufferSize", offsetof(ManagedType, maxBufferSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxBufferSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkPhysicalDeviceVulkan14FeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan14Features> {
  VkPhysicalDeviceVulkan14FeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan14Features", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("globalPriorityQuery", "globalPriorityQuery", offsetof(ManagedType, globalPriorityQuery), das::makeFieldType<decltype(das::declval<ManagedType>().globalPriorityQuery)>(*mlib));
    addFieldEx("shaderSubgroupRotate", "shaderSubgroupRotate", offsetof(ManagedType, shaderSubgroupRotate), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupRotate)>(*mlib));
    addFieldEx("shaderSubgroupRotateClustered", "shaderSubgroupRotateClustered", offsetof(ManagedType, shaderSubgroupRotateClustered), das::makeFieldType<decltype(das::declval<ManagedType>().shaderSubgroupRotateClustered)>(*mlib));
    addFieldEx("shaderFloatControls2", "shaderFloatControls2", offsetof(ManagedType, shaderFloatControls2), das::makeFieldType<decltype(das::declval<ManagedType>().shaderFloatControls2)>(*mlib));
    addFieldEx("shaderExpectAssume", "shaderExpectAssume", offsetof(ManagedType, shaderExpectAssume), das::makeFieldType<decltype(das::declval<ManagedType>().shaderExpectAssume)>(*mlib));
    addFieldEx("rectangularLines", "rectangularLines", offsetof(ManagedType, rectangularLines), das::makeFieldType<decltype(das::declval<ManagedType>().rectangularLines)>(*mlib));
    addFieldEx("bresenhamLines", "bresenhamLines", offsetof(ManagedType, bresenhamLines), das::makeFieldType<decltype(das::declval<ManagedType>().bresenhamLines)>(*mlib));
    addFieldEx("smoothLines", "smoothLines", offsetof(ManagedType, smoothLines), das::makeFieldType<decltype(das::declval<ManagedType>().smoothLines)>(*mlib));
    addFieldEx("stippledRectangularLines", "stippledRectangularLines", offsetof(ManagedType, stippledRectangularLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledRectangularLines)>(*mlib));
    addFieldEx("stippledBresenhamLines", "stippledBresenhamLines", offsetof(ManagedType, stippledBresenhamLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledBresenhamLines)>(*mlib));
    addFieldEx("stippledSmoothLines", "stippledSmoothLines", offsetof(ManagedType, stippledSmoothLines), das::makeFieldType<decltype(das::declval<ManagedType>().stippledSmoothLines)>(*mlib));
    addFieldEx("vertexAttributeInstanceRateDivisor", "vertexAttributeInstanceRateDivisor", offsetof(ManagedType, vertexAttributeInstanceRateDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeInstanceRateDivisor)>(*mlib));
    addFieldEx("vertexAttributeInstanceRateZeroDivisor", "vertexAttributeInstanceRateZeroDivisor", offsetof(ManagedType, vertexAttributeInstanceRateZeroDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().vertexAttributeInstanceRateZeroDivisor)>(*mlib));
    addFieldEx("indexTypeUint8", "indexTypeUint8", offsetof(ManagedType, indexTypeUint8), das::makeFieldType<decltype(das::declval<ManagedType>().indexTypeUint8)>(*mlib));
    addFieldEx("dynamicRenderingLocalRead", "dynamicRenderingLocalRead", offsetof(ManagedType, dynamicRenderingLocalRead), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRenderingLocalRead)>(*mlib));
    addFieldEx("maintenance5", "maintenance5", offsetof(ManagedType, maintenance5), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance5)>(*mlib));
    addFieldEx("maintenance6", "maintenance6", offsetof(ManagedType, maintenance6), das::makeFieldType<decltype(das::declval<ManagedType>().maintenance6)>(*mlib));
    addFieldEx("pipelineProtectedAccess", "pipelineProtectedAccess", offsetof(ManagedType, pipelineProtectedAccess), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineProtectedAccess)>(*mlib));
    addFieldEx("pipelineRobustness", "pipelineRobustness", offsetof(ManagedType, pipelineRobustness), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineRobustness)>(*mlib));
    addFieldEx("hostImageCopy", "hostImageCopy", offsetof(ManagedType, hostImageCopy), das::makeFieldType<decltype(das::declval<ManagedType>().hostImageCopy)>(*mlib));
    addFieldEx("pushDescriptor", "pushDescriptor", offsetof(ManagedType, pushDescriptor), das::makeFieldType<decltype(das::declval<ManagedType>().pushDescriptor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPhysicalDeviceVulkan14PropertiesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkan14Properties> {
  VkPhysicalDeviceVulkan14PropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkan14Properties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("lineSubPixelPrecisionBits", "lineSubPixelPrecisionBits", offsetof(ManagedType, lineSubPixelPrecisionBits), das::makeFieldType<decltype(das::declval<ManagedType>().lineSubPixelPrecisionBits)>(*mlib));
    addFieldEx("maxVertexAttribDivisor", "maxVertexAttribDivisor", offsetof(ManagedType, maxVertexAttribDivisor), das::makeFieldType<decltype(das::declval<ManagedType>().maxVertexAttribDivisor)>(*mlib));
    addFieldEx("supportsNonZeroFirstInstance", "supportsNonZeroFirstInstance", offsetof(ManagedType, supportsNonZeroFirstInstance), das::makeFieldType<decltype(das::declval<ManagedType>().supportsNonZeroFirstInstance)>(*mlib));
    addFieldEx("maxPushDescriptors", "maxPushDescriptors", offsetof(ManagedType, maxPushDescriptors), das::makeFieldType<decltype(das::declval<ManagedType>().maxPushDescriptors)>(*mlib));
    addFieldEx("dynamicRenderingLocalReadDepthStencilAttachments", "dynamicRenderingLocalReadDepthStencilAttachments", offsetof(ManagedType, dynamicRenderingLocalReadDepthStencilAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRenderingLocalReadDepthStencilAttachments)>(*mlib));
    addFieldEx("dynamicRenderingLocalReadMultisampledAttachments", "dynamicRenderingLocalReadMultisampledAttachments", offsetof(ManagedType, dynamicRenderingLocalReadMultisampledAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().dynamicRenderingLocalReadMultisampledAttachments)>(*mlib));
    addFieldEx("earlyFragmentMultisampleCoverageAfterSampleCounting", "earlyFragmentMultisampleCoverageAfterSampleCounting", offsetof(ManagedType, earlyFragmentMultisampleCoverageAfterSampleCounting), das::makeFieldType<decltype(das::declval<ManagedType>().earlyFragmentMultisampleCoverageAfterSampleCounting)>(*mlib));
    addFieldEx("earlyFragmentSampleMaskTestBeforeSampleCounting", "earlyFragmentSampleMaskTestBeforeSampleCounting", offsetof(ManagedType, earlyFragmentSampleMaskTestBeforeSampleCounting), das::makeFieldType<decltype(das::declval<ManagedType>().earlyFragmentSampleMaskTestBeforeSampleCounting)>(*mlib));
    addFieldEx("depthStencilSwizzleOneSupport", "depthStencilSwizzleOneSupport", offsetof(ManagedType, depthStencilSwizzleOneSupport), das::makeFieldType<decltype(das::declval<ManagedType>().depthStencilSwizzleOneSupport)>(*mlib));
    addFieldEx("polygonModePointSize", "polygonModePointSize", offsetof(ManagedType, polygonModePointSize), das::makeFieldType<decltype(das::declval<ManagedType>().polygonModePointSize)>(*mlib));
    addFieldEx("nonStrictSinglePixelWideLinesUseParallelogram", "nonStrictSinglePixelWideLinesUseParallelogram", offsetof(ManagedType, nonStrictSinglePixelWideLinesUseParallelogram), das::makeFieldType<decltype(das::declval<ManagedType>().nonStrictSinglePixelWideLinesUseParallelogram)>(*mlib));
    addFieldEx("nonStrictWideLinesUseParallelogram", "nonStrictWideLinesUseParallelogram", offsetof(ManagedType, nonStrictWideLinesUseParallelogram), das::makeFieldType<decltype(das::declval<ManagedType>().nonStrictWideLinesUseParallelogram)>(*mlib));
    addFieldEx("blockTexelViewCompatibleMultipleLayers", "blockTexelViewCompatibleMultipleLayers", offsetof(ManagedType, blockTexelViewCompatibleMultipleLayers), das::makeFieldType<decltype(das::declval<ManagedType>().blockTexelViewCompatibleMultipleLayers)>(*mlib));
    addFieldEx("maxCombinedImageSamplerDescriptorCount", "maxCombinedImageSamplerDescriptorCount", offsetof(ManagedType, maxCombinedImageSamplerDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxCombinedImageSamplerDescriptorCount)>(*mlib));
    addFieldEx("fragmentShadingRateClampCombinerInputs", "fragmentShadingRateClampCombinerInputs", offsetof(ManagedType, fragmentShadingRateClampCombinerInputs), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentShadingRateClampCombinerInputs)>(*mlib));
    addFieldEx("defaultRobustnessStorageBuffers", "defaultRobustnessStorageBuffers", offsetof(ManagedType, defaultRobustnessStorageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessStorageBuffers)>(*mlib));
    addFieldEx("defaultRobustnessUniformBuffers", "defaultRobustnessUniformBuffers", offsetof(ManagedType, defaultRobustnessUniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessUniformBuffers)>(*mlib));
    addFieldEx("defaultRobustnessVertexInputs", "defaultRobustnessVertexInputs", offsetof(ManagedType, defaultRobustnessVertexInputs), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessVertexInputs)>(*mlib));
    addFieldEx("defaultRobustnessImages", "defaultRobustnessImages", offsetof(ManagedType, defaultRobustnessImages), das::makeFieldType<decltype(das::declval<ManagedType>().defaultRobustnessImages)>(*mlib));
    addFieldEx("copySrcLayoutCount", "copySrcLayoutCount", offsetof(ManagedType, copySrcLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().copySrcLayoutCount)>(*mlib));
    addFieldEx("pCopySrcLayouts", "pCopySrcLayouts", offsetof(ManagedType, pCopySrcLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pCopySrcLayouts)>(*mlib));
    addFieldEx("copyDstLayoutCount", "copyDstLayoutCount", offsetof(ManagedType, copyDstLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().copyDstLayoutCount)>(*mlib));
    addFieldEx("pCopyDstLayouts", "pCopyDstLayouts", offsetof(ManagedType, pCopyDstLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pCopyDstLayouts)>(*mlib));
    addFieldEx("optimalTilingLayoutUUID", "optimalTilingLayoutUUID", offsetof(ManagedType, optimalTilingLayoutUUID), das::makeFieldType<decltype(das::declval<ManagedType>().optimalTilingLayoutUUID)>(*mlib));
    addFieldEx("identicalMemoryTypeRequirements", "identicalMemoryTypeRequirements", offsetof(ManagedType, identicalMemoryTypeRequirements), das::makeFieldType<decltype(das::declval<ManagedType>().identicalMemoryTypeRequirements)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
struct VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceVulkanMemoryModelFeatures> {
  VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceVulkanMemoryModelFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vulkanMemoryModel", "vulkanMemoryModel", offsetof(ManagedType, vulkanMemoryModel), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModel)>(*mlib));
    addFieldEx("vulkanMemoryModelDeviceScope", "vulkanMemoryModelDeviceScope", offsetof(ManagedType, vulkanMemoryModelDeviceScope), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModelDeviceScope)>(*mlib));
    addFieldEx("vulkanMemoryModelAvailabilityVisibilityChains", "vulkanMemoryModelAvailabilityVisibilityChains", offsetof(ManagedType, vulkanMemoryModelAvailabilityVisibilityChains), das::makeFieldType<decltype(das::declval<ManagedType>().vulkanMemoryModelAvailabilityVisibilityChains)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_workgroup_memory_explicit_layout)
struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR> {
  VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("workgroupMemoryExplicitLayout", "workgroupMemoryExplicitLayout", offsetof(ManagedType, workgroupMemoryExplicitLayout), das::makeFieldType<decltype(das::declval<ManagedType>().workgroupMemoryExplicitLayout)>(*mlib));
    addFieldEx("workgroupMemoryExplicitLayoutScalarBlockLayout", "workgroupMemoryExplicitLayoutScalarBlockLayout", offsetof(ManagedType, workgroupMemoryExplicitLayoutScalarBlockLayout), das::makeFieldType<decltype(das::declval<ManagedType>().workgroupMemoryExplicitLayoutScalarBlockLayout)>(*mlib));
    addFieldEx("workgroupMemoryExplicitLayout8BitAccess", "workgroupMemoryExplicitLayout8BitAccess", offsetof(ManagedType, workgroupMemoryExplicitLayout8BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().workgroupMemoryExplicitLayout8BitAccess)>(*mlib));
    addFieldEx("workgroupMemoryExplicitLayout16BitAccess", "workgroupMemoryExplicitLayout16BitAccess", offsetof(ManagedType, workgroupMemoryExplicitLayout16BitAccess), das::makeFieldType<decltype(das::declval<ManagedType>().workgroupMemoryExplicitLayout16BitAccess)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_workgroup_memory_explicit_layout) */
#if defined(VK_EXT_ycbcr_2plane_444_formats)
struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT> {
  VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("ycbcr2plane444Formats", "ycbcr2plane444Formats", offsetof(ManagedType, ycbcr2plane444Formats), das::makeFieldType<decltype(das::declval<ManagedType>().ycbcr2plane444Formats)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_ycbcr_2plane_444_formats) */
#if defined(VK_QCOM_ycbcr_degamma)
struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOMAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM> {
  VkPhysicalDeviceYcbcrDegammaFeaturesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceYcbcrDegammaFeaturesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("ycbcrDegamma", "ycbcrDegamma", offsetof(ManagedType, ycbcrDegamma), das::makeFieldType<decltype(das::declval<ManagedType>().ycbcrDegamma)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_ycbcr_degamma) */
#if defined(VK_EXT_ycbcr_image_arrays)
struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT> {
  VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceYcbcrImageArraysFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("ycbcrImageArrays", "ycbcrImageArrays", offsetof(ManagedType, ycbcrImageArrays), das::makeFieldType<decltype(das::declval<ManagedType>().ycbcrImageArrays)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_ycbcr_image_arrays) */
#if defined(VK_VERSION_1_3)
struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesAnnotation : ManagedStructureAnnotation<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures> {
  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shaderZeroInitializeWorkgroupMemory", "shaderZeroInitializeWorkgroupMemory", offsetof(ManagedType, shaderZeroInitializeWorkgroupMemory), das::makeFieldType<decltype(das::declval<ManagedType>().shaderZeroInitializeWorkgroupMemory)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_pipeline_binary)
struct VkPipelineBinaryDataKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryDataKHR> {
  VkPipelineBinaryDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryDataKHR", lib) {
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryKeyKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryKeyKHR> {
  VkPipelineBinaryKeyKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryKeyKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("keySize", "keySize", offsetof(ManagedType, keySize), das::makeFieldType<decltype(das::declval<ManagedType>().keySize)>(*mlib));
    addFieldEx("key", "key", offsetof(ManagedType, key), das::makeFieldType<decltype(das::declval<ManagedType>().key)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryKeysAndDataKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryKeysAndDataKHR> {
  VkPipelineBinaryKeysAndDataKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryKeysAndDataKHR", lib) {
    addFieldEx("binaryCount", "binaryCount", offsetof(ManagedType, binaryCount), das::makeFieldType<decltype(das::declval<ManagedType>().binaryCount)>(*mlib));
    addFieldEx("pPipelineBinaryKeys", "pPipelineBinaryKeys", offsetof(ManagedType, pPipelineBinaryKeys), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineBinaryKeys)>(*mlib));
    addFieldEx("pPipelineBinaryData", "pPipelineBinaryData", offsetof(ManagedType, pPipelineBinaryData), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineBinaryData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineCreateInfoKHR> {
  VkPipelineCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryCreateInfoKHR> {
  VkPipelineBinaryCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pKeysAndDataInfo", "pKeysAndDataInfo", offsetof(ManagedType, pKeysAndDataInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pKeysAndDataInfo)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
    addFieldEx("pPipelineCreateInfo", "pPipelineCreateInfo", offsetof(ManagedType, pPipelineCreateInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineCreateInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryDataInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryDataInfoKHR> {
  VkPipelineBinaryDataInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryDataInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBinary", "pipelineBinary", offsetof(ManagedType, pipelineBinary), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinary)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryHandlesInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryHandlesInfoKHR> {
  VkPipelineBinaryHandlesInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryHandlesInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBinaryCount", "pipelineBinaryCount", offsetof(ManagedType, pipelineBinaryCount), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBinaryCount)>(*mlib));
    addFieldEx("pPipelineBinaries", "pPipelineBinaries", offsetof(ManagedType, pPipelineBinaries), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineBinaries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineBinaryInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineBinaryInfoKHR> {
  VkPipelineBinaryInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineBinaryInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("binaryCount", "binaryCount", offsetof(ManagedType, binaryCount), das::makeFieldType<decltype(das::declval<ManagedType>().binaryCount)>(*mlib));
    addFieldEx("pPipelineBinaries", "pPipelineBinaries", offsetof(ManagedType, pPipelineBinaries), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineBinaries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_0)
struct VkPipelineCacheCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineCacheCreateInfo> {
  VkPipelineCacheCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCacheCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("initialDataSize", "initialDataSize", offsetof(ManagedType, initialDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().initialDataSize)>(*mlib));
    addFieldEx("pInitialData", "pInitialData", offsetof(ManagedType, pInitialData), das::makeFieldType<decltype(das::declval<ManagedType>().pInitialData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineCacheHeaderVersionOneAnnotation : ManagedStructureAnnotation<VkPipelineCacheHeaderVersionOne> {
  VkPipelineCacheHeaderVersionOneAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCacheHeaderVersionOne", lib) {
    addFieldEx("headerSize", "headerSize", offsetof(ManagedType, headerSize), das::makeFieldType<decltype(das::declval<ManagedType>().headerSize)>(*mlib));
    addFieldEx("headerVersion", "headerVersion", offsetof(ManagedType, headerVersion), das::makeFieldType<decltype(das::declval<ManagedType>().headerVersion)>(*mlib));
    addFieldEx("vendorID", "vendorID", offsetof(ManagedType, vendorID), das::makeFieldType<decltype(das::declval<ManagedType>().vendorID)>(*mlib));
    addFieldEx("deviceID", "deviceID", offsetof(ManagedType, deviceID), das::makeFieldType<decltype(das::declval<ManagedType>().deviceID)>(*mlib));
    addFieldEx("pipelineCacheUUID", "pipelineCacheUUID", offsetof(ManagedType, pipelineCacheUUID), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineCacheUUID)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_blend_operation_advanced)
struct VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineColorBlendAdvancedStateCreateInfoEXT> {
  VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineColorBlendAdvancedStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcPremultiplied", "srcPremultiplied", offsetof(ManagedType, srcPremultiplied), das::makeFieldType<decltype(das::declval<ManagedType>().srcPremultiplied)>(*mlib));
    addFieldEx("dstPremultiplied", "dstPremultiplied", offsetof(ManagedType, dstPremultiplied), das::makeFieldType<decltype(das::declval<ManagedType>().dstPremultiplied)>(*mlib));
    addFieldEx("blendOverlap", "blendOverlap", offsetof(ManagedType, blendOverlap), das::makeFieldType<decltype(das::declval<ManagedType>().blendOverlap)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_blend_operation_advanced) */
#if defined(VK_EXT_color_write_enable)
struct VkPipelineColorWriteCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineColorWriteCreateInfoEXT> {
  VkPipelineColorWriteCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineColorWriteCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pColorWriteEnables", "pColorWriteEnables", offsetof(ManagedType, pColorWriteEnables), das::makeFieldType<decltype(das::declval<ManagedType>().pColorWriteEnables)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_AMD_pipeline_compiler_control)
struct VkPipelineCompilerControlCreateInfoAMDAnnotation : ManagedStructureAnnotation<VkPipelineCompilerControlCreateInfoAMD> {
  VkPipelineCompilerControlCreateInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCompilerControlCreateInfoAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("compilerControlFlags", "compilerControlFlags", offsetof(ManagedType, compilerControlFlags), das::makeFieldType<decltype(das::declval<ManagedType>().compilerControlFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_pipeline_compiler_control) */
#if defined(VK_NV_framebuffer_mixed_samples)
struct VkPipelineCoverageModulationStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineCoverageModulationStateCreateInfoNV> {
  VkPipelineCoverageModulationStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCoverageModulationStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("coverageModulationMode", "coverageModulationMode", offsetof(ManagedType, coverageModulationMode), das::makeFieldType<decltype(das::declval<ManagedType>().coverageModulationMode)>(*mlib));
    addFieldEx("coverageModulationTableEnable", "coverageModulationTableEnable", offsetof(ManagedType, coverageModulationTableEnable), das::makeFieldType<decltype(das::declval<ManagedType>().coverageModulationTableEnable)>(*mlib));
    addFieldEx("coverageModulationTableCount", "coverageModulationTableCount", offsetof(ManagedType, coverageModulationTableCount), das::makeFieldType<decltype(das::declval<ManagedType>().coverageModulationTableCount)>(*mlib));
    addFieldEx("pCoverageModulationTable", "pCoverageModulationTable", offsetof(ManagedType, pCoverageModulationTable), das::makeFieldType<decltype(das::declval<ManagedType>().pCoverageModulationTable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_framebuffer_mixed_samples) */
#if defined(VK_NV_coverage_reduction_mode)
struct VkPipelineCoverageReductionStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineCoverageReductionStateCreateInfoNV> {
  VkPipelineCoverageReductionStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCoverageReductionStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("coverageReductionMode", "coverageReductionMode", offsetof(ManagedType, coverageReductionMode), das::makeFieldType<decltype(das::declval<ManagedType>().coverageReductionMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_fragment_coverage_to_color)
struct VkPipelineCoverageToColorStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineCoverageToColorStateCreateInfoNV> {
  VkPipelineCoverageToColorStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCoverageToColorStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("coverageToColorEnable", "coverageToColorEnable", offsetof(ManagedType, coverageToColorEnable), das::makeFieldType<decltype(das::declval<ManagedType>().coverageToColorEnable)>(*mlib));
    addFieldEx("coverageToColorLocation", "coverageToColorLocation", offsetof(ManagedType, coverageToColorLocation), das::makeFieldType<decltype(das::declval<ManagedType>().coverageToColorLocation)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_fragment_coverage_to_color) */
#if defined(VK_VERSION_1_4)
struct VkPipelineCreateFlags2CreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineCreateFlags2CreateInfo> {
  VkPipelineCreateFlags2CreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCreateFlags2CreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
struct VkPipelineCreationFeedbackAnnotation : ManagedStructureAnnotation<VkPipelineCreationFeedback> {
  VkPipelineCreationFeedbackAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCreationFeedback", lib) {
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("duration", "duration", offsetof(ManagedType, duration), das::makeFieldType<decltype(das::declval<ManagedType>().duration)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineCreationFeedbackCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineCreationFeedbackCreateInfo> {
  VkPipelineCreationFeedbackCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineCreationFeedbackCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pPipelineCreationFeedback", "pPipelineCreationFeedback", offsetof(ManagedType, pPipelineCreationFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineCreationFeedback)>(*mlib));
    addFieldEx("pipelineStageCreationFeedbackCount", "pipelineStageCreationFeedbackCount", offsetof(ManagedType, pipelineStageCreationFeedbackCount), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineStageCreationFeedbackCount)>(*mlib));
    addFieldEx("pPipelineStageCreationFeedbacks", "pPipelineStageCreationFeedbacks", offsetof(ManagedType, pPipelineStageCreationFeedbacks), das::makeFieldType<decltype(das::declval<ManagedType>().pPipelineStageCreationFeedbacks)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_discard_rectangles)
struct VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineDiscardRectangleStateCreateInfoEXT> {
  VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineDiscardRectangleStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("discardRectangleMode", "discardRectangleMode", offsetof(ManagedType, discardRectangleMode), das::makeFieldType<decltype(das::declval<ManagedType>().discardRectangleMode)>(*mlib));
    addFieldEx("discardRectangleCount", "discardRectangleCount", offsetof(ManagedType, discardRectangleCount), das::makeFieldType<decltype(das::declval<ManagedType>().discardRectangleCount)>(*mlib));
    addFieldEx("pDiscardRectangles", "pDiscardRectangles", offsetof(ManagedType, pDiscardRectangles), das::makeFieldType<decltype(das::declval<ManagedType>().pDiscardRectangles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_KHR_pipeline_executable_properties)
struct VkPipelineExecutableInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineExecutableInfoKHR> {
  VkPipelineExecutableInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineExecutableInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
    addFieldEx("executableIndex", "executableIndex", offsetof(ManagedType, executableIndex), das::makeFieldType<decltype(das::declval<ManagedType>().executableIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineExecutableInternalRepresentationKHRAnnotation : ManagedStructureAnnotation<VkPipelineExecutableInternalRepresentationKHR> {
  VkPipelineExecutableInternalRepresentationKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineExecutableInternalRepresentationKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("isText", "isText", offsetof(ManagedType, isText), das::makeFieldType<decltype(das::declval<ManagedType>().isText)>(*mlib));
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineExecutablePropertiesKHRAnnotation : ManagedStructureAnnotation<VkPipelineExecutablePropertiesKHR> {
  VkPipelineExecutablePropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineExecutablePropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stages", "stages", offsetof(ManagedType, stages), das::makeFieldType<decltype(das::declval<ManagedType>().stages)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("subgroupSize", "subgroupSize", offsetof(ManagedType, subgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().subgroupSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineExecutableStatisticValueKHRAnnotation : ManagedStructureAnnotation<VkPipelineExecutableStatisticValueKHR> {
  VkPipelineExecutableStatisticValueKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineExecutableStatisticValueKHR", lib) {
    addFieldEx("b32", "b32", offsetof(ManagedType, b32), das::makeFieldType<decltype(das::declval<ManagedType>().b32)>(*mlib));
    addFieldEx("i64", "i64", offsetof(ManagedType, i64), das::makeFieldType<decltype(das::declval<ManagedType>().i64)>(*mlib));
    addFieldEx("u64", "u64", offsetof(ManagedType, u64), das::makeFieldType<decltype(das::declval<ManagedType>().u64)>(*mlib));
    addFieldEx("f64", "f64", offsetof(ManagedType, f64), das::makeFieldType<decltype(das::declval<ManagedType>().f64)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineExecutableStatisticKHRAnnotation : ManagedStructureAnnotation<VkPipelineExecutableStatisticKHR> {
  VkPipelineExecutableStatisticKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineExecutableStatisticKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("name", "name", offsetof(ManagedType, name), das::makeFieldType<decltype(das::declval<ManagedType>().name)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("value", "value", offsetof(ManagedType, value), das::makeFieldType<decltype(das::declval<ManagedType>().value)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_NV_fragment_shading_rate_enums)
struct VkPipelineFragmentShadingRateEnumStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineFragmentShadingRateEnumStateCreateInfoNV> {
  VkPipelineFragmentShadingRateEnumStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineFragmentShadingRateEnumStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shadingRateType", "shadingRateType", offsetof(ManagedType, shadingRateType), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateType)>(*mlib));
    addFieldEx("shadingRate", "shadingRate", offsetof(ManagedType, shadingRate), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRate)>(*mlib));
    addFieldEx("combinerOps", "combinerOps", offsetof(ManagedType, combinerOps), das::makeFieldType<decltype(das::declval<ManagedType>().combinerOps)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_KHR_fragment_shading_rate)
struct VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineFragmentShadingRateStateCreateInfoKHR> {
  VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineFragmentShadingRateStateCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentSize", "fragmentSize", offsetof(ManagedType, fragmentSize), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentSize)>(*mlib));
    addFieldEx("combinerOps", "combinerOps", offsetof(ManagedType, combinerOps), das::makeFieldType<decltype(das::declval<ManagedType>().combinerOps)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_NV_device_generated_commands_compute)
struct VkPipelineIndirectDeviceAddressInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineIndirectDeviceAddressInfoNV> {
  VkPipelineIndirectDeviceAddressInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineIndirectDeviceAddressInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_KHR_pipeline_executable_properties)
struct VkPipelineInfoKHRAnnotation : ManagedStructureAnnotation<VkPipelineInfoKHR> {
  VkPipelineInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_VERSION_1_0)
struct VkPipelineLayoutCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineLayoutCreateInfo> {
  VkPipelineLayoutCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineLayoutCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("setLayoutCount", "setLayoutCount", offsetof(ManagedType, setLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().setLayoutCount)>(*mlib));
    addFieldEx("pSetLayouts", "pSetLayouts", offsetof(ManagedType, pSetLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pSetLayouts)>(*mlib));
    addFieldEx("pushConstantRangeCount", "pushConstantRangeCount", offsetof(ManagedType, pushConstantRangeCount), das::makeFieldType<decltype(das::declval<ManagedType>().pushConstantRangeCount)>(*mlib));
    addFieldEx("pPushConstantRanges", "pPushConstantRanges", offsetof(ManagedType, pPushConstantRanges), das::makeFieldType<decltype(das::declval<ManagedType>().pPushConstantRanges)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_pipeline_properties)
struct VkPipelinePropertiesIdentifierEXTAnnotation : ManagedStructureAnnotation<VkPipelinePropertiesIdentifierEXT> {
  VkPipelinePropertiesIdentifierEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelinePropertiesIdentifierEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipelineIdentifier", "pipelineIdentifier", offsetof(ManagedType, pipelineIdentifier), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineIdentifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_conservative_rasterization)
struct VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationConservativeStateCreateInfoEXT> {
  VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationConservativeStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("conservativeRasterizationMode", "conservativeRasterizationMode", offsetof(ManagedType, conservativeRasterizationMode), das::makeFieldType<decltype(das::declval<ManagedType>().conservativeRasterizationMode)>(*mlib));
    addFieldEx("extraPrimitiveOverestimationSize", "extraPrimitiveOverestimationSize", offsetof(ManagedType, extraPrimitiveOverestimationSize), das::makeFieldType<decltype(das::declval<ManagedType>().extraPrimitiveOverestimationSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_conservative_rasterization) */
#if defined(VK_EXT_depth_clip_enable)
struct VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationDepthClipStateCreateInfoEXT> {
  VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationDepthClipStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("depthClipEnable", "depthClipEnable", offsetof(ManagedType, depthClipEnable), das::makeFieldType<decltype(das::declval<ManagedType>().depthClipEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clip_enable) */
#if defined(VK_VERSION_1_4)
struct VkPipelineRasterizationLineStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationLineStateCreateInfo> {
  VkPipelineRasterizationLineStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationLineStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("lineRasterizationMode", "lineRasterizationMode", offsetof(ManagedType, lineRasterizationMode), das::makeFieldType<decltype(das::declval<ManagedType>().lineRasterizationMode)>(*mlib));
    addFieldEx("stippledLineEnable", "stippledLineEnable", offsetof(ManagedType, stippledLineEnable), das::makeFieldType<decltype(das::declval<ManagedType>().stippledLineEnable)>(*mlib));
    addFieldEx("lineStippleFactor", "lineStippleFactor", offsetof(ManagedType, lineStippleFactor), das::makeFieldType<decltype(das::declval<ManagedType>().lineStippleFactor)>(*mlib));
    addFieldEx("lineStipplePattern", "lineStipplePattern", offsetof(ManagedType, lineStipplePattern), das::makeFieldType<decltype(das::declval<ManagedType>().lineStipplePattern)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_provoking_vertex)
struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationProvokingVertexStateCreateInfoEXT> {
  VkPipelineRasterizationProvokingVertexStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationProvokingVertexStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("provokingVertexMode", "provokingVertexMode", offsetof(ManagedType, provokingVertexMode), das::makeFieldType<decltype(das::declval<ManagedType>().provokingVertexMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_provoking_vertex) */
#if defined(VK_AMD_rasterization_order)
struct VkPipelineRasterizationStateRasterizationOrderAMDAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationStateRasterizationOrderAMD> {
  VkPipelineRasterizationStateRasterizationOrderAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationStateRasterizationOrderAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("rasterizationOrder", "rasterizationOrder", offsetof(ManagedType, rasterizationOrder), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationOrder)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_rasterization_order) */
#if defined(VK_EXT_transform_feedback)
struct VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineRasterizationStateStreamCreateInfoEXT> {
  VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRasterizationStateStreamCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("rasterizationStream", "rasterizationStream", offsetof(ManagedType, rasterizationStream), das::makeFieldType<decltype(das::declval<ManagedType>().rasterizationStream)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_VERSION_1_3)
struct VkPipelineRenderingCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineRenderingCreateInfo> {
  VkPipelineRenderingCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRenderingCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("viewMask", "viewMask", offsetof(ManagedType, viewMask), das::makeFieldType<decltype(das::declval<ManagedType>().viewMask)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentFormats", "pColorAttachmentFormats", offsetof(ManagedType, pColorAttachmentFormats), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentFormats)>(*mlib));
    addFieldEx("depthAttachmentFormat", "depthAttachmentFormat", offsetof(ManagedType, depthAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().depthAttachmentFormat)>(*mlib));
    addFieldEx("stencilAttachmentFormat", "stencilAttachmentFormat", offsetof(ManagedType, stencilAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().stencilAttachmentFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_NV_representative_fragment_test)
struct VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineRepresentativeFragmentTestStateCreateInfoNV> {
  VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRepresentativeFragmentTestStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("representativeFragmentTestEnable", "representativeFragmentTestEnable", offsetof(ManagedType, representativeFragmentTestEnable), das::makeFieldType<decltype(das::declval<ManagedType>().representativeFragmentTestEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_representative_fragment_test) */
#if defined(VK_VERSION_1_4)
struct VkPipelineRobustnessCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineRobustnessCreateInfo> {
  VkPipelineRobustnessCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineRobustnessCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("storageBuffers", "storageBuffers", offsetof(ManagedType, storageBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().storageBuffers)>(*mlib));
    addFieldEx("uniformBuffers", "uniformBuffers", offsetof(ManagedType, uniformBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().uniformBuffers)>(*mlib));
    addFieldEx("vertexInputs", "vertexInputs", offsetof(ManagedType, vertexInputs), das::makeFieldType<decltype(das::declval<ManagedType>().vertexInputs)>(*mlib));
    addFieldEx("images", "images", offsetof(ManagedType, images), das::makeFieldType<decltype(das::declval<ManagedType>().images)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_sample_locations)
struct VkPipelineSampleLocationsStateCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineSampleLocationsStateCreateInfoEXT> {
  VkPipelineSampleLocationsStateCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineSampleLocationsStateCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampleLocationsEnable", "sampleLocationsEnable", offsetof(ManagedType, sampleLocationsEnable), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsEnable)>(*mlib));
    addFieldEx("sampleLocationsInfo", "sampleLocationsInfo", offsetof(ManagedType, sampleLocationsInfo), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
struct VkPipelineShaderStageModuleIdentifierCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineShaderStageModuleIdentifierCreateInfoEXT> {
  VkPipelineShaderStageModuleIdentifierCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineShaderStageModuleIdentifierCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("identifierSize", "identifierSize", offsetof(ManagedType, identifierSize), das::makeFieldType<decltype(das::declval<ManagedType>().identifierSize)>(*mlib));
    addFieldEx("pIdentifier", "pIdentifier", offsetof(ManagedType, pIdentifier), das::makeFieldType<decltype(das::declval<ManagedType>().pIdentifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_AMDX_shader_enqueue)
struct VkPipelineShaderStageNodeCreateInfoAMDXAnnotation : ManagedStructureAnnotation<VkPipelineShaderStageNodeCreateInfoAMDX> {
  VkPipelineShaderStageNodeCreateInfoAMDXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineShaderStageNodeCreateInfoAMDX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pName", "pName", offsetof(ManagedType, pName), das::makeFieldType<decltype(das::declval<ManagedType>().pName)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_3)
struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo> {
  VkPipelineShaderStageRequiredSubgroupSizeCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineShaderStageRequiredSubgroupSizeCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("requiredSubgroupSize", "requiredSubgroupSize", offsetof(ManagedType, requiredSubgroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().requiredSubgroupSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkPipelineTessellationDomainOriginStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineTessellationDomainOriginStateCreateInfo> {
  VkPipelineTessellationDomainOriginStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineTessellationDomainOriginStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("domainOrigin", "domainOrigin", offsetof(ManagedType, domainOrigin), das::makeFieldType<decltype(das::declval<ManagedType>().domainOrigin)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
struct VkVertexInputBindingDivisorDescriptionAnnotation : ManagedStructureAnnotation<VkVertexInputBindingDivisorDescription> {
  VkVertexInputBindingDivisorDescriptionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVertexInputBindingDivisorDescription", lib) {
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("divisor", "divisor", offsetof(ManagedType, divisor), das::makeFieldType<decltype(das::declval<ManagedType>().divisor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineVertexInputDivisorStateCreateInfoAnnotation : ManagedStructureAnnotation<VkPipelineVertexInputDivisorStateCreateInfo> {
  VkPipelineVertexInputDivisorStateCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineVertexInputDivisorStateCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("vertexBindingDivisorCount", "vertexBindingDivisorCount", offsetof(ManagedType, vertexBindingDivisorCount), das::makeFieldType<decltype(das::declval<ManagedType>().vertexBindingDivisorCount)>(*mlib));
    addFieldEx("pVertexBindingDivisors", "pVertexBindingDivisors", offsetof(ManagedType, pVertexBindingDivisors), das::makeFieldType<decltype(das::declval<ManagedType>().pVertexBindingDivisors)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_shading_rate_image)
struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV> {
  VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportCoarseSampleOrderStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampleOrderType", "sampleOrderType", offsetof(ManagedType, sampleOrderType), das::makeFieldType<decltype(das::declval<ManagedType>().sampleOrderType)>(*mlib));
    addFieldEx("customSampleOrderCount", "customSampleOrderCount", offsetof(ManagedType, customSampleOrderCount), das::makeFieldType<decltype(das::declval<ManagedType>().customSampleOrderCount)>(*mlib));
    addFieldEx("pCustomSampleOrders", "pCustomSampleOrders", offsetof(ManagedType, pCustomSampleOrders), das::makeFieldType<decltype(das::declval<ManagedType>().pCustomSampleOrders)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_EXT_depth_clamp_control)
struct VkPipelineViewportDepthClampControlCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineViewportDepthClampControlCreateInfoEXT> {
  VkPipelineViewportDepthClampControlCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportDepthClampControlCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthClampMode", "depthClampMode", offsetof(ManagedType, depthClampMode), das::makeFieldType<decltype(das::declval<ManagedType>().depthClampMode)>(*mlib));
    addFieldEx("pDepthClampRange", "pDepthClampRange", offsetof(ManagedType, pDepthClampRange), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthClampRange)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_depth_clip_control)
struct VkPipelineViewportDepthClipControlCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkPipelineViewportDepthClipControlCreateInfoEXT> {
  VkPipelineViewportDepthClipControlCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportDepthClipControlCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("negativeOneToOne", "negativeOneToOne", offsetof(ManagedType, negativeOneToOne), das::makeFieldType<decltype(das::declval<ManagedType>().negativeOneToOne)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_depth_clip_control) */
#if defined(VK_NV_scissor_exclusive)
struct VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineViewportExclusiveScissorStateCreateInfoNV> {
  VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportExclusiveScissorStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("exclusiveScissorCount", "exclusiveScissorCount", offsetof(ManagedType, exclusiveScissorCount), das::makeFieldType<decltype(das::declval<ManagedType>().exclusiveScissorCount)>(*mlib));
    addFieldEx("pExclusiveScissors", "pExclusiveScissors", offsetof(ManagedType, pExclusiveScissors), das::makeFieldType<decltype(das::declval<ManagedType>().pExclusiveScissors)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
struct VkShadingRatePaletteNVAnnotation : ManagedStructureAnnotation<VkShadingRatePaletteNV> {
  VkShadingRatePaletteNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShadingRatePaletteNV", lib) {
    addFieldEx("shadingRatePaletteEntryCount", "shadingRatePaletteEntryCount", offsetof(ManagedType, shadingRatePaletteEntryCount), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRatePaletteEntryCount)>(*mlib));
    addFieldEx("pShadingRatePaletteEntries", "pShadingRatePaletteEntries", offsetof(ManagedType, pShadingRatePaletteEntries), das::makeFieldType<decltype(das::declval<ManagedType>().pShadingRatePaletteEntries)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineViewportShadingRateImageStateCreateInfoNV> {
  VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportShadingRateImageStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("shadingRateImageEnable", "shadingRateImageEnable", offsetof(ManagedType, shadingRateImageEnable), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateImageEnable)>(*mlib));
    addFieldEx("viewportCount", "viewportCount", offsetof(ManagedType, viewportCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewportCount)>(*mlib));
    addFieldEx("pShadingRatePalettes", "pShadingRatePalettes", offsetof(ManagedType, pShadingRatePalettes), das::makeFieldType<decltype(das::declval<ManagedType>().pShadingRatePalettes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_NV_viewport_swizzle)
struct VkViewportSwizzleNVAnnotation : ManagedStructureAnnotation<VkViewportSwizzleNV> {
  VkViewportSwizzleNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkViewportSwizzleNV", lib) {
    addFieldEx("x", "x", offsetof(ManagedType, x), das::makeFieldType<decltype(das::declval<ManagedType>().x)>(*mlib));
    addFieldEx("y", "y", offsetof(ManagedType, y), das::makeFieldType<decltype(das::declval<ManagedType>().y)>(*mlib));
    addFieldEx("z", "z", offsetof(ManagedType, z), das::makeFieldType<decltype(das::declval<ManagedType>().z)>(*mlib));
    addFieldEx("w", "w", offsetof(ManagedType, w), das::makeFieldType<decltype(das::declval<ManagedType>().w)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineViewportSwizzleStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineViewportSwizzleStateCreateInfoNV> {
  VkPipelineViewportSwizzleStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportSwizzleStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("viewportCount", "viewportCount", offsetof(ManagedType, viewportCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewportCount)>(*mlib));
    addFieldEx("pViewportSwizzles", "pViewportSwizzles", offsetof(ManagedType, pViewportSwizzles), das::makeFieldType<decltype(das::declval<ManagedType>().pViewportSwizzles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_viewport_swizzle) */
#if defined(VK_NV_clip_space_w_scaling)
struct VkViewportWScalingNVAnnotation : ManagedStructureAnnotation<VkViewportWScalingNV> {
  VkViewportWScalingNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkViewportWScalingNV", lib) {
    addFieldEx("xcoeff", "xcoeff", offsetof(ManagedType, xcoeff), das::makeFieldType<decltype(das::declval<ManagedType>().xcoeff)>(*mlib));
    addFieldEx("ycoeff", "ycoeff", offsetof(ManagedType, ycoeff), das::makeFieldType<decltype(das::declval<ManagedType>().ycoeff)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPipelineViewportWScalingStateCreateInfoNVAnnotation : ManagedStructureAnnotation<VkPipelineViewportWScalingStateCreateInfoNV> {
  VkPipelineViewportWScalingStateCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPipelineViewportWScalingStateCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("viewportWScalingEnable", "viewportWScalingEnable", offsetof(ManagedType, viewportWScalingEnable), das::makeFieldType<decltype(das::declval<ManagedType>().viewportWScalingEnable)>(*mlib));
    addFieldEx("viewportCount", "viewportCount", offsetof(ManagedType, viewportCount), das::makeFieldType<decltype(das::declval<ManagedType>().viewportCount)>(*mlib));
    addFieldEx("pViewportWScalings", "pViewportWScalings", offsetof(ManagedType, pViewportWScalings), das::makeFieldType<decltype(das::declval<ManagedType>().pViewportWScalings)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_GGP_frame_token)
struct VkPresentFrameTokenGGPAnnotation : ManagedStructureAnnotation<VkPresentFrameTokenGGP> {
  VkPresentFrameTokenGGPAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentFrameTokenGGP", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("frameToken", "frameToken", offsetof(ManagedType, frameToken), das::makeFieldType<decltype(das::declval<ManagedType>().frameToken)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_GGP_frame_token) */
#if defined(VK_KHR_present_id)
struct VkPresentIdKHRAnnotation : ManagedStructureAnnotation<VkPresentIdKHR> {
  VkPresentIdKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentIdKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pPresentIds", "pPresentIds", offsetof(ManagedType, pPresentIds), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentIds)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_present_id) */
#if defined(VK_KHR_swapchain)
struct VkPresentInfoKHRAnnotation : ManagedStructureAnnotation<VkPresentInfoKHR> {
  VkPresentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreCount", "waitSemaphoreCount", offsetof(ManagedType, waitSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreCount)>(*mlib));
    addFieldEx("pWaitSemaphores", "pWaitSemaphores", offsetof(ManagedType, pWaitSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphores)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pSwapchains", "pSwapchains", offsetof(ManagedType, pSwapchains), das::makeFieldType<decltype(das::declval<ManagedType>().pSwapchains)>(*mlib));
    addFieldEx("pImageIndices", "pImageIndices", offsetof(ManagedType, pImageIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pImageIndices)>(*mlib));
    addFieldEx("pResults", "pResults", offsetof(ManagedType, pResults), das::makeFieldType<decltype(das::declval<ManagedType>().pResults)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_incremental_present)
struct VkRectLayerKHRAnnotation : ManagedStructureAnnotation<VkRectLayerKHR> {
  VkRectLayerKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRectLayerKHR", lib) {
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("extent", "extent", offsetof(ManagedType, extent), das::makeFieldType<decltype(das::declval<ManagedType>().extent)>(*mlib));
    addFieldEx("layer", "layer", offsetof(ManagedType, layer), das::makeFieldType<decltype(das::declval<ManagedType>().layer)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPresentRegionKHRAnnotation : ManagedStructureAnnotation<VkPresentRegionKHR> {
  VkPresentRegionKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentRegionKHR", lib) {
    addFieldEx("rectangleCount", "rectangleCount", offsetof(ManagedType, rectangleCount), das::makeFieldType<decltype(das::declval<ManagedType>().rectangleCount)>(*mlib));
    addFieldEx("pRectangles", "pRectangles", offsetof(ManagedType, pRectangles), das::makeFieldType<decltype(das::declval<ManagedType>().pRectangles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPresentRegionsKHRAnnotation : ManagedStructureAnnotation<VkPresentRegionsKHR> {
  VkPresentRegionsKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentRegionsKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_incremental_present) */
#if defined(VK_GOOGLE_display_timing)
struct VkPresentTimeGOOGLEAnnotation : ManagedStructureAnnotation<VkPresentTimeGOOGLE> {
  VkPresentTimeGOOGLEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentTimeGOOGLE", lib) {
    addFieldEx("presentID", "presentID", offsetof(ManagedType, presentID), das::makeFieldType<decltype(das::declval<ManagedType>().presentID)>(*mlib));
    addFieldEx("desiredPresentTime", "desiredPresentTime", offsetof(ManagedType, desiredPresentTime), das::makeFieldType<decltype(das::declval<ManagedType>().desiredPresentTime)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPresentTimesInfoGOOGLEAnnotation : ManagedStructureAnnotation<VkPresentTimesInfoGOOGLE> {
  VkPresentTimesInfoGOOGLEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPresentTimesInfoGOOGLE", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pTimes", "pTimes", offsetof(ManagedType, pTimes), das::makeFieldType<decltype(das::declval<ManagedType>().pTimes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_VERSION_1_3)
struct VkPrivateDataSlotCreateInfoAnnotation : ManagedStructureAnnotation<VkPrivateDataSlotCreateInfo> {
  VkPrivateDataSlotCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPrivateDataSlotCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
struct VkProtectedSubmitInfoAnnotation : ManagedStructureAnnotation<VkProtectedSubmitInfo> {
  VkProtectedSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkProtectedSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("protectedSubmit", "protectedSubmit", offsetof(ManagedType, protectedSubmit), das::makeFieldType<decltype(das::declval<ManagedType>().protectedSubmit)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
struct VkPushConstantsInfoAnnotation : ManagedStructureAnnotation<VkPushConstantsInfo> {
  VkPushConstantsInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPushConstantsInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
    addFieldEx("pValues", "pValues", offsetof(ManagedType, pValues), das::makeFieldType<decltype(das::declval<ManagedType>().pValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
struct VkWriteDescriptorSetAnnotation : ManagedStructureAnnotation<VkWriteDescriptorSet> {
  VkWriteDescriptorSetAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteDescriptorSet", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dstSet", "dstSet", offsetof(ManagedType, dstSet), das::makeFieldType<decltype(das::declval<ManagedType>().dstSet)>(*mlib));
    addFieldEx("dstBinding", "dstBinding", offsetof(ManagedType, dstBinding), das::makeFieldType<decltype(das::declval<ManagedType>().dstBinding)>(*mlib));
    addFieldEx("dstArrayElement", "dstArrayElement", offsetof(ManagedType, dstArrayElement), das::makeFieldType<decltype(das::declval<ManagedType>().dstArrayElement)>(*mlib));
    addFieldEx("descriptorCount", "descriptorCount", offsetof(ManagedType, descriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorCount)>(*mlib));
    addFieldEx("descriptorType", "descriptorType", offsetof(ManagedType, descriptorType), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorType)>(*mlib));
    addFieldEx("pImageInfo", "pImageInfo", offsetof(ManagedType, pImageInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pImageInfo)>(*mlib));
    addFieldEx("pBufferInfo", "pBufferInfo", offsetof(ManagedType, pBufferInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pBufferInfo)>(*mlib));
    addFieldEx("pTexelBufferView", "pTexelBufferView", offsetof(ManagedType, pTexelBufferView), das::makeFieldType<decltype(das::declval<ManagedType>().pTexelBufferView)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_4)
struct VkPushDescriptorSetInfoAnnotation : ManagedStructureAnnotation<VkPushDescriptorSetInfo> {
  VkPushDescriptorSetInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPushDescriptorSetInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("set", "set", offsetof(ManagedType, set), das::makeFieldType<decltype(das::declval<ManagedType>().set)>(*mlib));
    addFieldEx("descriptorWriteCount", "descriptorWriteCount", offsetof(ManagedType, descriptorWriteCount), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorWriteCount)>(*mlib));
    addFieldEx("pDescriptorWrites", "pDescriptorWrites", offsetof(ManagedType, pDescriptorWrites), das::makeFieldType<decltype(das::declval<ManagedType>().pDescriptorWrites)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkPushDescriptorSetWithTemplateInfoAnnotation : ManagedStructureAnnotation<VkPushDescriptorSetWithTemplateInfo> {
  VkPushDescriptorSetWithTemplateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkPushDescriptorSetWithTemplateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("descriptorUpdateTemplate", "descriptorUpdateTemplate", offsetof(ManagedType, descriptorUpdateTemplate), das::makeFieldType<decltype(das::declval<ManagedType>().descriptorUpdateTemplate)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("set", "set", offsetof(ManagedType, set), das::makeFieldType<decltype(das::declval<ManagedType>().set)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_low_latency)
struct VkQueryLowLatencySupportNVAnnotation : ManagedStructureAnnotation<VkQueryLowLatencySupportNV> {
  VkQueryLowLatencySupportNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueryLowLatencySupportNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pQueriedLowLatencyData", "pQueriedLowLatencyData", offsetof(ManagedType, pQueriedLowLatencyData), das::makeFieldType<decltype(das::declval<ManagedType>().pQueriedLowLatencyData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency) */
#if defined(VK_VERSION_1_0)
struct VkQueryPoolCreateInfoAnnotation : ManagedStructureAnnotation<VkQueryPoolCreateInfo> {
  VkQueryPoolCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueryPoolCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("queryType", "queryType", offsetof(ManagedType, queryType), das::makeFieldType<decltype(das::declval<ManagedType>().queryType)>(*mlib));
    addFieldEx("queryCount", "queryCount", offsetof(ManagedType, queryCount), das::makeFieldType<decltype(das::declval<ManagedType>().queryCount)>(*mlib));
    addFieldEx("pipelineStatistics", "pipelineStatistics", offsetof(ManagedType, pipelineStatistics), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineStatistics)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_performance_query)
struct VkQueryPoolPerformanceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkQueryPoolPerformanceCreateInfoKHR> {
  VkQueryPoolPerformanceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueryPoolPerformanceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queueFamilyIndex", "queueFamilyIndex", offsetof(ManagedType, queueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndex)>(*mlib));
    addFieldEx("counterIndexCount", "counterIndexCount", offsetof(ManagedType, counterIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().counterIndexCount)>(*mlib));
    addFieldEx("pCounterIndices", "pCounterIndices", offsetof(ManagedType, pCounterIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pCounterIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
struct VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation : ManagedStructureAnnotation<VkQueryPoolPerformanceQueryCreateInfoINTEL> {
  VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueryPoolPerformanceQueryCreateInfoINTEL", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("performanceCountersSampling", "performanceCountersSampling", offsetof(ManagedType, performanceCountersSampling), das::makeFieldType<decltype(das::declval<ManagedType>().performanceCountersSampling)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_video_encode_queue)
struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkQueryPoolVideoEncodeFeedbackCreateInfoKHR> {
  VkQueryPoolVideoEncodeFeedbackCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueryPoolVideoEncodeFeedbackCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("encodeFeedbackFlags", "encodeFeedbackFlags", offsetof(ManagedType, encodeFeedbackFlags), das::makeFieldType<decltype(das::declval<ManagedType>().encodeFeedbackFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2))
struct VkQueueFamilyCheckpointProperties2NVAnnotation : ManagedStructureAnnotation<VkQueueFamilyCheckpointProperties2NV> {
  VkQueueFamilyCheckpointProperties2NVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyCheckpointProperties2NV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("checkpointExecutionStageMask", "checkpointExecutionStageMask", offsetof(ManagedType, checkpointExecutionStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().checkpointExecutionStageMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2)) */
#if defined(VK_NV_device_diagnostic_checkpoints)
struct VkQueueFamilyCheckpointPropertiesNVAnnotation : ManagedStructureAnnotation<VkQueueFamilyCheckpointPropertiesNV> {
  VkQueueFamilyCheckpointPropertiesNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyCheckpointPropertiesNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("checkpointExecutionStageMask", "checkpointExecutionStageMask", offsetof(ManagedType, checkpointExecutionStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().checkpointExecutionStageMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_VERSION_1_4)
struct VkQueueFamilyGlobalPriorityPropertiesAnnotation : ManagedStructureAnnotation<VkQueueFamilyGlobalPriorityProperties> {
  VkQueueFamilyGlobalPriorityPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyGlobalPriorityProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("priorityCount", "priorityCount", offsetof(ManagedType, priorityCount), das::makeFieldType<decltype(das::declval<ManagedType>().priorityCount)>(*mlib));
    addFieldEx("priorities", "priorities", offsetof(ManagedType, priorities), das::makeFieldType<decltype(das::declval<ManagedType>().priorities)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
struct VkQueueFamilyPropertiesAnnotation : ManagedStructureAnnotation<VkQueueFamilyProperties> {
  VkQueueFamilyPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyProperties", lib) {
    addFieldEx("queueFlags", "queueFlags", offsetof(ManagedType, queueFlags), das::makeFieldType<decltype(das::declval<ManagedType>().queueFlags)>(*mlib));
    addFieldEx("queueCount", "queueCount", offsetof(ManagedType, queueCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueCount)>(*mlib));
    addFieldEx("timestampValidBits", "timestampValidBits", offsetof(ManagedType, timestampValidBits), das::makeFieldType<decltype(das::declval<ManagedType>().timestampValidBits)>(*mlib));
    addFieldEx("minImageTransferGranularity", "minImageTransferGranularity", offsetof(ManagedType, minImageTransferGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().minImageTransferGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkQueueFamilyProperties2Annotation : ManagedStructureAnnotation<VkQueueFamilyProperties2> {
  VkQueueFamilyProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queueFamilyProperties", "queueFamilyProperties", offsetof(ManagedType, queueFamilyProperties), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyProperties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_video_queue)
struct VkQueueFamilyQueryResultStatusPropertiesKHRAnnotation : ManagedStructureAnnotation<VkQueueFamilyQueryResultStatusPropertiesKHR> {
  VkQueueFamilyQueryResultStatusPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyQueryResultStatusPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queryResultStatusSupport", "queryResultStatusSupport", offsetof(ManagedType, queryResultStatusSupport), das::makeFieldType<decltype(das::declval<ManagedType>().queryResultStatusSupport)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkQueueFamilyVideoPropertiesKHRAnnotation : ManagedStructureAnnotation<VkQueueFamilyVideoPropertiesKHR> {
  VkQueueFamilyVideoPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkQueueFamilyVideoPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoCodecOperations", "videoCodecOperations", offsetof(ManagedType, videoCodecOperations), das::makeFieldType<decltype(das::declval<ManagedType>().videoCodecOperations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_ray_tracing_pipeline)
struct VkRayTracingPipelineInterfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkRayTracingPipelineInterfaceCreateInfoKHR> {
  VkRayTracingPipelineInterfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRayTracingPipelineInterfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxPipelineRayPayloadSize", "maxPipelineRayPayloadSize", offsetof(ManagedType, maxPipelineRayPayloadSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxPipelineRayPayloadSize)>(*mlib));
    addFieldEx("maxPipelineRayHitAttributeSize", "maxPipelineRayHitAttributeSize", offsetof(ManagedType, maxPipelineRayHitAttributeSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxPipelineRayHitAttributeSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRayTracingShaderGroupCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkRayTracingShaderGroupCreateInfoKHR> {
  VkRayTracingShaderGroupCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRayTracingShaderGroupCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("generalShader", "generalShader", offsetof(ManagedType, generalShader), das::makeFieldType<decltype(das::declval<ManagedType>().generalShader)>(*mlib));
    addFieldEx("closestHitShader", "closestHitShader", offsetof(ManagedType, closestHitShader), das::makeFieldType<decltype(das::declval<ManagedType>().closestHitShader)>(*mlib));
    addFieldEx("anyHitShader", "anyHitShader", offsetof(ManagedType, anyHitShader), das::makeFieldType<decltype(das::declval<ManagedType>().anyHitShader)>(*mlib));
    addFieldEx("intersectionShader", "intersectionShader", offsetof(ManagedType, intersectionShader), das::makeFieldType<decltype(das::declval<ManagedType>().intersectionShader)>(*mlib));
    addFieldEx("pShaderGroupCaptureReplayHandle", "pShaderGroupCaptureReplayHandle", offsetof(ManagedType, pShaderGroupCaptureReplayHandle), das::makeFieldType<decltype(das::declval<ManagedType>().pShaderGroupCaptureReplayHandle)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRayTracingPipelineCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkRayTracingPipelineCreateInfoKHR> {
  VkRayTracingPipelineCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRayTracingPipelineCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stageCount", "stageCount", offsetof(ManagedType, stageCount), das::makeFieldType<decltype(das::declval<ManagedType>().stageCount)>(*mlib));
    addFieldEx("pStages", "pStages", offsetof(ManagedType, pStages), das::makeFieldType<decltype(das::declval<ManagedType>().pStages)>(*mlib));
    addFieldEx("groupCount", "groupCount", offsetof(ManagedType, groupCount), das::makeFieldType<decltype(das::declval<ManagedType>().groupCount)>(*mlib));
    addFieldEx("pGroups", "pGroups", offsetof(ManagedType, pGroups), das::makeFieldType<decltype(das::declval<ManagedType>().pGroups)>(*mlib));
    addFieldEx("maxPipelineRayRecursionDepth", "maxPipelineRayRecursionDepth", offsetof(ManagedType, maxPipelineRayRecursionDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxPipelineRayRecursionDepth)>(*mlib));
    addFieldEx("pLibraryInfo", "pLibraryInfo", offsetof(ManagedType, pLibraryInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pLibraryInfo)>(*mlib));
    addFieldEx("pLibraryInterface", "pLibraryInterface", offsetof(ManagedType, pLibraryInterface), das::makeFieldType<decltype(das::declval<ManagedType>().pLibraryInterface)>(*mlib));
    addFieldEx("pDynamicState", "pDynamicState", offsetof(ManagedType, pDynamicState), das::makeFieldType<decltype(das::declval<ManagedType>().pDynamicState)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("basePipelineHandle", "basePipelineHandle", offsetof(ManagedType, basePipelineHandle), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineHandle)>(*mlib));
    addFieldEx("basePipelineIndex", "basePipelineIndex", offsetof(ManagedType, basePipelineIndex), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_NV_ray_tracing)
struct VkRayTracingShaderGroupCreateInfoNVAnnotation : ManagedStructureAnnotation<VkRayTracingShaderGroupCreateInfoNV> {
  VkRayTracingShaderGroupCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRayTracingShaderGroupCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("_type", "type", offsetof(ManagedType, type), das::makeFieldType<decltype(das::declval<ManagedType>().type)>(*mlib));
    addFieldEx("generalShader", "generalShader", offsetof(ManagedType, generalShader), das::makeFieldType<decltype(das::declval<ManagedType>().generalShader)>(*mlib));
    addFieldEx("closestHitShader", "closestHitShader", offsetof(ManagedType, closestHitShader), das::makeFieldType<decltype(das::declval<ManagedType>().closestHitShader)>(*mlib));
    addFieldEx("anyHitShader", "anyHitShader", offsetof(ManagedType, anyHitShader), das::makeFieldType<decltype(das::declval<ManagedType>().anyHitShader)>(*mlib));
    addFieldEx("intersectionShader", "intersectionShader", offsetof(ManagedType, intersectionShader), das::makeFieldType<decltype(das::declval<ManagedType>().intersectionShader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRayTracingPipelineCreateInfoNVAnnotation : ManagedStructureAnnotation<VkRayTracingPipelineCreateInfoNV> {
  VkRayTracingPipelineCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRayTracingPipelineCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stageCount", "stageCount", offsetof(ManagedType, stageCount), das::makeFieldType<decltype(das::declval<ManagedType>().stageCount)>(*mlib));
    addFieldEx("pStages", "pStages", offsetof(ManagedType, pStages), das::makeFieldType<decltype(das::declval<ManagedType>().pStages)>(*mlib));
    addFieldEx("groupCount", "groupCount", offsetof(ManagedType, groupCount), das::makeFieldType<decltype(das::declval<ManagedType>().groupCount)>(*mlib));
    addFieldEx("pGroups", "pGroups", offsetof(ManagedType, pGroups), das::makeFieldType<decltype(das::declval<ManagedType>().pGroups)>(*mlib));
    addFieldEx("maxRecursionDepth", "maxRecursionDepth", offsetof(ManagedType, maxRecursionDepth), das::makeFieldType<decltype(das::declval<ManagedType>().maxRecursionDepth)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("basePipelineHandle", "basePipelineHandle", offsetof(ManagedType, basePipelineHandle), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineHandle)>(*mlib));
    addFieldEx("basePipelineIndex", "basePipelineIndex", offsetof(ManagedType, basePipelineIndex), das::makeFieldType<decltype(das::declval<ManagedType>().basePipelineIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_GOOGLE_display_timing)
struct VkRefreshCycleDurationGOOGLEAnnotation : ManagedStructureAnnotation<VkRefreshCycleDurationGOOGLE> {
  VkRefreshCycleDurationGOOGLEAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRefreshCycleDurationGOOGLE", lib) {
    addFieldEx("refreshDuration", "refreshDuration", offsetof(ManagedType, refreshDuration), das::makeFieldType<decltype(das::declval<ManagedType>().refreshDuration)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_KHR_pipeline_binary)
struct VkReleaseCapturedPipelineDataInfoKHRAnnotation : ManagedStructureAnnotation<VkReleaseCapturedPipelineDataInfoKHR> {
  VkReleaseCapturedPipelineDataInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkReleaseCapturedPipelineDataInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_EXT_swapchain_maintenance1)
struct VkReleaseSwapchainImagesInfoEXTAnnotation : ManagedStructureAnnotation<VkReleaseSwapchainImagesInfoEXT> {
  VkReleaseSwapchainImagesInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkReleaseSwapchainImagesInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchain", "swapchain", offsetof(ManagedType, swapchain), das::makeFieldType<decltype(das::declval<ManagedType>().swapchain)>(*mlib));
    addFieldEx("imageIndexCount", "imageIndexCount", offsetof(ManagedType, imageIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().imageIndexCount)>(*mlib));
    addFieldEx("pImageIndices", "pImageIndices", offsetof(ManagedType, pImageIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pImageIndices)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_VERSION_1_2)
struct VkRenderPassAttachmentBeginInfoAnnotation : ManagedStructureAnnotation<VkRenderPassAttachmentBeginInfo> {
  VkRenderPassAttachmentBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassAttachmentBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pAttachments", "pAttachments", offsetof(ManagedType, pAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachments)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
struct VkRenderPassBeginInfoAnnotation : ManagedStructureAnnotation<VkRenderPassBeginInfo> {
  VkRenderPassBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("renderPass", "renderPass", offsetof(ManagedType, renderPass), das::makeFieldType<decltype(das::declval<ManagedType>().renderPass)>(*mlib));
    addFieldEx("framebuffer", "framebuffer", offsetof(ManagedType, framebuffer), das::makeFieldType<decltype(das::declval<ManagedType>().framebuffer)>(*mlib));
    addFieldEx("renderArea", "renderArea", offsetof(ManagedType, renderArea), das::makeFieldType<decltype(das::declval<ManagedType>().renderArea)>(*mlib));
    addFieldEx("clearValueCount", "clearValueCount", offsetof(ManagedType, clearValueCount), das::makeFieldType<decltype(das::declval<ManagedType>().clearValueCount)>(*mlib));
    addFieldEx("pClearValues", "pClearValues", offsetof(ManagedType, pClearValues), das::makeFieldType<decltype(das::declval<ManagedType>().pClearValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubpassDependencyAnnotation : ManagedStructureAnnotation<VkSubpassDependency> {
  VkSubpassDependencyAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassDependency", lib) {
    addFieldEx("srcSubpass", "srcSubpass", offsetof(ManagedType, srcSubpass), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubpass)>(*mlib));
    addFieldEx("dstSubpass", "dstSubpass", offsetof(ManagedType, dstSubpass), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubpass)>(*mlib));
    addFieldEx("srcStageMask", "srcStageMask", offsetof(ManagedType, srcStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcStageMask)>(*mlib));
    addFieldEx("dstStageMask", "dstStageMask", offsetof(ManagedType, dstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstStageMask)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("dependencyFlags", "dependencyFlags", offsetof(ManagedType, dependencyFlags), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubpassDescriptionAnnotation : ManagedStructureAnnotation<VkSubpassDescription> {
  VkSubpassDescriptionAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassDescription", lib) {
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("inputAttachmentCount", "inputAttachmentCount", offsetof(ManagedType, inputAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().inputAttachmentCount)>(*mlib));
    addFieldEx("pInputAttachments", "pInputAttachments", offsetof(ManagedType, pInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pInputAttachments)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachments", "pColorAttachments", offsetof(ManagedType, pColorAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachments)>(*mlib));
    addFieldEx("pResolveAttachments", "pResolveAttachments", offsetof(ManagedType, pResolveAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pResolveAttachments)>(*mlib));
    addFieldEx("pDepthStencilAttachment", "pDepthStencilAttachment", offsetof(ManagedType, pDepthStencilAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthStencilAttachment)>(*mlib));
    addFieldEx("preserveAttachmentCount", "preserveAttachmentCount", offsetof(ManagedType, preserveAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().preserveAttachmentCount)>(*mlib));
    addFieldEx("pPreserveAttachments", "pPreserveAttachments", offsetof(ManagedType, pPreserveAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pPreserveAttachments)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassCreateInfoAnnotation : ManagedStructureAnnotation<VkRenderPassCreateInfo> {
  VkRenderPassCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pAttachments", "pAttachments", offsetof(ManagedType, pAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachments)>(*mlib));
    addFieldEx("subpassCount", "subpassCount", offsetof(ManagedType, subpassCount), das::makeFieldType<decltype(das::declval<ManagedType>().subpassCount)>(*mlib));
    addFieldEx("pSubpasses", "pSubpasses", offsetof(ManagedType, pSubpasses), das::makeFieldType<decltype(das::declval<ManagedType>().pSubpasses)>(*mlib));
    addFieldEx("dependencyCount", "dependencyCount", offsetof(ManagedType, dependencyCount), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyCount)>(*mlib));
    addFieldEx("pDependencies", "pDependencies", offsetof(ManagedType, pDependencies), das::makeFieldType<decltype(das::declval<ManagedType>().pDependencies)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
struct VkSubpassDependency2Annotation : ManagedStructureAnnotation<VkSubpassDependency2> {
  VkSubpassDependency2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassDependency2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcSubpass", "srcSubpass", offsetof(ManagedType, srcSubpass), das::makeFieldType<decltype(das::declval<ManagedType>().srcSubpass)>(*mlib));
    addFieldEx("dstSubpass", "dstSubpass", offsetof(ManagedType, dstSubpass), das::makeFieldType<decltype(das::declval<ManagedType>().dstSubpass)>(*mlib));
    addFieldEx("srcStageMask", "srcStageMask", offsetof(ManagedType, srcStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcStageMask)>(*mlib));
    addFieldEx("dstStageMask", "dstStageMask", offsetof(ManagedType, dstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstStageMask)>(*mlib));
    addFieldEx("srcAccessMask", "srcAccessMask", offsetof(ManagedType, srcAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().srcAccessMask)>(*mlib));
    addFieldEx("dstAccessMask", "dstAccessMask", offsetof(ManagedType, dstAccessMask), das::makeFieldType<decltype(das::declval<ManagedType>().dstAccessMask)>(*mlib));
    addFieldEx("dependencyFlags", "dependencyFlags", offsetof(ManagedType, dependencyFlags), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyFlags)>(*mlib));
    addFieldEx("viewOffset", "viewOffset", offsetof(ManagedType, viewOffset), das::makeFieldType<decltype(das::declval<ManagedType>().viewOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubpassDescription2Annotation : ManagedStructureAnnotation<VkSubpassDescription2> {
  VkSubpassDescription2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassDescription2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pipelineBindPoint", "pipelineBindPoint", offsetof(ManagedType, pipelineBindPoint), das::makeFieldType<decltype(das::declval<ManagedType>().pipelineBindPoint)>(*mlib));
    addFieldEx("viewMask", "viewMask", offsetof(ManagedType, viewMask), das::makeFieldType<decltype(das::declval<ManagedType>().viewMask)>(*mlib));
    addFieldEx("inputAttachmentCount", "inputAttachmentCount", offsetof(ManagedType, inputAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().inputAttachmentCount)>(*mlib));
    addFieldEx("pInputAttachments", "pInputAttachments", offsetof(ManagedType, pInputAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pInputAttachments)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachments", "pColorAttachments", offsetof(ManagedType, pColorAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachments)>(*mlib));
    addFieldEx("pResolveAttachments", "pResolveAttachments", offsetof(ManagedType, pResolveAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pResolveAttachments)>(*mlib));
    addFieldEx("pDepthStencilAttachment", "pDepthStencilAttachment", offsetof(ManagedType, pDepthStencilAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthStencilAttachment)>(*mlib));
    addFieldEx("preserveAttachmentCount", "preserveAttachmentCount", offsetof(ManagedType, preserveAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().preserveAttachmentCount)>(*mlib));
    addFieldEx("pPreserveAttachments", "pPreserveAttachments", offsetof(ManagedType, pPreserveAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pPreserveAttachments)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassCreateInfo2Annotation : ManagedStructureAnnotation<VkRenderPassCreateInfo2> {
  VkRenderPassCreateInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassCreateInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("attachmentCount", "attachmentCount", offsetof(ManagedType, attachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentCount)>(*mlib));
    addFieldEx("pAttachments", "pAttachments", offsetof(ManagedType, pAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachments)>(*mlib));
    addFieldEx("subpassCount", "subpassCount", offsetof(ManagedType, subpassCount), das::makeFieldType<decltype(das::declval<ManagedType>().subpassCount)>(*mlib));
    addFieldEx("pSubpasses", "pSubpasses", offsetof(ManagedType, pSubpasses), das::makeFieldType<decltype(das::declval<ManagedType>().pSubpasses)>(*mlib));
    addFieldEx("dependencyCount", "dependencyCount", offsetof(ManagedType, dependencyCount), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyCount)>(*mlib));
    addFieldEx("pDependencies", "pDependencies", offsetof(ManagedType, pDependencies), das::makeFieldType<decltype(das::declval<ManagedType>().pDependencies)>(*mlib));
    addFieldEx("correlatedViewMaskCount", "correlatedViewMaskCount", offsetof(ManagedType, correlatedViewMaskCount), das::makeFieldType<decltype(das::declval<ManagedType>().correlatedViewMaskCount)>(*mlib));
    addFieldEx("pCorrelatedViewMasks", "pCorrelatedViewMasks", offsetof(ManagedType, pCorrelatedViewMasks), das::makeFieldType<decltype(das::declval<ManagedType>().pCorrelatedViewMasks)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_subpass_merge_feedback)
struct VkRenderPassCreationControlEXTAnnotation : ManagedStructureAnnotation<VkRenderPassCreationControlEXT> {
  VkRenderPassCreationControlEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassCreationControlEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("disallowMerging", "disallowMerging", offsetof(ManagedType, disallowMerging), das::makeFieldType<decltype(das::declval<ManagedType>().disallowMerging)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassCreationFeedbackInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassCreationFeedbackInfoEXT> {
  VkRenderPassCreationFeedbackInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassCreationFeedbackInfoEXT", lib) {
    addFieldEx("postMergeSubpassCount", "postMergeSubpassCount", offsetof(ManagedType, postMergeSubpassCount), das::makeFieldType<decltype(das::declval<ManagedType>().postMergeSubpassCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassCreationFeedbackCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassCreationFeedbackCreateInfoEXT> {
  VkRenderPassCreationFeedbackCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassCreationFeedbackCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pRenderPassFeedback", "pRenderPassFeedback", offsetof(ManagedType, pRenderPassFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().pRenderPassFeedback)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_EXT_fragment_density_map)
struct VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassFragmentDensityMapCreateInfoEXT> {
  VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassFragmentDensityMapCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityMapAttachment", "fragmentDensityMapAttachment", offsetof(ManagedType, fragmentDensityMapAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityMapAttachment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_VERSION_1_1)
struct VkRenderPassInputAttachmentAspectCreateInfoAnnotation : ManagedStructureAnnotation<VkRenderPassInputAttachmentAspectCreateInfo> {
  VkRenderPassInputAttachmentAspectCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassInputAttachmentAspectCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("aspectReferenceCount", "aspectReferenceCount", offsetof(ManagedType, aspectReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().aspectReferenceCount)>(*mlib));
    addFieldEx("pAspectReferences", "pAspectReferences", offsetof(ManagedType, pAspectReferences), das::makeFieldType<decltype(das::declval<ManagedType>().pAspectReferences)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassMultiviewCreateInfoAnnotation : ManagedStructureAnnotation<VkRenderPassMultiviewCreateInfo> {
  VkRenderPassMultiviewCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassMultiviewCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subpassCount", "subpassCount", offsetof(ManagedType, subpassCount), das::makeFieldType<decltype(das::declval<ManagedType>().subpassCount)>(*mlib));
    addFieldEx("pViewMasks", "pViewMasks", offsetof(ManagedType, pViewMasks), das::makeFieldType<decltype(das::declval<ManagedType>().pViewMasks)>(*mlib));
    addFieldEx("dependencyCount", "dependencyCount", offsetof(ManagedType, dependencyCount), das::makeFieldType<decltype(das::declval<ManagedType>().dependencyCount)>(*mlib));
    addFieldEx("pViewOffsets", "pViewOffsets", offsetof(ManagedType, pViewOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pViewOffsets)>(*mlib));
    addFieldEx("correlationMaskCount", "correlationMaskCount", offsetof(ManagedType, correlationMaskCount), das::makeFieldType<decltype(das::declval<ManagedType>().correlationMaskCount)>(*mlib));
    addFieldEx("pCorrelationMasks", "pCorrelationMasks", offsetof(ManagedType, pCorrelationMasks), das::makeFieldType<decltype(das::declval<ManagedType>().pCorrelationMasks)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_sample_locations)
struct VkSubpassSampleLocationsEXTAnnotation : ManagedStructureAnnotation<VkSubpassSampleLocationsEXT> {
  VkSubpassSampleLocationsEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassSampleLocationsEXT", lib) {
    addFieldEx("subpassIndex", "subpassIndex", offsetof(ManagedType, subpassIndex), das::makeFieldType<decltype(das::declval<ManagedType>().subpassIndex)>(*mlib));
    addFieldEx("sampleLocationsInfo", "sampleLocationsInfo", offsetof(ManagedType, sampleLocationsInfo), das::makeFieldType<decltype(das::declval<ManagedType>().sampleLocationsInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassSampleLocationsBeginInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassSampleLocationsBeginInfoEXT> {
  VkRenderPassSampleLocationsBeginInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassSampleLocationsBeginInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("attachmentInitialSampleLocationsCount", "attachmentInitialSampleLocationsCount", offsetof(ManagedType, attachmentInitialSampleLocationsCount), das::makeFieldType<decltype(das::declval<ManagedType>().attachmentInitialSampleLocationsCount)>(*mlib));
    addFieldEx("pAttachmentInitialSampleLocations", "pAttachmentInitialSampleLocations", offsetof(ManagedType, pAttachmentInitialSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().pAttachmentInitialSampleLocations)>(*mlib));
    addFieldEx("postSubpassSampleLocationsCount", "postSubpassSampleLocationsCount", offsetof(ManagedType, postSubpassSampleLocationsCount), das::makeFieldType<decltype(das::declval<ManagedType>().postSubpassSampleLocationsCount)>(*mlib));
    addFieldEx("pPostSubpassSampleLocations", "pPostSubpassSampleLocations", offsetof(ManagedType, pPostSubpassSampleLocations), das::makeFieldType<decltype(das::declval<ManagedType>().pPostSubpassSampleLocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_ARM_render_pass_striped)
struct VkRenderPassStripeInfoARMAnnotation : ManagedStructureAnnotation<VkRenderPassStripeInfoARM> {
  VkRenderPassStripeInfoARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassStripeInfoARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stripeArea", "stripeArea", offsetof(ManagedType, stripeArea), das::makeFieldType<decltype(das::declval<ManagedType>().stripeArea)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassStripeBeginInfoARMAnnotation : ManagedStructureAnnotation<VkRenderPassStripeBeginInfoARM> {
  VkRenderPassStripeBeginInfoARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassStripeBeginInfoARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stripeInfoCount", "stripeInfoCount", offsetof(ManagedType, stripeInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().stripeInfoCount)>(*mlib));
    addFieldEx("pStripeInfos", "pStripeInfos", offsetof(ManagedType, pStripeInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pStripeInfos)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_VERSION_1_3)
struct VkSemaphoreSubmitInfoAnnotation : ManagedStructureAnnotation<VkSemaphoreSubmitInfo> {
  VkSemaphoreSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("value", "value", offsetof(ManagedType, value), das::makeFieldType<decltype(das::declval<ManagedType>().value)>(*mlib));
    addFieldEx("stageMask", "stageMask", offsetof(ManagedType, stageMask), das::makeFieldType<decltype(das::declval<ManagedType>().stageMask)>(*mlib));
    addFieldEx("deviceIndex", "deviceIndex", offsetof(ManagedType, deviceIndex), das::makeFieldType<decltype(das::declval<ManagedType>().deviceIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_ARM_render_pass_striped)
struct VkRenderPassStripeSubmitInfoARMAnnotation : ManagedStructureAnnotation<VkRenderPassStripeSubmitInfoARM> {
  VkRenderPassStripeSubmitInfoARMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassStripeSubmitInfoARM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stripeSemaphoreInfoCount", "stripeSemaphoreInfoCount", offsetof(ManagedType, stripeSemaphoreInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().stripeSemaphoreInfoCount)>(*mlib));
    addFieldEx("pStripeSemaphoreInfos", "pStripeSemaphoreInfos", offsetof(ManagedType, pStripeSemaphoreInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pStripeSemaphoreInfos)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_EXT_subpass_merge_feedback)
struct VkRenderPassSubpassFeedbackInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassSubpassFeedbackInfoEXT> {
  VkRenderPassSubpassFeedbackInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassSubpassFeedbackInfoEXT", lib) {
    addFieldEx("subpassMergeStatus", "subpassMergeStatus", offsetof(ManagedType, subpassMergeStatus), das::makeFieldType<decltype(das::declval<ManagedType>().subpassMergeStatus)>(*mlib));
    addFieldEx("description", "description", offsetof(ManagedType, description), das::makeFieldType<decltype(das::declval<ManagedType>().description)>(*mlib));
    addFieldEx("postMergeIndex", "postMergeIndex", offsetof(ManagedType, postMergeIndex), das::makeFieldType<decltype(das::declval<ManagedType>().postMergeIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkRenderPassSubpassFeedbackCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderPassSubpassFeedbackCreateInfoEXT> {
  VkRenderPassSubpassFeedbackCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassSubpassFeedbackCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pSubpassFeedback", "pSubpassFeedback", offsetof(ManagedType, pSubpassFeedback), das::makeFieldType<decltype(das::declval<ManagedType>().pSubpassFeedback)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_QCOM_render_pass_transform)
struct VkRenderPassTransformBeginInfoQCOMAnnotation : ManagedStructureAnnotation<VkRenderPassTransformBeginInfoQCOM> {
  VkRenderPassTransformBeginInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderPassTransformBeginInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("transform", "transform", offsetof(ManagedType, transform), das::makeFieldType<decltype(das::declval<ManagedType>().transform)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_render_pass_transform) */
#if defined(VK_VERSION_1_4)
struct VkRenderingAreaInfoAnnotation : ManagedStructureAnnotation<VkRenderingAreaInfo> {
  VkRenderingAreaInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingAreaInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("viewMask", "viewMask", offsetof(ManagedType, viewMask), das::makeFieldType<decltype(das::declval<ManagedType>().viewMask)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentFormats", "pColorAttachmentFormats", offsetof(ManagedType, pColorAttachmentFormats), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentFormats)>(*mlib));
    addFieldEx("depthAttachmentFormat", "depthAttachmentFormat", offsetof(ManagedType, depthAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().depthAttachmentFormat)>(*mlib));
    addFieldEx("stencilAttachmentFormat", "stencilAttachmentFormat", offsetof(ManagedType, stencilAttachmentFormat), das::makeFieldType<decltype(das::declval<ManagedType>().stencilAttachmentFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
struct VkRenderingAttachmentInfoAnnotation : ManagedStructureAnnotation<VkRenderingAttachmentInfo> {
  VkRenderingAttachmentInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingAttachmentInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("imageLayout", "imageLayout", offsetof(ManagedType, imageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().imageLayout)>(*mlib));
    addFieldEx("resolveMode", "resolveMode", offsetof(ManagedType, resolveMode), das::makeFieldType<decltype(das::declval<ManagedType>().resolveMode)>(*mlib));
    addFieldEx("resolveImageView", "resolveImageView", offsetof(ManagedType, resolveImageView), das::makeFieldType<decltype(das::declval<ManagedType>().resolveImageView)>(*mlib));
    addFieldEx("resolveImageLayout", "resolveImageLayout", offsetof(ManagedType, resolveImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().resolveImageLayout)>(*mlib));
    addFieldEx("loadOp", "loadOp", offsetof(ManagedType, loadOp), das::makeFieldType<decltype(das::declval<ManagedType>().loadOp)>(*mlib));
    addFieldEx("storeOp", "storeOp", offsetof(ManagedType, storeOp), das::makeFieldType<decltype(das::declval<ManagedType>().storeOp)>(*mlib));
    addFieldEx("clearValue", "clearValue", offsetof(ManagedType, clearValue), das::makeFieldType<decltype(das::declval<ManagedType>().clearValue)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkRenderingAttachmentLocationInfoAnnotation : ManagedStructureAnnotation<VkRenderingAttachmentLocationInfo> {
  VkRenderingAttachmentLocationInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingAttachmentLocationInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentLocations", "pColorAttachmentLocations", offsetof(ManagedType, pColorAttachmentLocations), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentLocations)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_fragment_density_map) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
struct VkRenderingFragmentDensityMapAttachmentInfoEXTAnnotation : ManagedStructureAnnotation<VkRenderingFragmentDensityMapAttachmentInfoEXT> {
  VkRenderingFragmentDensityMapAttachmentInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingFragmentDensityMapAttachmentInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("imageLayout", "imageLayout", offsetof(ManagedType, imageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().imageLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_fragment_density_map) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_KHR_fragment_shading_rate) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
struct VkRenderingFragmentShadingRateAttachmentInfoKHRAnnotation : ManagedStructureAnnotation<VkRenderingFragmentShadingRateAttachmentInfoKHR> {
  VkRenderingFragmentShadingRateAttachmentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingFragmentShadingRateAttachmentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("imageView", "imageView", offsetof(ManagedType, imageView), das::makeFieldType<decltype(das::declval<ManagedType>().imageView)>(*mlib));
    addFieldEx("imageLayout", "imageLayout", offsetof(ManagedType, imageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().imageLayout)>(*mlib));
    addFieldEx("shadingRateAttachmentTexelSize", "shadingRateAttachmentTexelSize", offsetof(ManagedType, shadingRateAttachmentTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().shadingRateAttachmentTexelSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_fragment_shading_rate) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_VERSION_1_3)
struct VkRenderingInfoAnnotation : ManagedStructureAnnotation<VkRenderingInfo> {
  VkRenderingInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("renderArea", "renderArea", offsetof(ManagedType, renderArea), das::makeFieldType<decltype(das::declval<ManagedType>().renderArea)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
    addFieldEx("viewMask", "viewMask", offsetof(ManagedType, viewMask), das::makeFieldType<decltype(das::declval<ManagedType>().viewMask)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachments", "pColorAttachments", offsetof(ManagedType, pColorAttachments), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachments)>(*mlib));
    addFieldEx("pDepthAttachment", "pDepthAttachment", offsetof(ManagedType, pDepthAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthAttachment)>(*mlib));
    addFieldEx("pStencilAttachment", "pStencilAttachment", offsetof(ManagedType, pStencilAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pStencilAttachment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
struct VkRenderingInputAttachmentIndexInfoAnnotation : ManagedStructureAnnotation<VkRenderingInputAttachmentIndexInfo> {
  VkRenderingInputAttachmentIndexInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkRenderingInputAttachmentIndexInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("colorAttachmentCount", "colorAttachmentCount", offsetof(ManagedType, colorAttachmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().colorAttachmentCount)>(*mlib));
    addFieldEx("pColorAttachmentInputIndices", "pColorAttachmentInputIndices", offsetof(ManagedType, pColorAttachmentInputIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pColorAttachmentInputIndices)>(*mlib));
    addFieldEx("pDepthInputAttachmentIndex", "pDepthInputAttachmentIndex", offsetof(ManagedType, pDepthInputAttachmentIndex), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthInputAttachmentIndex)>(*mlib));
    addFieldEx("pStencilInputAttachmentIndex", "pStencilInputAttachmentIndex", offsetof(ManagedType, pStencilInputAttachmentIndex), das::makeFieldType<decltype(das::declval<ManagedType>().pStencilInputAttachmentIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
struct VkResolveImageInfo2Annotation : ManagedStructureAnnotation<VkResolveImageInfo2> {
  VkResolveImageInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkResolveImageInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("srcImage", "srcImage", offsetof(ManagedType, srcImage), das::makeFieldType<decltype(das::declval<ManagedType>().srcImage)>(*mlib));
    addFieldEx("srcImageLayout", "srcImageLayout", offsetof(ManagedType, srcImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().srcImageLayout)>(*mlib));
    addFieldEx("dstImage", "dstImage", offsetof(ManagedType, dstImage), das::makeFieldType<decltype(das::declval<ManagedType>().dstImage)>(*mlib));
    addFieldEx("dstImageLayout", "dstImageLayout", offsetof(ManagedType, dstImageLayout), das::makeFieldType<decltype(das::declval<ManagedType>().dstImageLayout)>(*mlib));
    addFieldEx("regionCount", "regionCount", offsetof(ManagedType, regionCount), das::makeFieldType<decltype(das::declval<ManagedType>().regionCount)>(*mlib));
    addFieldEx("pRegions", "pRegions", offsetof(ManagedType, pRegions), das::makeFieldType<decltype(das::declval<ManagedType>().pRegions)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_NV_ray_tracing_motion_blur)
struct VkSRTDataNVAnnotation : ManagedStructureAnnotation<VkSRTDataNV> {
  VkSRTDataNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSRTDataNV", lib) {
    addFieldEx("sx", "sx", offsetof(ManagedType, sx), das::makeFieldType<decltype(das::declval<ManagedType>().sx)>(*mlib));
    addFieldEx("a", "a", offsetof(ManagedType, a), das::makeFieldType<decltype(das::declval<ManagedType>().a)>(*mlib));
    addFieldEx("b", "b", offsetof(ManagedType, b), das::makeFieldType<decltype(das::declval<ManagedType>().b)>(*mlib));
    addFieldEx("pvx", "pvx", offsetof(ManagedType, pvx), das::makeFieldType<decltype(das::declval<ManagedType>().pvx)>(*mlib));
    addFieldEx("sy", "sy", offsetof(ManagedType, sy), das::makeFieldType<decltype(das::declval<ManagedType>().sy)>(*mlib));
    addFieldEx("c", "c", offsetof(ManagedType, c), das::makeFieldType<decltype(das::declval<ManagedType>().c)>(*mlib));
    addFieldEx("pvy", "pvy", offsetof(ManagedType, pvy), das::makeFieldType<decltype(das::declval<ManagedType>().pvy)>(*mlib));
    addFieldEx("sz", "sz", offsetof(ManagedType, sz), das::makeFieldType<decltype(das::declval<ManagedType>().sz)>(*mlib));
    addFieldEx("pvz", "pvz", offsetof(ManagedType, pvz), das::makeFieldType<decltype(das::declval<ManagedType>().pvz)>(*mlib));
    addFieldEx("qx", "qx", offsetof(ManagedType, qx), das::makeFieldType<decltype(das::declval<ManagedType>().qx)>(*mlib));
    addFieldEx("qy", "qy", offsetof(ManagedType, qy), das::makeFieldType<decltype(das::declval<ManagedType>().qy)>(*mlib));
    addFieldEx("qz", "qz", offsetof(ManagedType, qz), das::makeFieldType<decltype(das::declval<ManagedType>().qz)>(*mlib));
    addFieldEx("qw", "qw", offsetof(ManagedType, qw), das::makeFieldType<decltype(das::declval<ManagedType>().qw)>(*mlib));
    addFieldEx("tx", "tx", offsetof(ManagedType, tx), das::makeFieldType<decltype(das::declval<ManagedType>().tx)>(*mlib));
    addFieldEx("ty", "ty", offsetof(ManagedType, ty), das::makeFieldType<decltype(das::declval<ManagedType>().ty)>(*mlib));
    addFieldEx("tz", "tz", offsetof(ManagedType, tz), das::makeFieldType<decltype(das::declval<ManagedType>().tz)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_QCOM_image_processing2)
struct VkSamplerBlockMatchWindowCreateInfoQCOMAnnotation : ManagedStructureAnnotation<VkSamplerBlockMatchWindowCreateInfoQCOM> {
  VkSamplerBlockMatchWindowCreateInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerBlockMatchWindowCreateInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("windowExtent", "windowExtent", offsetof(ManagedType, windowExtent), das::makeFieldType<decltype(das::declval<ManagedType>().windowExtent)>(*mlib));
    addFieldEx("windowCompareMode", "windowCompareMode", offsetof(ManagedType, windowCompareMode), das::makeFieldType<decltype(das::declval<ManagedType>().windowCompareMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_image_processing2) */
#if defined(VK_EXT_border_color_swizzle)
struct VkSamplerBorderColorComponentMappingCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkSamplerBorderColorComponentMappingCreateInfoEXT> {
  VkSamplerBorderColorComponentMappingCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerBorderColorComponentMappingCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("components", "components", offsetof(ManagedType, components), das::makeFieldType<decltype(das::declval<ManagedType>().components)>(*mlib));
    addFieldEx("srgb", "srgb", offsetof(ManagedType, srgb), das::makeFieldType<decltype(das::declval<ManagedType>().srgb)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_border_color_swizzle) */
#if defined(VK_EXT_descriptor_buffer)
struct VkSamplerCaptureDescriptorDataInfoEXTAnnotation : ManagedStructureAnnotation<VkSamplerCaptureDescriptorDataInfoEXT> {
  VkSamplerCaptureDescriptorDataInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerCaptureDescriptorDataInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sampler", "sampler", offsetof(ManagedType, sampler), das::makeFieldType<decltype(das::declval<ManagedType>().sampler)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
struct VkSamplerCreateInfoAnnotation : ManagedStructureAnnotation<VkSamplerCreateInfo> {
  VkSamplerCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("magFilter", "magFilter", offsetof(ManagedType, magFilter), das::makeFieldType<decltype(das::declval<ManagedType>().magFilter)>(*mlib));
    addFieldEx("minFilter", "minFilter", offsetof(ManagedType, minFilter), das::makeFieldType<decltype(das::declval<ManagedType>().minFilter)>(*mlib));
    addFieldEx("mipmapMode", "mipmapMode", offsetof(ManagedType, mipmapMode), das::makeFieldType<decltype(das::declval<ManagedType>().mipmapMode)>(*mlib));
    addFieldEx("addressModeU", "addressModeU", offsetof(ManagedType, addressModeU), das::makeFieldType<decltype(das::declval<ManagedType>().addressModeU)>(*mlib));
    addFieldEx("addressModeV", "addressModeV", offsetof(ManagedType, addressModeV), das::makeFieldType<decltype(das::declval<ManagedType>().addressModeV)>(*mlib));
    addFieldEx("addressModeW", "addressModeW", offsetof(ManagedType, addressModeW), das::makeFieldType<decltype(das::declval<ManagedType>().addressModeW)>(*mlib));
    addFieldEx("mipLodBias", "mipLodBias", offsetof(ManagedType, mipLodBias), das::makeFieldType<decltype(das::declval<ManagedType>().mipLodBias)>(*mlib));
    addFieldEx("anisotropyEnable", "anisotropyEnable", offsetof(ManagedType, anisotropyEnable), das::makeFieldType<decltype(das::declval<ManagedType>().anisotropyEnable)>(*mlib));
    addFieldEx("maxAnisotropy", "maxAnisotropy", offsetof(ManagedType, maxAnisotropy), das::makeFieldType<decltype(das::declval<ManagedType>().maxAnisotropy)>(*mlib));
    addFieldEx("compareEnable", "compareEnable", offsetof(ManagedType, compareEnable), das::makeFieldType<decltype(das::declval<ManagedType>().compareEnable)>(*mlib));
    addFieldEx("compareOp", "compareOp", offsetof(ManagedType, compareOp), das::makeFieldType<decltype(das::declval<ManagedType>().compareOp)>(*mlib));
    addFieldEx("minLod", "minLod", offsetof(ManagedType, minLod), das::makeFieldType<decltype(das::declval<ManagedType>().minLod)>(*mlib));
    addFieldEx("maxLod", "maxLod", offsetof(ManagedType, maxLod), das::makeFieldType<decltype(das::declval<ManagedType>().maxLod)>(*mlib));
    addFieldEx("borderColor", "borderColor", offsetof(ManagedType, borderColor), das::makeFieldType<decltype(das::declval<ManagedType>().borderColor)>(*mlib));
    addFieldEx("unnormalizedCoordinates", "unnormalizedCoordinates", offsetof(ManagedType, unnormalizedCoordinates), das::makeFieldType<decltype(das::declval<ManagedType>().unnormalizedCoordinates)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_QCOM_filter_cubic_weights)
struct VkSamplerCubicWeightsCreateInfoQCOMAnnotation : ManagedStructureAnnotation<VkSamplerCubicWeightsCreateInfoQCOM> {
  VkSamplerCubicWeightsCreateInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerCubicWeightsCreateInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("cubicWeights", "cubicWeights", offsetof(ManagedType, cubicWeights), das::makeFieldType<decltype(das::declval<ManagedType>().cubicWeights)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_EXT_custom_border_color)
struct VkSamplerCustomBorderColorCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkSamplerCustomBorderColorCreateInfoEXT> {
  VkSamplerCustomBorderColorCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerCustomBorderColorCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("customBorderColor", "customBorderColor", offsetof(ManagedType, customBorderColor), das::makeFieldType<decltype(das::declval<ManagedType>().customBorderColor)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_custom_border_color) */
#if defined(VK_VERSION_1_2)
struct VkSamplerReductionModeCreateInfoAnnotation : ManagedStructureAnnotation<VkSamplerReductionModeCreateInfo> {
  VkSamplerReductionModeCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerReductionModeCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("reductionMode", "reductionMode", offsetof(ManagedType, reductionMode), das::makeFieldType<decltype(das::declval<ManagedType>().reductionMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
struct VkSamplerYcbcrConversionCreateInfoAnnotation : ManagedStructureAnnotation<VkSamplerYcbcrConversionCreateInfo> {
  VkSamplerYcbcrConversionCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerYcbcrConversionCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("ycbcrModel", "ycbcrModel", offsetof(ManagedType, ycbcrModel), das::makeFieldType<decltype(das::declval<ManagedType>().ycbcrModel)>(*mlib));
    addFieldEx("ycbcrRange", "ycbcrRange", offsetof(ManagedType, ycbcrRange), das::makeFieldType<decltype(das::declval<ManagedType>().ycbcrRange)>(*mlib));
    addFieldEx("components", "components", offsetof(ManagedType, components), das::makeFieldType<decltype(das::declval<ManagedType>().components)>(*mlib));
    addFieldEx("xChromaOffset", "xChromaOffset", offsetof(ManagedType, xChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().xChromaOffset)>(*mlib));
    addFieldEx("yChromaOffset", "yChromaOffset", offsetof(ManagedType, yChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().yChromaOffset)>(*mlib));
    addFieldEx("chromaFilter", "chromaFilter", offsetof(ManagedType, chromaFilter), das::makeFieldType<decltype(das::declval<ManagedType>().chromaFilter)>(*mlib));
    addFieldEx("forceExplicitReconstruction", "forceExplicitReconstruction", offsetof(ManagedType, forceExplicitReconstruction), das::makeFieldType<decltype(das::declval<ManagedType>().forceExplicitReconstruction)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSamplerYcbcrConversionImageFormatPropertiesAnnotation : ManagedStructureAnnotation<VkSamplerYcbcrConversionImageFormatProperties> {
  VkSamplerYcbcrConversionImageFormatPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerYcbcrConversionImageFormatProperties", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("combinedImageSamplerDescriptorCount", "combinedImageSamplerDescriptorCount", offsetof(ManagedType, combinedImageSamplerDescriptorCount), das::makeFieldType<decltype(das::declval<ManagedType>().combinedImageSamplerDescriptorCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSamplerYcbcrConversionInfoAnnotation : ManagedStructureAnnotation<VkSamplerYcbcrConversionInfo> {
  VkSamplerYcbcrConversionInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerYcbcrConversionInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("conversion", "conversion", offsetof(ManagedType, conversion), das::makeFieldType<decltype(das::declval<ManagedType>().conversion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_QCOM_ycbcr_degamma)
struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMAnnotation : ManagedStructureAnnotation<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM> {
  VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("enableYDegamma", "enableYDegamma", offsetof(ManagedType, enableYDegamma), das::makeFieldType<decltype(das::declval<ManagedType>().enableYDegamma)>(*mlib));
    addFieldEx("enableCbCrDegamma", "enableCbCrDegamma", offsetof(ManagedType, enableCbCrDegamma), das::makeFieldType<decltype(das::declval<ManagedType>().enableCbCrDegamma)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_ycbcr_degamma) */
#if defined(VK_QNX_external_memory_screen_buffer)
struct VkScreenBufferFormatPropertiesQNXAnnotation : ManagedStructureAnnotation<VkScreenBufferFormatPropertiesQNX> {
  VkScreenBufferFormatPropertiesQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkScreenBufferFormatPropertiesQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("externalFormat", "externalFormat", offsetof(ManagedType, externalFormat), das::makeFieldType<decltype(das::declval<ManagedType>().externalFormat)>(*mlib));
    addFieldEx("screenUsage", "screenUsage", offsetof(ManagedType, screenUsage), das::makeFieldType<decltype(das::declval<ManagedType>().screenUsage)>(*mlib));
    addFieldEx("formatFeatures", "formatFeatures", offsetof(ManagedType, formatFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().formatFeatures)>(*mlib));
    addFieldEx("samplerYcbcrConversionComponents", "samplerYcbcrConversionComponents", offsetof(ManagedType, samplerYcbcrConversionComponents), das::makeFieldType<decltype(das::declval<ManagedType>().samplerYcbcrConversionComponents)>(*mlib));
    addFieldEx("suggestedYcbcrModel", "suggestedYcbcrModel", offsetof(ManagedType, suggestedYcbcrModel), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrModel)>(*mlib));
    addFieldEx("suggestedYcbcrRange", "suggestedYcbcrRange", offsetof(ManagedType, suggestedYcbcrRange), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYcbcrRange)>(*mlib));
    addFieldEx("suggestedXChromaOffset", "suggestedXChromaOffset", offsetof(ManagedType, suggestedXChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedXChromaOffset)>(*mlib));
    addFieldEx("suggestedYChromaOffset", "suggestedYChromaOffset", offsetof(ManagedType, suggestedYChromaOffset), das::makeFieldType<decltype(das::declval<ManagedType>().suggestedYChromaOffset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkScreenBufferPropertiesQNXAnnotation : ManagedStructureAnnotation<VkScreenBufferPropertiesQNX> {
  VkScreenBufferPropertiesQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkScreenBufferPropertiesQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("allocationSize", "allocationSize", offsetof(ManagedType, allocationSize), das::makeFieldType<decltype(das::declval<ManagedType>().allocationSize)>(*mlib));
    addFieldEx("memoryTypeBits", "memoryTypeBits", offsetof(ManagedType, memoryTypeBits), das::makeFieldType<decltype(das::declval<ManagedType>().memoryTypeBits)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_QNX_screen_surface)
struct VkScreenSurfaceCreateInfoQNXAnnotation : ManagedStructureAnnotation<VkScreenSurfaceCreateInfoQNX> {
  VkScreenSurfaceCreateInfoQNXAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkScreenSurfaceCreateInfoQNX", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("context", "context", offsetof(ManagedType, context), das::makeFieldType<decltype(das::declval<ManagedType>().context)>(*mlib));
    addFieldEx("window", "window", offsetof(ManagedType, window), das::makeFieldType<decltype(das::declval<ManagedType>().window)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_VERSION_1_0)
struct VkSemaphoreCreateInfoAnnotation : ManagedStructureAnnotation<VkSemaphoreCreateInfo> {
  VkSemaphoreCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_external_semaphore_fd)
struct VkSemaphoreGetFdInfoKHRAnnotation : ManagedStructureAnnotation<VkSemaphoreGetFdInfoKHR> {
  VkSemaphoreGetFdInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreGetFdInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
struct VkSemaphoreGetWin32HandleInfoKHRAnnotation : ManagedStructureAnnotation<VkSemaphoreGetWin32HandleInfoKHR> {
  VkSemaphoreGetWin32HandleInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreGetWin32HandleInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_FUCHSIA_external_semaphore)
struct VkSemaphoreGetZirconHandleInfoFUCHSIAAnnotation : ManagedStructureAnnotation<VkSemaphoreGetZirconHandleInfoFUCHSIA> {
  VkSemaphoreGetZirconHandleInfoFUCHSIAAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreGetZirconHandleInfoFUCHSIA", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("handleType", "handleType", offsetof(ManagedType, handleType), das::makeFieldType<decltype(das::declval<ManagedType>().handleType)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_VERSION_1_2)
struct VkSemaphoreSignalInfoAnnotation : ManagedStructureAnnotation<VkSemaphoreSignalInfo> {
  VkSemaphoreSignalInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreSignalInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphore", "semaphore", offsetof(ManagedType, semaphore), das::makeFieldType<decltype(das::declval<ManagedType>().semaphore)>(*mlib));
    addFieldEx("value", "value", offsetof(ManagedType, value), das::makeFieldType<decltype(das::declval<ManagedType>().value)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSemaphoreTypeCreateInfoAnnotation : ManagedStructureAnnotation<VkSemaphoreTypeCreateInfo> {
  VkSemaphoreTypeCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreTypeCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("semaphoreType", "semaphoreType", offsetof(ManagedType, semaphoreType), das::makeFieldType<decltype(das::declval<ManagedType>().semaphoreType)>(*mlib));
    addFieldEx("initialValue", "initialValue", offsetof(ManagedType, initialValue), das::makeFieldType<decltype(das::declval<ManagedType>().initialValue)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSemaphoreWaitInfoAnnotation : ManagedStructureAnnotation<VkSemaphoreWaitInfo> {
  VkSemaphoreWaitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSemaphoreWaitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("semaphoreCount", "semaphoreCount", offsetof(ManagedType, semaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().semaphoreCount)>(*mlib));
    addFieldEx("pSemaphores", "pSemaphores", offsetof(ManagedType, pSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pSemaphores)>(*mlib));
    addFieldEx("pValues", "pValues", offsetof(ManagedType, pValues), das::makeFieldType<decltype(das::declval<ManagedType>().pValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
struct VkSetDescriptorBufferOffsetsInfoEXTAnnotation : ManagedStructureAnnotation<VkSetDescriptorBufferOffsetsInfoEXT> {
  VkSetDescriptorBufferOffsetsInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSetDescriptorBufferOffsetsInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stageFlags", "stageFlags", offsetof(ManagedType, stageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stageFlags)>(*mlib));
    addFieldEx("layout", "layout", offsetof(ManagedType, layout), das::makeFieldType<decltype(das::declval<ManagedType>().layout)>(*mlib));
    addFieldEx("firstSet", "firstSet", offsetof(ManagedType, firstSet), das::makeFieldType<decltype(das::declval<ManagedType>().firstSet)>(*mlib));
    addFieldEx("setCount", "setCount", offsetof(ManagedType, setCount), das::makeFieldType<decltype(das::declval<ManagedType>().setCount)>(*mlib));
    addFieldEx("pBufferIndices", "pBufferIndices", offsetof(ManagedType, pBufferIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pBufferIndices)>(*mlib));
    addFieldEx("pOffsets", "pOffsets", offsetof(ManagedType, pOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_NV_low_latency2)
struct VkSetLatencyMarkerInfoNVAnnotation : ManagedStructureAnnotation<VkSetLatencyMarkerInfoNV> {
  VkSetLatencyMarkerInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSetLatencyMarkerInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentID", "presentID", offsetof(ManagedType, presentID), das::makeFieldType<decltype(das::declval<ManagedType>().presentID)>(*mlib));
    addFieldEx("marker", "marker", offsetof(ManagedType, marker), das::makeFieldType<decltype(das::declval<ManagedType>().marker)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_device_generated_commands)
struct VkSetStateFlagsIndirectCommandNVAnnotation : ManagedStructureAnnotation<VkSetStateFlagsIndirectCommandNV> {
  VkSetStateFlagsIndirectCommandNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSetStateFlagsIndirectCommandNV", lib) {
    addFieldEx("data", "data", offsetof(ManagedType, data), das::makeFieldType<decltype(das::declval<ManagedType>().data)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_shader_object)
struct VkShaderCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkShaderCreateInfoEXT> {
  VkShaderCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("stage", "stage", offsetof(ManagedType, stage), das::makeFieldType<decltype(das::declval<ManagedType>().stage)>(*mlib));
    addFieldEx("nextStage", "nextStage", offsetof(ManagedType, nextStage), das::makeFieldType<decltype(das::declval<ManagedType>().nextStage)>(*mlib));
    addFieldEx("codeType", "codeType", offsetof(ManagedType, codeType), das::makeFieldType<decltype(das::declval<ManagedType>().codeType)>(*mlib));
    addFieldEx("codeSize", "codeSize", offsetof(ManagedType, codeSize), das::makeFieldType<decltype(das::declval<ManagedType>().codeSize)>(*mlib));
    addFieldEx("pCode", "pCode", offsetof(ManagedType, pCode), das::makeFieldType<decltype(das::declval<ManagedType>().pCode)>(*mlib));
    addFieldEx("pName", "pName", offsetof(ManagedType, pName), das::makeFieldType<decltype(das::declval<ManagedType>().pName)>(*mlib));
    addFieldEx("setLayoutCount", "setLayoutCount", offsetof(ManagedType, setLayoutCount), das::makeFieldType<decltype(das::declval<ManagedType>().setLayoutCount)>(*mlib));
    addFieldEx("pSetLayouts", "pSetLayouts", offsetof(ManagedType, pSetLayouts), das::makeFieldType<decltype(das::declval<ManagedType>().pSetLayouts)>(*mlib));
    addFieldEx("pushConstantRangeCount", "pushConstantRangeCount", offsetof(ManagedType, pushConstantRangeCount), das::makeFieldType<decltype(das::declval<ManagedType>().pushConstantRangeCount)>(*mlib));
    addFieldEx("pPushConstantRanges", "pPushConstantRanges", offsetof(ManagedType, pPushConstantRanges), das::makeFieldType<decltype(das::declval<ManagedType>().pPushConstantRanges)>(*mlib));
    addFieldEx("pSpecializationInfo", "pSpecializationInfo", offsetof(ManagedType, pSpecializationInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pSpecializationInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_VERSION_1_0)
struct VkShaderModuleCreateInfoAnnotation : ManagedStructureAnnotation<VkShaderModuleCreateInfo> {
  VkShaderModuleCreateInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderModuleCreateInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("codeSize", "codeSize", offsetof(ManagedType, codeSize), das::makeFieldType<decltype(das::declval<ManagedType>().codeSize)>(*mlib));
    addFieldEx("pCode", "pCode", offsetof(ManagedType, pCode), das::makeFieldType<decltype(das::declval<ManagedType>().pCode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_shader_module_identifier)
struct VkShaderModuleIdentifierEXTAnnotation : ManagedStructureAnnotation<VkShaderModuleIdentifierEXT> {
  VkShaderModuleIdentifierEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderModuleIdentifierEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("identifierSize", "identifierSize", offsetof(ManagedType, identifierSize), das::makeFieldType<decltype(das::declval<ManagedType>().identifierSize)>(*mlib));
    addFieldEx("identifier", "identifier", offsetof(ManagedType, identifier), das::makeFieldType<decltype(das::declval<ManagedType>().identifier)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_validation_cache)
struct VkShaderModuleValidationCacheCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkShaderModuleValidationCacheCreateInfoEXT> {
  VkShaderModuleValidationCacheCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderModuleValidationCacheCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("validationCache", "validationCache", offsetof(ManagedType, validationCache), das::makeFieldType<decltype(das::declval<ManagedType>().validationCache)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_AMD_shader_info)
struct VkShaderResourceUsageAMDAnnotation : ManagedStructureAnnotation<VkShaderResourceUsageAMD> {
  VkShaderResourceUsageAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderResourceUsageAMD", lib) {
    addFieldEx("numUsedVgprs", "numUsedVgprs", offsetof(ManagedType, numUsedVgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numUsedVgprs)>(*mlib));
    addFieldEx("numUsedSgprs", "numUsedSgprs", offsetof(ManagedType, numUsedSgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numUsedSgprs)>(*mlib));
    addFieldEx("ldsSizePerLocalWorkGroup", "ldsSizePerLocalWorkGroup", offsetof(ManagedType, ldsSizePerLocalWorkGroup), das::makeFieldType<decltype(das::declval<ManagedType>().ldsSizePerLocalWorkGroup)>(*mlib));
    addFieldEx("ldsUsageSizeInBytes", "ldsUsageSizeInBytes", offsetof(ManagedType, ldsUsageSizeInBytes), das::makeFieldType<decltype(das::declval<ManagedType>().ldsUsageSizeInBytes)>(*mlib));
    addFieldEx("scratchMemUsageInBytes", "scratchMemUsageInBytes", offsetof(ManagedType, scratchMemUsageInBytes), das::makeFieldType<decltype(das::declval<ManagedType>().scratchMemUsageInBytes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkShaderStatisticsInfoAMDAnnotation : ManagedStructureAnnotation<VkShaderStatisticsInfoAMD> {
  VkShaderStatisticsInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkShaderStatisticsInfoAMD", lib) {
    addFieldEx("shaderStageMask", "shaderStageMask", offsetof(ManagedType, shaderStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().shaderStageMask)>(*mlib));
    addFieldEx("resourceUsage", "resourceUsage", offsetof(ManagedType, resourceUsage), das::makeFieldType<decltype(das::declval<ManagedType>().resourceUsage)>(*mlib));
    addFieldEx("numPhysicalVgprs", "numPhysicalVgprs", offsetof(ManagedType, numPhysicalVgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numPhysicalVgprs)>(*mlib));
    addFieldEx("numPhysicalSgprs", "numPhysicalSgprs", offsetof(ManagedType, numPhysicalSgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numPhysicalSgprs)>(*mlib));
    addFieldEx("numAvailableVgprs", "numAvailableVgprs", offsetof(ManagedType, numAvailableVgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numAvailableVgprs)>(*mlib));
    addFieldEx("numAvailableSgprs", "numAvailableSgprs", offsetof(ManagedType, numAvailableSgprs), das::makeFieldType<decltype(das::declval<ManagedType>().numAvailableSgprs)>(*mlib));
    addFieldEx("computeWorkGroupSize", "computeWorkGroupSize", offsetof(ManagedType, computeWorkGroupSize), das::makeFieldType<decltype(das::declval<ManagedType>().computeWorkGroupSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_KHR_shared_presentable_image)
struct VkSharedPresentSurfaceCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkSharedPresentSurfaceCapabilitiesKHR> {
  VkSharedPresentSurfaceCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSharedPresentSurfaceCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("sharedPresentSupportedUsageFlags", "sharedPresentSupportedUsageFlags", offsetof(ManagedType, sharedPresentSupportedUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().sharedPresentSupportedUsageFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_VERSION_1_0)
struct VkSparseImageFormatPropertiesAnnotation : ManagedStructureAnnotation<VkSparseImageFormatProperties> {
  VkSparseImageFormatPropertiesAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageFormatProperties", lib) {
    addFieldEx("aspectMask", "aspectMask", offsetof(ManagedType, aspectMask), das::makeFieldType<decltype(das::declval<ManagedType>().aspectMask)>(*mlib));
    addFieldEx("imageGranularity", "imageGranularity", offsetof(ManagedType, imageGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().imageGranularity)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkSparseImageFormatProperties2Annotation : ManagedStructureAnnotation<VkSparseImageFormatProperties2> {
  VkSparseImageFormatProperties2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageFormatProperties2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("properties", "properties", offsetof(ManagedType, properties), das::makeFieldType<decltype(das::declval<ManagedType>().properties)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
struct VkSparseImageMemoryRequirementsAnnotation : ManagedStructureAnnotation<VkSparseImageMemoryRequirements> {
  VkSparseImageMemoryRequirementsAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageMemoryRequirements", lib) {
    addFieldEx("formatProperties", "formatProperties", offsetof(ManagedType, formatProperties), das::makeFieldType<decltype(das::declval<ManagedType>().formatProperties)>(*mlib));
    addFieldEx("imageMipTailFirstLod", "imageMipTailFirstLod", offsetof(ManagedType, imageMipTailFirstLod), das::makeFieldType<decltype(das::declval<ManagedType>().imageMipTailFirstLod)>(*mlib));
    addFieldEx("imageMipTailSize", "imageMipTailSize", offsetof(ManagedType, imageMipTailSize), das::makeFieldType<decltype(das::declval<ManagedType>().imageMipTailSize)>(*mlib));
    addFieldEx("imageMipTailOffset", "imageMipTailOffset", offsetof(ManagedType, imageMipTailOffset), das::makeFieldType<decltype(das::declval<ManagedType>().imageMipTailOffset)>(*mlib));
    addFieldEx("imageMipTailStride", "imageMipTailStride", offsetof(ManagedType, imageMipTailStride), das::makeFieldType<decltype(das::declval<ManagedType>().imageMipTailStride)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
struct VkSparseImageMemoryRequirements2Annotation : ManagedStructureAnnotation<VkSparseImageMemoryRequirements2> {
  VkSparseImageMemoryRequirements2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSparseImageMemoryRequirements2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryRequirements", "memoryRequirements", offsetof(ManagedType, memoryRequirements), das::makeFieldType<decltype(das::declval<ManagedType>().memoryRequirements)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_GGP_stream_descriptor_surface)
struct VkStreamDescriptorSurfaceCreateInfoGGPAnnotation : ManagedStructureAnnotation<VkStreamDescriptorSurfaceCreateInfoGGP> {
  VkStreamDescriptorSurfaceCreateInfoGGPAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkStreamDescriptorSurfaceCreateInfoGGP", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("streamDescriptor", "streamDescriptor", offsetof(ManagedType, streamDescriptor), das::makeFieldType<decltype(das::declval<ManagedType>().streamDescriptor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_KHR_ray_tracing_pipeline)
struct VkStridedDeviceAddressRegionKHRAnnotation : ManagedStructureAnnotation<VkStridedDeviceAddressRegionKHR> {
  VkStridedDeviceAddressRegionKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkStridedDeviceAddressRegionKHR", lib) {
    addFieldEx("deviceAddress", "deviceAddress", offsetof(ManagedType, deviceAddress), das::makeFieldType<decltype(das::declval<ManagedType>().deviceAddress)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_VERSION_1_0)
struct VkSubmitInfoAnnotation : ManagedStructureAnnotation<VkSubmitInfo> {
  VkSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreCount", "waitSemaphoreCount", offsetof(ManagedType, waitSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreCount)>(*mlib));
    addFieldEx("pWaitSemaphores", "pWaitSemaphores", offsetof(ManagedType, pWaitSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphores)>(*mlib));
    addFieldEx("pWaitDstStageMask", "pWaitDstStageMask", offsetof(ManagedType, pWaitDstStageMask), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitDstStageMask)>(*mlib));
    addFieldEx("commandBufferCount", "commandBufferCount", offsetof(ManagedType, commandBufferCount), das::makeFieldType<decltype(das::declval<ManagedType>().commandBufferCount)>(*mlib));
    addFieldEx("pCommandBuffers", "pCommandBuffers", offsetof(ManagedType, pCommandBuffers), das::makeFieldType<decltype(das::declval<ManagedType>().pCommandBuffers)>(*mlib));
    addFieldEx("signalSemaphoreCount", "signalSemaphoreCount", offsetof(ManagedType, signalSemaphoreCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreCount)>(*mlib));
    addFieldEx("pSignalSemaphores", "pSignalSemaphores", offsetof(ManagedType, pSignalSemaphores), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphores)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
struct VkSubmitInfo2Annotation : ManagedStructureAnnotation<VkSubmitInfo2> {
  VkSubmitInfo2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubmitInfo2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("waitSemaphoreInfoCount", "waitSemaphoreInfoCount", offsetof(ManagedType, waitSemaphoreInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreInfoCount)>(*mlib));
    addFieldEx("pWaitSemaphoreInfos", "pWaitSemaphoreInfos", offsetof(ManagedType, pWaitSemaphoreInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphoreInfos)>(*mlib));
    addFieldEx("commandBufferInfoCount", "commandBufferInfoCount", offsetof(ManagedType, commandBufferInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().commandBufferInfoCount)>(*mlib));
    addFieldEx("pCommandBufferInfos", "pCommandBufferInfos", offsetof(ManagedType, pCommandBufferInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pCommandBufferInfos)>(*mlib));
    addFieldEx("signalSemaphoreInfoCount", "signalSemaphoreInfoCount", offsetof(ManagedType, signalSemaphoreInfoCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreInfoCount)>(*mlib));
    addFieldEx("pSignalSemaphoreInfos", "pSignalSemaphoreInfos", offsetof(ManagedType, pSignalSemaphoreInfos), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphoreInfos)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_2)
struct VkSubpassBeginInfoAnnotation : ManagedStructureAnnotation<VkSubpassBeginInfo> {
  VkSubpassBeginInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassBeginInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("contents", "contents", offsetof(ManagedType, contents), das::makeFieldType<decltype(das::declval<ManagedType>().contents)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubpassDescriptionDepthStencilResolveAnnotation : ManagedStructureAnnotation<VkSubpassDescriptionDepthStencilResolve> {
  VkSubpassDescriptionDepthStencilResolveAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassDescriptionDepthStencilResolve", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("depthResolveMode", "depthResolveMode", offsetof(ManagedType, depthResolveMode), das::makeFieldType<decltype(das::declval<ManagedType>().depthResolveMode)>(*mlib));
    addFieldEx("stencilResolveMode", "stencilResolveMode", offsetof(ManagedType, stencilResolveMode), das::makeFieldType<decltype(das::declval<ManagedType>().stencilResolveMode)>(*mlib));
    addFieldEx("pDepthStencilResolveAttachment", "pDepthStencilResolveAttachment", offsetof(ManagedType, pDepthStencilResolveAttachment), das::makeFieldType<decltype(das::declval<ManagedType>().pDepthStencilResolveAttachment)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubpassEndInfoAnnotation : ManagedStructureAnnotation<VkSubpassEndInfo> {
  VkSubpassEndInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassEndInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_QCOM_fragment_density_map_offset)
struct VkSubpassFragmentDensityMapOffsetEndInfoQCOMAnnotation : ManagedStructureAnnotation<VkSubpassFragmentDensityMapOffsetEndInfoQCOM> {
  VkSubpassFragmentDensityMapOffsetEndInfoQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassFragmentDensityMapOffsetEndInfoQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fragmentDensityOffsetCount", "fragmentDensityOffsetCount", offsetof(ManagedType, fragmentDensityOffsetCount), das::makeFieldType<decltype(das::declval<ManagedType>().fragmentDensityOffsetCount)>(*mlib));
    addFieldEx("pFragmentDensityOffsets", "pFragmentDensityOffsets", offsetof(ManagedType, pFragmentDensityOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pFragmentDensityOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_fragment_density_map_offset) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
struct VkSubpassResolvePerformanceQueryEXTAnnotation : ManagedStructureAnnotation<VkSubpassResolvePerformanceQueryEXT> {
  VkSubpassResolvePerformanceQueryEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassResolvePerformanceQueryEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("optimal", "optimal", offsetof(ManagedType, optimal), das::makeFieldType<decltype(das::declval<ManagedType>().optimal)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_HUAWEI_subpass_shading)
struct VkSubpassShadingPipelineCreateInfoHUAWEIAnnotation : ManagedStructureAnnotation<VkSubpassShadingPipelineCreateInfoHUAWEI> {
  VkSubpassShadingPipelineCreateInfoHUAWEIAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubpassShadingPipelineCreateInfoHUAWEI", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("renderPass", "renderPass", offsetof(ManagedType, renderPass), das::makeFieldType<decltype(das::declval<ManagedType>().renderPass)>(*mlib));
    addFieldEx("subpass", "subpass", offsetof(ManagedType, subpass), das::makeFieldType<decltype(das::declval<ManagedType>().subpass)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_VERSION_1_4)
struct VkSubresourceHostMemcpySizeAnnotation : ManagedStructureAnnotation<VkSubresourceHostMemcpySize> {
  VkSubresourceHostMemcpySizeAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubresourceHostMemcpySize", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("size", "size", offsetof(ManagedType, size), das::makeFieldType<decltype(das::declval<ManagedType>().size)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSubresourceLayout2Annotation : ManagedStructureAnnotation<VkSubresourceLayout2> {
  VkSubresourceLayout2Annotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSubresourceLayout2", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("subresourceLayout", "subresourceLayout", offsetof(ManagedType, subresourceLayout), das::makeFieldType<decltype(das::declval<ManagedType>().subresourceLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_display_surface_counter)
struct VkSurfaceCapabilities2EXTAnnotation : ManagedStructureAnnotation<VkSurfaceCapabilities2EXT> {
  VkSurfaceCapabilities2EXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceCapabilities2EXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minImageCount", "minImageCount", offsetof(ManagedType, minImageCount), das::makeFieldType<decltype(das::declval<ManagedType>().minImageCount)>(*mlib));
    addFieldEx("maxImageCount", "maxImageCount", offsetof(ManagedType, maxImageCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageCount)>(*mlib));
    addFieldEx("currentExtent", "currentExtent", offsetof(ManagedType, currentExtent), das::makeFieldType<decltype(das::declval<ManagedType>().currentExtent)>(*mlib));
    addFieldEx("minImageExtent", "minImageExtent", offsetof(ManagedType, minImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minImageExtent)>(*mlib));
    addFieldEx("maxImageExtent", "maxImageExtent", offsetof(ManagedType, maxImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageExtent)>(*mlib));
    addFieldEx("maxImageArrayLayers", "maxImageArrayLayers", offsetof(ManagedType, maxImageArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageArrayLayers)>(*mlib));
    addFieldEx("supportedTransforms", "supportedTransforms", offsetof(ManagedType, supportedTransforms), das::makeFieldType<decltype(das::declval<ManagedType>().supportedTransforms)>(*mlib));
    addFieldEx("currentTransform", "currentTransform", offsetof(ManagedType, currentTransform), das::makeFieldType<decltype(das::declval<ManagedType>().currentTransform)>(*mlib));
    addFieldEx("supportedCompositeAlpha", "supportedCompositeAlpha", offsetof(ManagedType, supportedCompositeAlpha), das::makeFieldType<decltype(das::declval<ManagedType>().supportedCompositeAlpha)>(*mlib));
    addFieldEx("supportedUsageFlags", "supportedUsageFlags", offsetof(ManagedType, supportedUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().supportedUsageFlags)>(*mlib));
    addFieldEx("supportedSurfaceCounters", "supportedSurfaceCounters", offsetof(ManagedType, supportedSurfaceCounters), das::makeFieldType<decltype(das::declval<ManagedType>().supportedSurfaceCounters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_KHR_surface)
struct VkSurfaceCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkSurfaceCapabilitiesKHR> {
  VkSurfaceCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceCapabilitiesKHR", lib) {
    addFieldEx("minImageCount", "minImageCount", offsetof(ManagedType, minImageCount), das::makeFieldType<decltype(das::declval<ManagedType>().minImageCount)>(*mlib));
    addFieldEx("maxImageCount", "maxImageCount", offsetof(ManagedType, maxImageCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageCount)>(*mlib));
    addFieldEx("currentExtent", "currentExtent", offsetof(ManagedType, currentExtent), das::makeFieldType<decltype(das::declval<ManagedType>().currentExtent)>(*mlib));
    addFieldEx("minImageExtent", "minImageExtent", offsetof(ManagedType, minImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minImageExtent)>(*mlib));
    addFieldEx("maxImageExtent", "maxImageExtent", offsetof(ManagedType, maxImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageExtent)>(*mlib));
    addFieldEx("maxImageArrayLayers", "maxImageArrayLayers", offsetof(ManagedType, maxImageArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxImageArrayLayers)>(*mlib));
    addFieldEx("supportedTransforms", "supportedTransforms", offsetof(ManagedType, supportedTransforms), das::makeFieldType<decltype(das::declval<ManagedType>().supportedTransforms)>(*mlib));
    addFieldEx("currentTransform", "currentTransform", offsetof(ManagedType, currentTransform), das::makeFieldType<decltype(das::declval<ManagedType>().currentTransform)>(*mlib));
    addFieldEx("supportedCompositeAlpha", "supportedCompositeAlpha", offsetof(ManagedType, supportedCompositeAlpha), das::makeFieldType<decltype(das::declval<ManagedType>().supportedCompositeAlpha)>(*mlib));
    addFieldEx("supportedUsageFlags", "supportedUsageFlags", offsetof(ManagedType, supportedUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().supportedUsageFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_get_surface_capabilities2)
struct VkSurfaceCapabilities2KHRAnnotation : ManagedStructureAnnotation<VkSurfaceCapabilities2KHR> {
  VkSurfaceCapabilities2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceCapabilities2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("surfaceCapabilities", "surfaceCapabilities", offsetof(ManagedType, surfaceCapabilities), das::makeFieldType<decltype(das::declval<ManagedType>().surfaceCapabilities)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_full_screen_exclusive)
struct VkSurfaceCapabilitiesFullScreenExclusiveEXTAnnotation : ManagedStructureAnnotation<VkSurfaceCapabilitiesFullScreenExclusiveEXT> {
  VkSurfaceCapabilitiesFullScreenExclusiveEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceCapabilitiesFullScreenExclusiveEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fullScreenExclusiveSupported", "fullScreenExclusiveSupported", offsetof(ManagedType, fullScreenExclusiveSupported), das::makeFieldType<decltype(das::declval<ManagedType>().fullScreenExclusiveSupported)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_NV_present_barrier)
struct VkSurfaceCapabilitiesPresentBarrierNVAnnotation : ManagedStructureAnnotation<VkSurfaceCapabilitiesPresentBarrierNV> {
  VkSurfaceCapabilitiesPresentBarrierNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceCapabilitiesPresentBarrierNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentBarrierSupported", "presentBarrierSupported", offsetof(ManagedType, presentBarrierSupported), das::makeFieldType<decltype(das::declval<ManagedType>().presentBarrierSupported)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_KHR_surface)
struct VkSurfaceFormatKHRAnnotation : ManagedStructureAnnotation<VkSurfaceFormatKHR> {
  VkSurfaceFormatKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceFormatKHR", lib) {
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("colorSpace", "colorSpace", offsetof(ManagedType, colorSpace), das::makeFieldType<decltype(das::declval<ManagedType>().colorSpace)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_get_surface_capabilities2)
struct VkSurfaceFormat2KHRAnnotation : ManagedStructureAnnotation<VkSurfaceFormat2KHR> {
  VkSurfaceFormat2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceFormat2KHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("surfaceFormat", "surfaceFormat", offsetof(ManagedType, surfaceFormat), das::makeFieldType<decltype(das::declval<ManagedType>().surfaceFormat)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_full_screen_exclusive)
struct VkSurfaceFullScreenExclusiveInfoEXTAnnotation : ManagedStructureAnnotation<VkSurfaceFullScreenExclusiveInfoEXT> {
  VkSurfaceFullScreenExclusiveInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceFullScreenExclusiveInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("fullScreenExclusive", "fullScreenExclusive", offsetof(ManagedType, fullScreenExclusive), das::makeFieldType<decltype(das::declval<ManagedType>().fullScreenExclusive)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_win32_surface)
struct VkSurfaceFullScreenExclusiveWin32InfoEXTAnnotation : ManagedStructureAnnotation<VkSurfaceFullScreenExclusiveWin32InfoEXT> {
  VkSurfaceFullScreenExclusiveWin32InfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceFullScreenExclusiveWin32InfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hmonitor", "hmonitor", offsetof(ManagedType, hmonitor), das::makeFieldType<decltype(das::declval<ManagedType>().hmonitor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_win32_surface) */
#if defined(VK_EXT_surface_maintenance1)
struct VkSurfacePresentModeCompatibilityEXTAnnotation : ManagedStructureAnnotation<VkSurfacePresentModeCompatibilityEXT> {
  VkSurfacePresentModeCompatibilityEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfacePresentModeCompatibilityEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentModeCount", "presentModeCount", offsetof(ManagedType, presentModeCount), das::makeFieldType<decltype(das::declval<ManagedType>().presentModeCount)>(*mlib));
    addFieldEx("pPresentModes", "pPresentModes", offsetof(ManagedType, pPresentModes), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentModes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSurfacePresentModeEXTAnnotation : ManagedStructureAnnotation<VkSurfacePresentModeEXT> {
  VkSurfacePresentModeEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfacePresentModeEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentMode", "presentMode", offsetof(ManagedType, presentMode), das::makeFieldType<decltype(das::declval<ManagedType>().presentMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSurfacePresentScalingCapabilitiesEXTAnnotation : ManagedStructureAnnotation<VkSurfacePresentScalingCapabilitiesEXT> {
  VkSurfacePresentScalingCapabilitiesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfacePresentScalingCapabilitiesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportedPresentScaling", "supportedPresentScaling", offsetof(ManagedType, supportedPresentScaling), das::makeFieldType<decltype(das::declval<ManagedType>().supportedPresentScaling)>(*mlib));
    addFieldEx("supportedPresentGravityX", "supportedPresentGravityX", offsetof(ManagedType, supportedPresentGravityX), das::makeFieldType<decltype(das::declval<ManagedType>().supportedPresentGravityX)>(*mlib));
    addFieldEx("supportedPresentGravityY", "supportedPresentGravityY", offsetof(ManagedType, supportedPresentGravityY), das::makeFieldType<decltype(das::declval<ManagedType>().supportedPresentGravityY)>(*mlib));
    addFieldEx("minScaledImageExtent", "minScaledImageExtent", offsetof(ManagedType, minScaledImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minScaledImageExtent)>(*mlib));
    addFieldEx("maxScaledImageExtent", "maxScaledImageExtent", offsetof(ManagedType, maxScaledImageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxScaledImageExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_surface_maintenance1) */
#if defined(VK_KHR_surface_protected_capabilities)
struct VkSurfaceProtectedCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkSurfaceProtectedCapabilitiesKHR> {
  VkSurfaceProtectedCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSurfaceProtectedCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportsProtected", "supportsProtected", offsetof(ManagedType, supportsProtected), das::makeFieldType<decltype(das::declval<ManagedType>().supportsProtected)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_surface_protected_capabilities) */
#if defined(VK_EXT_display_control)
struct VkSwapchainCounterCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkSwapchainCounterCreateInfoEXT> {
  VkSwapchainCounterCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainCounterCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("surfaceCounters", "surfaceCounters", offsetof(ManagedType, surfaceCounters), das::makeFieldType<decltype(das::declval<ManagedType>().surfaceCounters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_swapchain)
struct VkSwapchainCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkSwapchainCreateInfoKHR> {
  VkSwapchainCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("surface", "surface", offsetof(ManagedType, surface), das::makeFieldType<decltype(das::declval<ManagedType>().surface)>(*mlib));
    addFieldEx("minImageCount", "minImageCount", offsetof(ManagedType, minImageCount), das::makeFieldType<decltype(das::declval<ManagedType>().minImageCount)>(*mlib));
    addFieldEx("imageFormat", "imageFormat", offsetof(ManagedType, imageFormat), das::makeFieldType<decltype(das::declval<ManagedType>().imageFormat)>(*mlib));
    addFieldEx("imageColorSpace", "imageColorSpace", offsetof(ManagedType, imageColorSpace), das::makeFieldType<decltype(das::declval<ManagedType>().imageColorSpace)>(*mlib));
    addFieldEx("imageExtent", "imageExtent", offsetof(ManagedType, imageExtent), das::makeFieldType<decltype(das::declval<ManagedType>().imageExtent)>(*mlib));
    addFieldEx("imageArrayLayers", "imageArrayLayers", offsetof(ManagedType, imageArrayLayers), das::makeFieldType<decltype(das::declval<ManagedType>().imageArrayLayers)>(*mlib));
    addFieldEx("imageUsage", "imageUsage", offsetof(ManagedType, imageUsage), das::makeFieldType<decltype(das::declval<ManagedType>().imageUsage)>(*mlib));
    addFieldEx("imageSharingMode", "imageSharingMode", offsetof(ManagedType, imageSharingMode), das::makeFieldType<decltype(das::declval<ManagedType>().imageSharingMode)>(*mlib));
    addFieldEx("queueFamilyIndexCount", "queueFamilyIndexCount", offsetof(ManagedType, queueFamilyIndexCount), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndexCount)>(*mlib));
    addFieldEx("pQueueFamilyIndices", "pQueueFamilyIndices", offsetof(ManagedType, pQueueFamilyIndices), das::makeFieldType<decltype(das::declval<ManagedType>().pQueueFamilyIndices)>(*mlib));
    addFieldEx("preTransform", "preTransform", offsetof(ManagedType, preTransform), das::makeFieldType<decltype(das::declval<ManagedType>().preTransform)>(*mlib));
    addFieldEx("compositeAlpha", "compositeAlpha", offsetof(ManagedType, compositeAlpha), das::makeFieldType<decltype(das::declval<ManagedType>().compositeAlpha)>(*mlib));
    addFieldEx("presentMode", "presentMode", offsetof(ManagedType, presentMode), das::makeFieldType<decltype(das::declval<ManagedType>().presentMode)>(*mlib));
    addFieldEx("clipped", "clipped", offsetof(ManagedType, clipped), das::makeFieldType<decltype(das::declval<ManagedType>().clipped)>(*mlib));
    addFieldEx("oldSwapchain", "oldSwapchain", offsetof(ManagedType, oldSwapchain), das::makeFieldType<decltype(das::declval<ManagedType>().oldSwapchain)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_AMD_display_native_hdr)
struct VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation : ManagedStructureAnnotation<VkSwapchainDisplayNativeHdrCreateInfoAMD> {
  VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainDisplayNativeHdrCreateInfoAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("localDimmingEnable", "localDimmingEnable", offsetof(ManagedType, localDimmingEnable), das::makeFieldType<decltype(das::declval<ManagedType>().localDimmingEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_NV_low_latency2)
struct VkSwapchainLatencyCreateInfoNVAnnotation : ManagedStructureAnnotation<VkSwapchainLatencyCreateInfoNV> {
  VkSwapchainLatencyCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainLatencyCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("latencyModeEnable", "latencyModeEnable", offsetof(ManagedType, latencyModeEnable), das::makeFieldType<decltype(das::declval<ManagedType>().latencyModeEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_present_barrier)
struct VkSwapchainPresentBarrierCreateInfoNVAnnotation : ManagedStructureAnnotation<VkSwapchainPresentBarrierCreateInfoNV> {
  VkSwapchainPresentBarrierCreateInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainPresentBarrierCreateInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentBarrierEnable", "presentBarrierEnable", offsetof(ManagedType, presentBarrierEnable), das::makeFieldType<decltype(das::declval<ManagedType>().presentBarrierEnable)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_EXT_swapchain_maintenance1)
struct VkSwapchainPresentFenceInfoEXTAnnotation : ManagedStructureAnnotation<VkSwapchainPresentFenceInfoEXT> {
  VkSwapchainPresentFenceInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainPresentFenceInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pFences", "pFences", offsetof(ManagedType, pFences), das::makeFieldType<decltype(das::declval<ManagedType>().pFences)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSwapchainPresentModeInfoEXTAnnotation : ManagedStructureAnnotation<VkSwapchainPresentModeInfoEXT> {
  VkSwapchainPresentModeInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainPresentModeInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("swapchainCount", "swapchainCount", offsetof(ManagedType, swapchainCount), das::makeFieldType<decltype(das::declval<ManagedType>().swapchainCount)>(*mlib));
    addFieldEx("pPresentModes", "pPresentModes", offsetof(ManagedType, pPresentModes), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentModes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSwapchainPresentModesCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkSwapchainPresentModesCreateInfoEXT> {
  VkSwapchainPresentModesCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainPresentModesCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("presentModeCount", "presentModeCount", offsetof(ManagedType, presentModeCount), das::makeFieldType<decltype(das::declval<ManagedType>().presentModeCount)>(*mlib));
    addFieldEx("pPresentModes", "pPresentModes", offsetof(ManagedType, pPresentModes), das::makeFieldType<decltype(das::declval<ManagedType>().pPresentModes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkSwapchainPresentScalingCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkSwapchainPresentScalingCreateInfoEXT> {
  VkSwapchainPresentScalingCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkSwapchainPresentScalingCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("scalingBehavior", "scalingBehavior", offsetof(ManagedType, scalingBehavior), das::makeFieldType<decltype(das::declval<ManagedType>().scalingBehavior)>(*mlib));
    addFieldEx("presentGravityX", "presentGravityX", offsetof(ManagedType, presentGravityX), das::makeFieldType<decltype(das::declval<ManagedType>().presentGravityX)>(*mlib));
    addFieldEx("presentGravityY", "presentGravityY", offsetof(ManagedType, presentGravityY), das::makeFieldType<decltype(das::declval<ManagedType>().presentGravityY)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_AMD_texture_gather_bias_lod)
struct VkTextureLODGatherFormatPropertiesAMDAnnotation : ManagedStructureAnnotation<VkTextureLODGatherFormatPropertiesAMD> {
  VkTextureLODGatherFormatPropertiesAMDAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTextureLODGatherFormatPropertiesAMD", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("supportsTextureGatherLODBiasAMD", "supportsTextureGatherLODBiasAMD", offsetof(ManagedType, supportsTextureGatherLODBiasAMD), das::makeFieldType<decltype(das::declval<ManagedType>().supportsTextureGatherLODBiasAMD)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_AMD_texture_gather_bias_lod) */
#if defined(VK_QCOM_tile_properties)
struct VkTilePropertiesQCOMAnnotation : ManagedStructureAnnotation<VkTilePropertiesQCOM> {
  VkTilePropertiesQCOMAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTilePropertiesQCOM", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("tileSize", "tileSize", offsetof(ManagedType, tileSize), das::makeFieldType<decltype(das::declval<ManagedType>().tileSize)>(*mlib));
    addFieldEx("apronSize", "apronSize", offsetof(ManagedType, apronSize), das::makeFieldType<decltype(das::declval<ManagedType>().apronSize)>(*mlib));
    addFieldEx("origin", "origin", offsetof(ManagedType, origin), das::makeFieldType<decltype(das::declval<ManagedType>().origin)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_VERSION_1_2)
struct VkTimelineSemaphoreSubmitInfoAnnotation : ManagedStructureAnnotation<VkTimelineSemaphoreSubmitInfo> {
  VkTimelineSemaphoreSubmitInfoAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTimelineSemaphoreSubmitInfo", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("waitSemaphoreValueCount", "waitSemaphoreValueCount", offsetof(ManagedType, waitSemaphoreValueCount), das::makeFieldType<decltype(das::declval<ManagedType>().waitSemaphoreValueCount)>(*mlib));
    addFieldEx("pWaitSemaphoreValues", "pWaitSemaphoreValues", offsetof(ManagedType, pWaitSemaphoreValues), das::makeFieldType<decltype(das::declval<ManagedType>().pWaitSemaphoreValues)>(*mlib));
    addFieldEx("signalSemaphoreValueCount", "signalSemaphoreValueCount", offsetof(ManagedType, signalSemaphoreValueCount), das::makeFieldType<decltype(das::declval<ManagedType>().signalSemaphoreValueCount)>(*mlib));
    addFieldEx("pSignalSemaphoreValues", "pSignalSemaphoreValues", offsetof(ManagedType, pSignalSemaphoreValues), das::makeFieldType<decltype(das::declval<ManagedType>().pSignalSemaphoreValues)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
struct VkTraceRaysIndirectCommand2KHRAnnotation : ManagedStructureAnnotation<VkTraceRaysIndirectCommand2KHR> {
  VkTraceRaysIndirectCommand2KHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTraceRaysIndirectCommand2KHR", lib) {
    addFieldEx("raygenShaderRecordAddress", "raygenShaderRecordAddress", offsetof(ManagedType, raygenShaderRecordAddress), das::makeFieldType<decltype(das::declval<ManagedType>().raygenShaderRecordAddress)>(*mlib));
    addFieldEx("raygenShaderRecordSize", "raygenShaderRecordSize", offsetof(ManagedType, raygenShaderRecordSize), das::makeFieldType<decltype(das::declval<ManagedType>().raygenShaderRecordSize)>(*mlib));
    addFieldEx("missShaderBindingTableAddress", "missShaderBindingTableAddress", offsetof(ManagedType, missShaderBindingTableAddress), das::makeFieldType<decltype(das::declval<ManagedType>().missShaderBindingTableAddress)>(*mlib));
    addFieldEx("missShaderBindingTableSize", "missShaderBindingTableSize", offsetof(ManagedType, missShaderBindingTableSize), das::makeFieldType<decltype(das::declval<ManagedType>().missShaderBindingTableSize)>(*mlib));
    addFieldEx("missShaderBindingTableStride", "missShaderBindingTableStride", offsetof(ManagedType, missShaderBindingTableStride), das::makeFieldType<decltype(das::declval<ManagedType>().missShaderBindingTableStride)>(*mlib));
    addFieldEx("hitShaderBindingTableAddress", "hitShaderBindingTableAddress", offsetof(ManagedType, hitShaderBindingTableAddress), das::makeFieldType<decltype(das::declval<ManagedType>().hitShaderBindingTableAddress)>(*mlib));
    addFieldEx("hitShaderBindingTableSize", "hitShaderBindingTableSize", offsetof(ManagedType, hitShaderBindingTableSize), das::makeFieldType<decltype(das::declval<ManagedType>().hitShaderBindingTableSize)>(*mlib));
    addFieldEx("hitShaderBindingTableStride", "hitShaderBindingTableStride", offsetof(ManagedType, hitShaderBindingTableStride), das::makeFieldType<decltype(das::declval<ManagedType>().hitShaderBindingTableStride)>(*mlib));
    addFieldEx("callableShaderBindingTableAddress", "callableShaderBindingTableAddress", offsetof(ManagedType, callableShaderBindingTableAddress), das::makeFieldType<decltype(das::declval<ManagedType>().callableShaderBindingTableAddress)>(*mlib));
    addFieldEx("callableShaderBindingTableSize", "callableShaderBindingTableSize", offsetof(ManagedType, callableShaderBindingTableSize), das::makeFieldType<decltype(das::declval<ManagedType>().callableShaderBindingTableSize)>(*mlib));
    addFieldEx("callableShaderBindingTableStride", "callableShaderBindingTableStride", offsetof(ManagedType, callableShaderBindingTableStride), das::makeFieldType<decltype(das::declval<ManagedType>().callableShaderBindingTableStride)>(*mlib));
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("depth", "depth", offsetof(ManagedType, depth), das::makeFieldType<decltype(das::declval<ManagedType>().depth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
struct VkTraceRaysIndirectCommandKHRAnnotation : ManagedStructureAnnotation<VkTraceRaysIndirectCommandKHR> {
  VkTraceRaysIndirectCommandKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTraceRaysIndirectCommandKHR", lib) {
    addFieldEx("width", "width", offsetof(ManagedType, width), das::makeFieldType<decltype(das::declval<ManagedType>().width)>(*mlib));
    addFieldEx("height", "height", offsetof(ManagedType, height), das::makeFieldType<decltype(das::declval<ManagedType>().height)>(*mlib));
    addFieldEx("depth", "depth", offsetof(ManagedType, depth), das::makeFieldType<decltype(das::declval<ManagedType>().depth)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_acceleration_structure)
struct VkTransformMatrixKHRAnnotation : ManagedStructureAnnotation<VkTransformMatrixKHR> {
  VkTransformMatrixKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkTransformMatrixKHR", lib) {
    addFieldEx("matrix", "matrix", offsetof(ManagedType, matrix), das::makeFieldType<decltype(das::declval<ManagedType>().matrix)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_validation_cache)
struct VkValidationCacheCreateInfoEXTAnnotation : ManagedStructureAnnotation<VkValidationCacheCreateInfoEXT> {
  VkValidationCacheCreateInfoEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkValidationCacheCreateInfoEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("initialDataSize", "initialDataSize", offsetof(ManagedType, initialDataSize), das::makeFieldType<decltype(das::declval<ManagedType>().initialDataSize)>(*mlib));
    addFieldEx("pInitialData", "pInitialData", offsetof(ManagedType, pInitialData), das::makeFieldType<decltype(das::declval<ManagedType>().pInitialData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_EXT_validation_features)
struct VkValidationFeaturesEXTAnnotation : ManagedStructureAnnotation<VkValidationFeaturesEXT> {
  VkValidationFeaturesEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkValidationFeaturesEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("enabledValidationFeatureCount", "enabledValidationFeatureCount", offsetof(ManagedType, enabledValidationFeatureCount), das::makeFieldType<decltype(das::declval<ManagedType>().enabledValidationFeatureCount)>(*mlib));
    addFieldEx("pEnabledValidationFeatures", "pEnabledValidationFeatures", offsetof(ManagedType, pEnabledValidationFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().pEnabledValidationFeatures)>(*mlib));
    addFieldEx("disabledValidationFeatureCount", "disabledValidationFeatureCount", offsetof(ManagedType, disabledValidationFeatureCount), das::makeFieldType<decltype(das::declval<ManagedType>().disabledValidationFeatureCount)>(*mlib));
    addFieldEx("pDisabledValidationFeatures", "pDisabledValidationFeatures", offsetof(ManagedType, pDisabledValidationFeatures), das::makeFieldType<decltype(das::declval<ManagedType>().pDisabledValidationFeatures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_validation_features) */
#if defined(VK_EXT_validation_flags)
struct VkValidationFlagsEXTAnnotation : ManagedStructureAnnotation<VkValidationFlagsEXT> {
  VkValidationFlagsEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkValidationFlagsEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("disabledValidationCheckCount", "disabledValidationCheckCount", offsetof(ManagedType, disabledValidationCheckCount), das::makeFieldType<decltype(das::declval<ManagedType>().disabledValidationCheckCount)>(*mlib));
    addFieldEx("pDisabledValidationChecks", "pDisabledValidationChecks", offsetof(ManagedType, pDisabledValidationChecks), das::makeFieldType<decltype(das::declval<ManagedType>().pDisabledValidationChecks)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_validation_flags) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
struct VkVertexInputAttributeDescription2EXTAnnotation : ManagedStructureAnnotation<VkVertexInputAttributeDescription2EXT> {
  VkVertexInputAttributeDescription2EXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVertexInputAttributeDescription2EXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("location", "location", offsetof(ManagedType, location), das::makeFieldType<decltype(das::declval<ManagedType>().location)>(*mlib));
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("offset", "offset", offsetof(ManagedType, offset), das::makeFieldType<decltype(das::declval<ManagedType>().offset)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVertexInputBindingDescription2EXTAnnotation : ManagedStructureAnnotation<VkVertexInputBindingDescription2EXT> {
  VkVertexInputBindingDescription2EXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVertexInputBindingDescription2EXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("binding", "binding", offsetof(ManagedType, binding), das::makeFieldType<decltype(das::declval<ManagedType>().binding)>(*mlib));
    addFieldEx("stride", "stride", offsetof(ManagedType, stride), das::makeFieldType<decltype(das::declval<ManagedType>().stride)>(*mlib));
    addFieldEx("inputRate", "inputRate", offsetof(ManagedType, inputRate), das::makeFieldType<decltype(das::declval<ManagedType>().inputRate)>(*mlib));
    addFieldEx("divisor", "divisor", offsetof(ManagedType, divisor), das::makeFieldType<decltype(das::declval<ManagedType>().divisor)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if defined(VK_NN_vi_surface)
struct VkViSurfaceCreateInfoNNAnnotation : ManagedStructureAnnotation<VkViSurfaceCreateInfoNN> {
  VkViSurfaceCreateInfoNNAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkViSurfaceCreateInfoNN", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("window", "window", offsetof(ManagedType, window), das::makeFieldType<decltype(das::declval<ManagedType>().window)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_KHR_video_queue)
struct VkVideoPictureResourceInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoPictureResourceInfoKHR> {
  VkVideoPictureResourceInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoPictureResourceInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("codedOffset", "codedOffset", offsetof(ManagedType, codedOffset), das::makeFieldType<decltype(das::declval<ManagedType>().codedOffset)>(*mlib));
    addFieldEx("codedExtent", "codedExtent", offsetof(ManagedType, codedExtent), das::makeFieldType<decltype(das::declval<ManagedType>().codedExtent)>(*mlib));
    addFieldEx("baseArrayLayer", "baseArrayLayer", offsetof(ManagedType, baseArrayLayer), das::makeFieldType<decltype(das::declval<ManagedType>().baseArrayLayer)>(*mlib));
    addFieldEx("imageViewBinding", "imageViewBinding", offsetof(ManagedType, imageViewBinding), das::makeFieldType<decltype(das::declval<ManagedType>().imageViewBinding)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoReferenceSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoReferenceSlotInfoKHR> {
  VkVideoReferenceSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoReferenceSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("slotIndex", "slotIndex", offsetof(ManagedType, slotIndex), das::makeFieldType<decltype(das::declval<ManagedType>().slotIndex)>(*mlib));
    addFieldEx("pPictureResource", "pPictureResource", offsetof(ManagedType, pPictureResource), das::makeFieldType<decltype(das::declval<ManagedType>().pPictureResource)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoBeginCodingInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoBeginCodingInfoKHR> {
  VkVideoBeginCodingInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoBeginCodingInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("videoSession", "videoSession", offsetof(ManagedType, videoSession), das::makeFieldType<decltype(das::declval<ManagedType>().videoSession)>(*mlib));
    addFieldEx("videoSessionParameters", "videoSessionParameters", offsetof(ManagedType, videoSessionParameters), das::makeFieldType<decltype(das::declval<ManagedType>().videoSessionParameters)>(*mlib));
    addFieldEx("referenceSlotCount", "referenceSlotCount", offsetof(ManagedType, referenceSlotCount), das::makeFieldType<decltype(das::declval<ManagedType>().referenceSlotCount)>(*mlib));
    addFieldEx("pReferenceSlots", "pReferenceSlots", offsetof(ManagedType, pReferenceSlots), das::makeFieldType<decltype(das::declval<ManagedType>().pReferenceSlots)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoCapabilitiesKHR> {
  VkVideoCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("minBitstreamBufferOffsetAlignment", "minBitstreamBufferOffsetAlignment", offsetof(ManagedType, minBitstreamBufferOffsetAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minBitstreamBufferOffsetAlignment)>(*mlib));
    addFieldEx("minBitstreamBufferSizeAlignment", "minBitstreamBufferSizeAlignment", offsetof(ManagedType, minBitstreamBufferSizeAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().minBitstreamBufferSizeAlignment)>(*mlib));
    addFieldEx("pictureAccessGranularity", "pictureAccessGranularity", offsetof(ManagedType, pictureAccessGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().pictureAccessGranularity)>(*mlib));
    addFieldEx("minCodedExtent", "minCodedExtent", offsetof(ManagedType, minCodedExtent), das::makeFieldType<decltype(das::declval<ManagedType>().minCodedExtent)>(*mlib));
    addFieldEx("maxCodedExtent", "maxCodedExtent", offsetof(ManagedType, maxCodedExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxCodedExtent)>(*mlib));
    addFieldEx("maxDpbSlots", "maxDpbSlots", offsetof(ManagedType, maxDpbSlots), das::makeFieldType<decltype(das::declval<ManagedType>().maxDpbSlots)>(*mlib));
    addFieldEx("maxActiveReferencePictures", "maxActiveReferencePictures", offsetof(ManagedType, maxActiveReferencePictures), das::makeFieldType<decltype(das::declval<ManagedType>().maxActiveReferencePictures)>(*mlib));
    addFieldEx("stdHeaderVersion", "stdHeaderVersion", offsetof(ManagedType, stdHeaderVersion), das::makeFieldType<decltype(das::declval<ManagedType>().stdHeaderVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoCodingControlInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoCodingControlInfoKHR> {
  VkVideoCodingControlInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoCodingControlInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_decode_av1)
struct VkVideoDecodeAV1CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeAV1CapabilitiesKHR> {
  VkVideoDecodeAV1CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeAV1CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxLevel", "maxLevel", offsetof(ManagedType, maxLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeAV1DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeAV1DpbSlotInfoKHR> {
  VkVideoDecodeAV1DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeAV1DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeAV1PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeAV1PictureInfoKHR> {
  VkVideoDecodeAV1PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeAV1PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
    addFieldEx("referenceNameSlotIndices", "referenceNameSlotIndices", offsetof(ManagedType, referenceNameSlotIndices), das::makeFieldType<decltype(das::declval<ManagedType>().referenceNameSlotIndices)>(*mlib));
    addFieldEx("frameHeaderOffset", "frameHeaderOffset", offsetof(ManagedType, frameHeaderOffset), das::makeFieldType<decltype(das::declval<ManagedType>().frameHeaderOffset)>(*mlib));
    addFieldEx("tileCount", "tileCount", offsetof(ManagedType, tileCount), das::makeFieldType<decltype(das::declval<ManagedType>().tileCount)>(*mlib));
    addFieldEx("pTileOffsets", "pTileOffsets", offsetof(ManagedType, pTileOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pTileOffsets)>(*mlib));
    addFieldEx("pTileSizes", "pTileSizes", offsetof(ManagedType, pTileSizes), das::makeFieldType<decltype(das::declval<ManagedType>().pTileSizes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeAV1ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeAV1ProfileInfoKHR> {
  VkVideoDecodeAV1ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeAV1ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfile", "stdProfile", offsetof(ManagedType, stdProfile), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfile)>(*mlib));
    addFieldEx("filmGrainSupport", "filmGrainSupport", offsetof(ManagedType, filmGrainSupport), das::makeFieldType<decltype(das::declval<ManagedType>().filmGrainSupport)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeAV1SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeAV1SessionParametersCreateInfoKHR> {
  VkVideoDecodeAV1SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeAV1SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdSequenceHeader", "pStdSequenceHeader", offsetof(ManagedType, pStdSequenceHeader), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSequenceHeader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_decode_av1) */
#if defined(VK_KHR_video_decode_queue)
struct VkVideoDecodeCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeCapabilitiesKHR> {
  VkVideoDecodeCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_decode_h264)
struct VkVideoDecodeH264CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264CapabilitiesKHR> {
  VkVideoDecodeH264CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
    addFieldEx("fieldOffsetGranularity", "fieldOffsetGranularity", offsetof(ManagedType, fieldOffsetGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().fieldOffsetGranularity)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH264DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264DpbSlotInfoKHR> {
  VkVideoDecodeH264DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH264PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264PictureInfoKHR> {
  VkVideoDecodeH264PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
    addFieldEx("sliceCount", "sliceCount", offsetof(ManagedType, sliceCount), das::makeFieldType<decltype(das::declval<ManagedType>().sliceCount)>(*mlib));
    addFieldEx("pSliceOffsets", "pSliceOffsets", offsetof(ManagedType, pSliceOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pSliceOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH264ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264ProfileInfoKHR> {
  VkVideoDecodeH264ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfileIdc", "stdProfileIdc", offsetof(ManagedType, stdProfileIdc), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfileIdc)>(*mlib));
    addFieldEx("pictureLayout", "pictureLayout", offsetof(ManagedType, pictureLayout), das::makeFieldType<decltype(das::declval<ManagedType>().pictureLayout)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH264SessionParametersAddInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264SessionParametersAddInfoKHR> {
  VkVideoDecodeH264SessionParametersAddInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264SessionParametersAddInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdSPSCount", "stdSPSCount", offsetof(ManagedType, stdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSCount)>(*mlib));
    addFieldEx("pStdSPSs", "pStdSPSs", offsetof(ManagedType, pStdSPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSPSs)>(*mlib));
    addFieldEx("stdPPSCount", "stdPPSCount", offsetof(ManagedType, stdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSCount)>(*mlib));
    addFieldEx("pStdPPSs", "pStdPPSs", offsetof(ManagedType, pStdPPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPPSs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH264SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH264SessionParametersCreateInfoKHR> {
  VkVideoDecodeH264SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH264SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxStdSPSCount", "maxStdSPSCount", offsetof(ManagedType, maxStdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdSPSCount)>(*mlib));
    addFieldEx("maxStdPPSCount", "maxStdPPSCount", offsetof(ManagedType, maxStdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdPPSCount)>(*mlib));
    addFieldEx("pParametersAddInfo", "pParametersAddInfo", offsetof(ManagedType, pParametersAddInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pParametersAddInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_decode_h264) */
#if defined(VK_KHR_video_decode_h265)
struct VkVideoDecodeH265CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265CapabilitiesKHR> {
  VkVideoDecodeH265CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH265DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265DpbSlotInfoKHR> {
  VkVideoDecodeH265DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH265PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265PictureInfoKHR> {
  VkVideoDecodeH265PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
    addFieldEx("sliceSegmentCount", "sliceSegmentCount", offsetof(ManagedType, sliceSegmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().sliceSegmentCount)>(*mlib));
    addFieldEx("pSliceSegmentOffsets", "pSliceSegmentOffsets", offsetof(ManagedType, pSliceSegmentOffsets), das::makeFieldType<decltype(das::declval<ManagedType>().pSliceSegmentOffsets)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH265ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265ProfileInfoKHR> {
  VkVideoDecodeH265ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfileIdc", "stdProfileIdc", offsetof(ManagedType, stdProfileIdc), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfileIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH265SessionParametersAddInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265SessionParametersAddInfoKHR> {
  VkVideoDecodeH265SessionParametersAddInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265SessionParametersAddInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdVPSCount", "stdVPSCount", offsetof(ManagedType, stdVPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdVPSCount)>(*mlib));
    addFieldEx("pStdVPSs", "pStdVPSs", offsetof(ManagedType, pStdVPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdVPSs)>(*mlib));
    addFieldEx("stdSPSCount", "stdSPSCount", offsetof(ManagedType, stdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSCount)>(*mlib));
    addFieldEx("pStdSPSs", "pStdSPSs", offsetof(ManagedType, pStdSPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSPSs)>(*mlib));
    addFieldEx("stdPPSCount", "stdPPSCount", offsetof(ManagedType, stdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSCount)>(*mlib));
    addFieldEx("pStdPPSs", "pStdPPSs", offsetof(ManagedType, pStdPPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPPSs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeH265SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeH265SessionParametersCreateInfoKHR> {
  VkVideoDecodeH265SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeH265SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxStdVPSCount", "maxStdVPSCount", offsetof(ManagedType, maxStdVPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdVPSCount)>(*mlib));
    addFieldEx("maxStdSPSCount", "maxStdSPSCount", offsetof(ManagedType, maxStdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdSPSCount)>(*mlib));
    addFieldEx("maxStdPPSCount", "maxStdPPSCount", offsetof(ManagedType, maxStdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdPPSCount)>(*mlib));
    addFieldEx("pParametersAddInfo", "pParametersAddInfo", offsetof(ManagedType, pParametersAddInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pParametersAddInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_decode_h265) */
#if defined(VK_KHR_video_decode_queue)
struct VkVideoDecodeInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeInfoKHR> {
  VkVideoDecodeInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("srcBuffer", "srcBuffer", offsetof(ManagedType, srcBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().srcBuffer)>(*mlib));
    addFieldEx("srcBufferOffset", "srcBufferOffset", offsetof(ManagedType, srcBufferOffset), das::makeFieldType<decltype(das::declval<ManagedType>().srcBufferOffset)>(*mlib));
    addFieldEx("srcBufferRange", "srcBufferRange", offsetof(ManagedType, srcBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().srcBufferRange)>(*mlib));
    addFieldEx("dstPictureResource", "dstPictureResource", offsetof(ManagedType, dstPictureResource), das::makeFieldType<decltype(das::declval<ManagedType>().dstPictureResource)>(*mlib));
    addFieldEx("pSetupReferenceSlot", "pSetupReferenceSlot", offsetof(ManagedType, pSetupReferenceSlot), das::makeFieldType<decltype(das::declval<ManagedType>().pSetupReferenceSlot)>(*mlib));
    addFieldEx("referenceSlotCount", "referenceSlotCount", offsetof(ManagedType, referenceSlotCount), das::makeFieldType<decltype(das::declval<ManagedType>().referenceSlotCount)>(*mlib));
    addFieldEx("pReferenceSlots", "pReferenceSlots", offsetof(ManagedType, pReferenceSlots), das::makeFieldType<decltype(das::declval<ManagedType>().pReferenceSlots)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoDecodeUsageInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoDecodeUsageInfoKHR> {
  VkVideoDecodeUsageInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoDecodeUsageInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoUsageHints", "videoUsageHints", offsetof(ManagedType, videoUsageHints), das::makeFieldType<decltype(das::declval<ManagedType>().videoUsageHints)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_av1)
struct VkVideoEncodeAV1CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1CapabilitiesKHR> {
  VkVideoEncodeAV1CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("maxLevel", "maxLevel", offsetof(ManagedType, maxLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevel)>(*mlib));
    addFieldEx("codedPictureAlignment", "codedPictureAlignment", offsetof(ManagedType, codedPictureAlignment), das::makeFieldType<decltype(das::declval<ManagedType>().codedPictureAlignment)>(*mlib));
    addFieldEx("maxTiles", "maxTiles", offsetof(ManagedType, maxTiles), das::makeFieldType<decltype(das::declval<ManagedType>().maxTiles)>(*mlib));
    addFieldEx("minTileSize", "minTileSize", offsetof(ManagedType, minTileSize), das::makeFieldType<decltype(das::declval<ManagedType>().minTileSize)>(*mlib));
    addFieldEx("maxTileSize", "maxTileSize", offsetof(ManagedType, maxTileSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxTileSize)>(*mlib));
    addFieldEx("superblockSizes", "superblockSizes", offsetof(ManagedType, superblockSizes), das::makeFieldType<decltype(das::declval<ManagedType>().superblockSizes)>(*mlib));
    addFieldEx("maxSingleReferenceCount", "maxSingleReferenceCount", offsetof(ManagedType, maxSingleReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSingleReferenceCount)>(*mlib));
    addFieldEx("singleReferenceNameMask", "singleReferenceNameMask", offsetof(ManagedType, singleReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().singleReferenceNameMask)>(*mlib));
    addFieldEx("maxUnidirectionalCompoundReferenceCount", "maxUnidirectionalCompoundReferenceCount", offsetof(ManagedType, maxUnidirectionalCompoundReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxUnidirectionalCompoundReferenceCount)>(*mlib));
    addFieldEx("maxUnidirectionalCompoundGroup1ReferenceCount", "maxUnidirectionalCompoundGroup1ReferenceCount", offsetof(ManagedType, maxUnidirectionalCompoundGroup1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxUnidirectionalCompoundGroup1ReferenceCount)>(*mlib));
    addFieldEx("unidirectionalCompoundReferenceNameMask", "unidirectionalCompoundReferenceNameMask", offsetof(ManagedType, unidirectionalCompoundReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().unidirectionalCompoundReferenceNameMask)>(*mlib));
    addFieldEx("maxBidirectionalCompoundReferenceCount", "maxBidirectionalCompoundReferenceCount", offsetof(ManagedType, maxBidirectionalCompoundReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBidirectionalCompoundReferenceCount)>(*mlib));
    addFieldEx("maxBidirectionalCompoundGroup1ReferenceCount", "maxBidirectionalCompoundGroup1ReferenceCount", offsetof(ManagedType, maxBidirectionalCompoundGroup1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBidirectionalCompoundGroup1ReferenceCount)>(*mlib));
    addFieldEx("maxBidirectionalCompoundGroup2ReferenceCount", "maxBidirectionalCompoundGroup2ReferenceCount", offsetof(ManagedType, maxBidirectionalCompoundGroup2ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBidirectionalCompoundGroup2ReferenceCount)>(*mlib));
    addFieldEx("bidirectionalCompoundReferenceNameMask", "bidirectionalCompoundReferenceNameMask", offsetof(ManagedType, bidirectionalCompoundReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().bidirectionalCompoundReferenceNameMask)>(*mlib));
    addFieldEx("maxTemporalLayerCount", "maxTemporalLayerCount", offsetof(ManagedType, maxTemporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTemporalLayerCount)>(*mlib));
    addFieldEx("maxSpatialLayerCount", "maxSpatialLayerCount", offsetof(ManagedType, maxSpatialLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSpatialLayerCount)>(*mlib));
    addFieldEx("maxOperatingPoints", "maxOperatingPoints", offsetof(ManagedType, maxOperatingPoints), das::makeFieldType<decltype(das::declval<ManagedType>().maxOperatingPoints)>(*mlib));
    addFieldEx("minQIndex", "minQIndex", offsetof(ManagedType, minQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().minQIndex)>(*mlib));
    addFieldEx("maxQIndex", "maxQIndex", offsetof(ManagedType, maxQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().maxQIndex)>(*mlib));
    addFieldEx("prefersGopRemainingFrames", "prefersGopRemainingFrames", offsetof(ManagedType, prefersGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().prefersGopRemainingFrames)>(*mlib));
    addFieldEx("requiresGopRemainingFrames", "requiresGopRemainingFrames", offsetof(ManagedType, requiresGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().requiresGopRemainingFrames)>(*mlib));
    addFieldEx("stdSyntaxFlags", "stdSyntaxFlags", offsetof(ManagedType, stdSyntaxFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stdSyntaxFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1DpbSlotInfoKHR> {
  VkVideoEncodeAV1DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1FrameSizeKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1FrameSizeKHR> {
  VkVideoEncodeAV1FrameSizeKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1FrameSizeKHR", lib) {
    addFieldEx("intraFrameSize", "intraFrameSize", offsetof(ManagedType, intraFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().intraFrameSize)>(*mlib));
    addFieldEx("predictiveFrameSize", "predictiveFrameSize", offsetof(ManagedType, predictiveFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().predictiveFrameSize)>(*mlib));
    addFieldEx("bipredictiveFrameSize", "bipredictiveFrameSize", offsetof(ManagedType, bipredictiveFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().bipredictiveFrameSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1GopRemainingFrameInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1GopRemainingFrameInfoKHR> {
  VkVideoEncodeAV1GopRemainingFrameInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1GopRemainingFrameInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useGopRemainingFrames", "useGopRemainingFrames", offsetof(ManagedType, useGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().useGopRemainingFrames)>(*mlib));
    addFieldEx("gopRemainingIntra", "gopRemainingIntra", offsetof(ManagedType, gopRemainingIntra), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingIntra)>(*mlib));
    addFieldEx("gopRemainingPredictive", "gopRemainingPredictive", offsetof(ManagedType, gopRemainingPredictive), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingPredictive)>(*mlib));
    addFieldEx("gopRemainingBipredictive", "gopRemainingBipredictive", offsetof(ManagedType, gopRemainingBipredictive), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingBipredictive)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1PictureInfoKHR> {
  VkVideoEncodeAV1PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("predictionMode", "predictionMode", offsetof(ManagedType, predictionMode), das::makeFieldType<decltype(das::declval<ManagedType>().predictionMode)>(*mlib));
    addFieldEx("rateControlGroup", "rateControlGroup", offsetof(ManagedType, rateControlGroup), das::makeFieldType<decltype(das::declval<ManagedType>().rateControlGroup)>(*mlib));
    addFieldEx("constantQIndex", "constantQIndex", offsetof(ManagedType, constantQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().constantQIndex)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
    addFieldEx("referenceNameSlotIndices", "referenceNameSlotIndices", offsetof(ManagedType, referenceNameSlotIndices), das::makeFieldType<decltype(das::declval<ManagedType>().referenceNameSlotIndices)>(*mlib));
    addFieldEx("primaryReferenceCdfOnly", "primaryReferenceCdfOnly", offsetof(ManagedType, primaryReferenceCdfOnly), das::makeFieldType<decltype(das::declval<ManagedType>().primaryReferenceCdfOnly)>(*mlib));
    addFieldEx("generateObuExtensionHeader", "generateObuExtensionHeader", offsetof(ManagedType, generateObuExtensionHeader), das::makeFieldType<decltype(das::declval<ManagedType>().generateObuExtensionHeader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1ProfileInfoKHR> {
  VkVideoEncodeAV1ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfile", "stdProfile", offsetof(ManagedType, stdProfile), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfile)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1QIndexKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1QIndexKHR> {
  VkVideoEncodeAV1QIndexKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1QIndexKHR", lib) {
    addFieldEx("intraQIndex", "intraQIndex", offsetof(ManagedType, intraQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().intraQIndex)>(*mlib));
    addFieldEx("predictiveQIndex", "predictiveQIndex", offsetof(ManagedType, predictiveQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().predictiveQIndex)>(*mlib));
    addFieldEx("bipredictiveQIndex", "bipredictiveQIndex", offsetof(ManagedType, bipredictiveQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().bipredictiveQIndex)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1QualityLevelPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1QualityLevelPropertiesKHR> {
  VkVideoEncodeAV1QualityLevelPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1QualityLevelPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("preferredRateControlFlags", "preferredRateControlFlags", offsetof(ManagedType, preferredRateControlFlags), das::makeFieldType<decltype(das::declval<ManagedType>().preferredRateControlFlags)>(*mlib));
    addFieldEx("preferredGopFrameCount", "preferredGopFrameCount", offsetof(ManagedType, preferredGopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredGopFrameCount)>(*mlib));
    addFieldEx("preferredKeyFramePeriod", "preferredKeyFramePeriod", offsetof(ManagedType, preferredKeyFramePeriod), das::makeFieldType<decltype(das::declval<ManagedType>().preferredKeyFramePeriod)>(*mlib));
    addFieldEx("preferredConsecutiveBipredictiveFrameCount", "preferredConsecutiveBipredictiveFrameCount", offsetof(ManagedType, preferredConsecutiveBipredictiveFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConsecutiveBipredictiveFrameCount)>(*mlib));
    addFieldEx("preferredTemporalLayerCount", "preferredTemporalLayerCount", offsetof(ManagedType, preferredTemporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredTemporalLayerCount)>(*mlib));
    addFieldEx("preferredConstantQIndex", "preferredConstantQIndex", offsetof(ManagedType, preferredConstantQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConstantQIndex)>(*mlib));
    addFieldEx("preferredMaxSingleReferenceCount", "preferredMaxSingleReferenceCount", offsetof(ManagedType, preferredMaxSingleReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxSingleReferenceCount)>(*mlib));
    addFieldEx("preferredSingleReferenceNameMask", "preferredSingleReferenceNameMask", offsetof(ManagedType, preferredSingleReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().preferredSingleReferenceNameMask)>(*mlib));
    addFieldEx("preferredMaxUnidirectionalCompoundReferenceCount", "preferredMaxUnidirectionalCompoundReferenceCount", offsetof(ManagedType, preferredMaxUnidirectionalCompoundReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxUnidirectionalCompoundReferenceCount)>(*mlib));
    addFieldEx("preferredMaxUnidirectionalCompoundGroup1ReferenceCount", "preferredMaxUnidirectionalCompoundGroup1ReferenceCount", offsetof(ManagedType, preferredMaxUnidirectionalCompoundGroup1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxUnidirectionalCompoundGroup1ReferenceCount)>(*mlib));
    addFieldEx("preferredUnidirectionalCompoundReferenceNameMask", "preferredUnidirectionalCompoundReferenceNameMask", offsetof(ManagedType, preferredUnidirectionalCompoundReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().preferredUnidirectionalCompoundReferenceNameMask)>(*mlib));
    addFieldEx("preferredMaxBidirectionalCompoundReferenceCount", "preferredMaxBidirectionalCompoundReferenceCount", offsetof(ManagedType, preferredMaxBidirectionalCompoundReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxBidirectionalCompoundReferenceCount)>(*mlib));
    addFieldEx("preferredMaxBidirectionalCompoundGroup1ReferenceCount", "preferredMaxBidirectionalCompoundGroup1ReferenceCount", offsetof(ManagedType, preferredMaxBidirectionalCompoundGroup1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxBidirectionalCompoundGroup1ReferenceCount)>(*mlib));
    addFieldEx("preferredMaxBidirectionalCompoundGroup2ReferenceCount", "preferredMaxBidirectionalCompoundGroup2ReferenceCount", offsetof(ManagedType, preferredMaxBidirectionalCompoundGroup2ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxBidirectionalCompoundGroup2ReferenceCount)>(*mlib));
    addFieldEx("preferredBidirectionalCompoundReferenceNameMask", "preferredBidirectionalCompoundReferenceNameMask", offsetof(ManagedType, preferredBidirectionalCompoundReferenceNameMask), das::makeFieldType<decltype(das::declval<ManagedType>().preferredBidirectionalCompoundReferenceNameMask)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1)
struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1QuantizationMapCapabilitiesKHR> {
  VkVideoEncodeAV1QuantizationMapCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1QuantizationMapCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minQIndexDelta", "minQIndexDelta", offsetof(ManagedType, minQIndexDelta), das::makeFieldType<decltype(das::declval<ManagedType>().minQIndexDelta)>(*mlib));
    addFieldEx("maxQIndexDelta", "maxQIndexDelta", offsetof(ManagedType, maxQIndexDelta), das::makeFieldType<decltype(das::declval<ManagedType>().maxQIndexDelta)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_av1)
struct VkVideoEncodeAV1RateControlInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1RateControlInfoKHR> {
  VkVideoEncodeAV1RateControlInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1RateControlInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("gopFrameCount", "gopFrameCount", offsetof(ManagedType, gopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().gopFrameCount)>(*mlib));
    addFieldEx("keyFramePeriod", "keyFramePeriod", offsetof(ManagedType, keyFramePeriod), das::makeFieldType<decltype(das::declval<ManagedType>().keyFramePeriod)>(*mlib));
    addFieldEx("consecutiveBipredictiveFrameCount", "consecutiveBipredictiveFrameCount", offsetof(ManagedType, consecutiveBipredictiveFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().consecutiveBipredictiveFrameCount)>(*mlib));
    addFieldEx("temporalLayerCount", "temporalLayerCount", offsetof(ManagedType, temporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().temporalLayerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1RateControlLayerInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1RateControlLayerInfoKHR> {
  VkVideoEncodeAV1RateControlLayerInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1RateControlLayerInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMinQIndex", "useMinQIndex", offsetof(ManagedType, useMinQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().useMinQIndex)>(*mlib));
    addFieldEx("minQIndex", "minQIndex", offsetof(ManagedType, minQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().minQIndex)>(*mlib));
    addFieldEx("useMaxQIndex", "useMaxQIndex", offsetof(ManagedType, useMaxQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxQIndex)>(*mlib));
    addFieldEx("maxQIndex", "maxQIndex", offsetof(ManagedType, maxQIndex), das::makeFieldType<decltype(das::declval<ManagedType>().maxQIndex)>(*mlib));
    addFieldEx("useMaxFrameSize", "useMaxFrameSize", offsetof(ManagedType, useMaxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxFrameSize)>(*mlib));
    addFieldEx("maxFrameSize", "maxFrameSize", offsetof(ManagedType, maxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFrameSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1SessionCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1SessionCreateInfoKHR> {
  VkVideoEncodeAV1SessionCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1SessionCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMaxLevel", "useMaxLevel", offsetof(ManagedType, useMaxLevel), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxLevel)>(*mlib));
    addFieldEx("maxLevel", "maxLevel", offsetof(ManagedType, maxLevel), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeAV1SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeAV1SessionParametersCreateInfoKHR> {
  VkVideoEncodeAV1SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeAV1SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdSequenceHeader", "pStdSequenceHeader", offsetof(ManagedType, pStdSequenceHeader), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSequenceHeader)>(*mlib));
    addFieldEx("pStdDecoderModelInfo", "pStdDecoderModelInfo", offsetof(ManagedType, pStdDecoderModelInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdDecoderModelInfo)>(*mlib));
    addFieldEx("stdOperatingPointCount", "stdOperatingPointCount", offsetof(ManagedType, stdOperatingPointCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdOperatingPointCount)>(*mlib));
    addFieldEx("pStdOperatingPoints", "pStdOperatingPoints", offsetof(ManagedType, pStdOperatingPoints), das::makeFieldType<decltype(das::declval<ManagedType>().pStdOperatingPoints)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_queue)
struct VkVideoEncodeCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeCapabilitiesKHR> {
  VkVideoEncodeCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("rateControlModes", "rateControlModes", offsetof(ManagedType, rateControlModes), das::makeFieldType<decltype(das::declval<ManagedType>().rateControlModes)>(*mlib));
    addFieldEx("maxRateControlLayers", "maxRateControlLayers", offsetof(ManagedType, maxRateControlLayers), das::makeFieldType<decltype(das::declval<ManagedType>().maxRateControlLayers)>(*mlib));
    addFieldEx("maxBitrate", "maxBitrate", offsetof(ManagedType, maxBitrate), das::makeFieldType<decltype(das::declval<ManagedType>().maxBitrate)>(*mlib));
    addFieldEx("maxQualityLevels", "maxQualityLevels", offsetof(ManagedType, maxQualityLevels), das::makeFieldType<decltype(das::declval<ManagedType>().maxQualityLevels)>(*mlib));
    addFieldEx("encodeInputPictureGranularity", "encodeInputPictureGranularity", offsetof(ManagedType, encodeInputPictureGranularity), das::makeFieldType<decltype(das::declval<ManagedType>().encodeInputPictureGranularity)>(*mlib));
    addFieldEx("supportedEncodeFeedbackFlags", "supportedEncodeFeedbackFlags", offsetof(ManagedType, supportedEncodeFeedbackFlags), das::makeFieldType<decltype(das::declval<ManagedType>().supportedEncodeFeedbackFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_h264)
struct VkVideoEncodeH264CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264CapabilitiesKHR> {
  VkVideoEncodeH264CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
    addFieldEx("maxSliceCount", "maxSliceCount", offsetof(ManagedType, maxSliceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSliceCount)>(*mlib));
    addFieldEx("maxPPictureL0ReferenceCount", "maxPPictureL0ReferenceCount", offsetof(ManagedType, maxPPictureL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxPPictureL0ReferenceCount)>(*mlib));
    addFieldEx("maxBPictureL0ReferenceCount", "maxBPictureL0ReferenceCount", offsetof(ManagedType, maxBPictureL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBPictureL0ReferenceCount)>(*mlib));
    addFieldEx("maxL1ReferenceCount", "maxL1ReferenceCount", offsetof(ManagedType, maxL1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxL1ReferenceCount)>(*mlib));
    addFieldEx("maxTemporalLayerCount", "maxTemporalLayerCount", offsetof(ManagedType, maxTemporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxTemporalLayerCount)>(*mlib));
    addFieldEx("expectDyadicTemporalLayerPattern", "expectDyadicTemporalLayerPattern", offsetof(ManagedType, expectDyadicTemporalLayerPattern), das::makeFieldType<decltype(das::declval<ManagedType>().expectDyadicTemporalLayerPattern)>(*mlib));
    addFieldEx("minQp", "minQp", offsetof(ManagedType, minQp), das::makeFieldType<decltype(das::declval<ManagedType>().minQp)>(*mlib));
    addFieldEx("maxQp", "maxQp", offsetof(ManagedType, maxQp), das::makeFieldType<decltype(das::declval<ManagedType>().maxQp)>(*mlib));
    addFieldEx("prefersGopRemainingFrames", "prefersGopRemainingFrames", offsetof(ManagedType, prefersGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().prefersGopRemainingFrames)>(*mlib));
    addFieldEx("requiresGopRemainingFrames", "requiresGopRemainingFrames", offsetof(ManagedType, requiresGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().requiresGopRemainingFrames)>(*mlib));
    addFieldEx("stdSyntaxFlags", "stdSyntaxFlags", offsetof(ManagedType, stdSyntaxFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stdSyntaxFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264DpbSlotInfoKHR> {
  VkVideoEncodeH264DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264FrameSizeKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264FrameSizeKHR> {
  VkVideoEncodeH264FrameSizeKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264FrameSizeKHR", lib) {
    addFieldEx("frameISize", "frameISize", offsetof(ManagedType, frameISize), das::makeFieldType<decltype(das::declval<ManagedType>().frameISize)>(*mlib));
    addFieldEx("framePSize", "framePSize", offsetof(ManagedType, framePSize), das::makeFieldType<decltype(das::declval<ManagedType>().framePSize)>(*mlib));
    addFieldEx("frameBSize", "frameBSize", offsetof(ManagedType, frameBSize), das::makeFieldType<decltype(das::declval<ManagedType>().frameBSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264GopRemainingFrameInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264GopRemainingFrameInfoKHR> {
  VkVideoEncodeH264GopRemainingFrameInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264GopRemainingFrameInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useGopRemainingFrames", "useGopRemainingFrames", offsetof(ManagedType, useGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().useGopRemainingFrames)>(*mlib));
    addFieldEx("gopRemainingI", "gopRemainingI", offsetof(ManagedType, gopRemainingI), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingI)>(*mlib));
    addFieldEx("gopRemainingP", "gopRemainingP", offsetof(ManagedType, gopRemainingP), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingP)>(*mlib));
    addFieldEx("gopRemainingB", "gopRemainingB", offsetof(ManagedType, gopRemainingB), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingB)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264NaluSliceInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264NaluSliceInfoKHR> {
  VkVideoEncodeH264NaluSliceInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264NaluSliceInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("constantQp", "constantQp", offsetof(ManagedType, constantQp), das::makeFieldType<decltype(das::declval<ManagedType>().constantQp)>(*mlib));
    addFieldEx("pStdSliceHeader", "pStdSliceHeader", offsetof(ManagedType, pStdSliceHeader), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSliceHeader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264PictureInfoKHR> {
  VkVideoEncodeH264PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("naluSliceEntryCount", "naluSliceEntryCount", offsetof(ManagedType, naluSliceEntryCount), das::makeFieldType<decltype(das::declval<ManagedType>().naluSliceEntryCount)>(*mlib));
    addFieldEx("pNaluSliceEntries", "pNaluSliceEntries", offsetof(ManagedType, pNaluSliceEntries), das::makeFieldType<decltype(das::declval<ManagedType>().pNaluSliceEntries)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
    addFieldEx("generatePrefixNalu", "generatePrefixNalu", offsetof(ManagedType, generatePrefixNalu), das::makeFieldType<decltype(das::declval<ManagedType>().generatePrefixNalu)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264ProfileInfoKHR> {
  VkVideoEncodeH264ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfileIdc", "stdProfileIdc", offsetof(ManagedType, stdProfileIdc), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfileIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264QpKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264QpKHR> {
  VkVideoEncodeH264QpKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264QpKHR", lib) {
    addFieldEx("qpI", "qpI", offsetof(ManagedType, qpI), das::makeFieldType<decltype(das::declval<ManagedType>().qpI)>(*mlib));
    addFieldEx("qpP", "qpP", offsetof(ManagedType, qpP), das::makeFieldType<decltype(das::declval<ManagedType>().qpP)>(*mlib));
    addFieldEx("qpB", "qpB", offsetof(ManagedType, qpB), das::makeFieldType<decltype(das::declval<ManagedType>().qpB)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264QualityLevelPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264QualityLevelPropertiesKHR> {
  VkVideoEncodeH264QualityLevelPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264QualityLevelPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("preferredRateControlFlags", "preferredRateControlFlags", offsetof(ManagedType, preferredRateControlFlags), das::makeFieldType<decltype(das::declval<ManagedType>().preferredRateControlFlags)>(*mlib));
    addFieldEx("preferredGopFrameCount", "preferredGopFrameCount", offsetof(ManagedType, preferredGopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredGopFrameCount)>(*mlib));
    addFieldEx("preferredIdrPeriod", "preferredIdrPeriod", offsetof(ManagedType, preferredIdrPeriod), das::makeFieldType<decltype(das::declval<ManagedType>().preferredIdrPeriod)>(*mlib));
    addFieldEx("preferredConsecutiveBFrameCount", "preferredConsecutiveBFrameCount", offsetof(ManagedType, preferredConsecutiveBFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConsecutiveBFrameCount)>(*mlib));
    addFieldEx("preferredTemporalLayerCount", "preferredTemporalLayerCount", offsetof(ManagedType, preferredTemporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredTemporalLayerCount)>(*mlib));
    addFieldEx("preferredConstantQp", "preferredConstantQp", offsetof(ManagedType, preferredConstantQp), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConstantQp)>(*mlib));
    addFieldEx("preferredMaxL0ReferenceCount", "preferredMaxL0ReferenceCount", offsetof(ManagedType, preferredMaxL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxL0ReferenceCount)>(*mlib));
    addFieldEx("preferredMaxL1ReferenceCount", "preferredMaxL1ReferenceCount", offsetof(ManagedType, preferredMaxL1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxL1ReferenceCount)>(*mlib));
    addFieldEx("preferredStdEntropyCodingModeFlag", "preferredStdEntropyCodingModeFlag", offsetof(ManagedType, preferredStdEntropyCodingModeFlag), das::makeFieldType<decltype(das::declval<ManagedType>().preferredStdEntropyCodingModeFlag)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h264)
struct VkVideoEncodeH264QuantizationMapCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264QuantizationMapCapabilitiesKHR> {
  VkVideoEncodeH264QuantizationMapCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264QuantizationMapCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minQpDelta", "minQpDelta", offsetof(ManagedType, minQpDelta), das::makeFieldType<decltype(das::declval<ManagedType>().minQpDelta)>(*mlib));
    addFieldEx("maxQpDelta", "maxQpDelta", offsetof(ManagedType, maxQpDelta), das::makeFieldType<decltype(das::declval<ManagedType>().maxQpDelta)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_h264)
struct VkVideoEncodeH264RateControlInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264RateControlInfoKHR> {
  VkVideoEncodeH264RateControlInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264RateControlInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("gopFrameCount", "gopFrameCount", offsetof(ManagedType, gopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().gopFrameCount)>(*mlib));
    addFieldEx("idrPeriod", "idrPeriod", offsetof(ManagedType, idrPeriod), das::makeFieldType<decltype(das::declval<ManagedType>().idrPeriod)>(*mlib));
    addFieldEx("consecutiveBFrameCount", "consecutiveBFrameCount", offsetof(ManagedType, consecutiveBFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().consecutiveBFrameCount)>(*mlib));
    addFieldEx("temporalLayerCount", "temporalLayerCount", offsetof(ManagedType, temporalLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().temporalLayerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264RateControlLayerInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264RateControlLayerInfoKHR> {
  VkVideoEncodeH264RateControlLayerInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264RateControlLayerInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMinQp", "useMinQp", offsetof(ManagedType, useMinQp), das::makeFieldType<decltype(das::declval<ManagedType>().useMinQp)>(*mlib));
    addFieldEx("minQp", "minQp", offsetof(ManagedType, minQp), das::makeFieldType<decltype(das::declval<ManagedType>().minQp)>(*mlib));
    addFieldEx("useMaxQp", "useMaxQp", offsetof(ManagedType, useMaxQp), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxQp)>(*mlib));
    addFieldEx("maxQp", "maxQp", offsetof(ManagedType, maxQp), das::makeFieldType<decltype(das::declval<ManagedType>().maxQp)>(*mlib));
    addFieldEx("useMaxFrameSize", "useMaxFrameSize", offsetof(ManagedType, useMaxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxFrameSize)>(*mlib));
    addFieldEx("maxFrameSize", "maxFrameSize", offsetof(ManagedType, maxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFrameSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264SessionCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264SessionCreateInfoKHR> {
  VkVideoEncodeH264SessionCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264SessionCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMaxLevelIdc", "useMaxLevelIdc", offsetof(ManagedType, useMaxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxLevelIdc)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264SessionParametersAddInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264SessionParametersAddInfoKHR> {
  VkVideoEncodeH264SessionParametersAddInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264SessionParametersAddInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdSPSCount", "stdSPSCount", offsetof(ManagedType, stdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSCount)>(*mlib));
    addFieldEx("pStdSPSs", "pStdSPSs", offsetof(ManagedType, pStdSPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSPSs)>(*mlib));
    addFieldEx("stdPPSCount", "stdPPSCount", offsetof(ManagedType, stdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSCount)>(*mlib));
    addFieldEx("pStdPPSs", "pStdPPSs", offsetof(ManagedType, pStdPPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPPSs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264SessionParametersCreateInfoKHR> {
  VkVideoEncodeH264SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxStdSPSCount", "maxStdSPSCount", offsetof(ManagedType, maxStdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdSPSCount)>(*mlib));
    addFieldEx("maxStdPPSCount", "maxStdPPSCount", offsetof(ManagedType, maxStdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdPPSCount)>(*mlib));
    addFieldEx("pParametersAddInfo", "pParametersAddInfo", offsetof(ManagedType, pParametersAddInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pParametersAddInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264SessionParametersFeedbackInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264SessionParametersFeedbackInfoKHR> {
  VkVideoEncodeH264SessionParametersFeedbackInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264SessionParametersFeedbackInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hasStdSPSOverrides", "hasStdSPSOverrides", offsetof(ManagedType, hasStdSPSOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasStdSPSOverrides)>(*mlib));
    addFieldEx("hasStdPPSOverrides", "hasStdPPSOverrides", offsetof(ManagedType, hasStdPPSOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasStdPPSOverrides)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH264SessionParametersGetInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH264SessionParametersGetInfoKHR> {
  VkVideoEncodeH264SessionParametersGetInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH264SessionParametersGetInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("writeStdSPS", "writeStdSPS", offsetof(ManagedType, writeStdSPS), das::makeFieldType<decltype(das::declval<ManagedType>().writeStdSPS)>(*mlib));
    addFieldEx("writeStdPPS", "writeStdPPS", offsetof(ManagedType, writeStdPPS), das::makeFieldType<decltype(das::declval<ManagedType>().writeStdPPS)>(*mlib));
    addFieldEx("stdSPSId", "stdSPSId", offsetof(ManagedType, stdSPSId), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSId)>(*mlib));
    addFieldEx("stdPPSId", "stdPPSId", offsetof(ManagedType, stdPPSId), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSId)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_h265)
struct VkVideoEncodeH265CapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265CapabilitiesKHR> {
  VkVideoEncodeH265CapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265CapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
    addFieldEx("maxSliceSegmentCount", "maxSliceSegmentCount", offsetof(ManagedType, maxSliceSegmentCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSliceSegmentCount)>(*mlib));
    addFieldEx("maxTiles", "maxTiles", offsetof(ManagedType, maxTiles), das::makeFieldType<decltype(das::declval<ManagedType>().maxTiles)>(*mlib));
    addFieldEx("ctbSizes", "ctbSizes", offsetof(ManagedType, ctbSizes), das::makeFieldType<decltype(das::declval<ManagedType>().ctbSizes)>(*mlib));
    addFieldEx("transformBlockSizes", "transformBlockSizes", offsetof(ManagedType, transformBlockSizes), das::makeFieldType<decltype(das::declval<ManagedType>().transformBlockSizes)>(*mlib));
    addFieldEx("maxPPictureL0ReferenceCount", "maxPPictureL0ReferenceCount", offsetof(ManagedType, maxPPictureL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxPPictureL0ReferenceCount)>(*mlib));
    addFieldEx("maxBPictureL0ReferenceCount", "maxBPictureL0ReferenceCount", offsetof(ManagedType, maxBPictureL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxBPictureL0ReferenceCount)>(*mlib));
    addFieldEx("maxL1ReferenceCount", "maxL1ReferenceCount", offsetof(ManagedType, maxL1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxL1ReferenceCount)>(*mlib));
    addFieldEx("maxSubLayerCount", "maxSubLayerCount", offsetof(ManagedType, maxSubLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxSubLayerCount)>(*mlib));
    addFieldEx("expectDyadicTemporalSubLayerPattern", "expectDyadicTemporalSubLayerPattern", offsetof(ManagedType, expectDyadicTemporalSubLayerPattern), das::makeFieldType<decltype(das::declval<ManagedType>().expectDyadicTemporalSubLayerPattern)>(*mlib));
    addFieldEx("minQp", "minQp", offsetof(ManagedType, minQp), das::makeFieldType<decltype(das::declval<ManagedType>().minQp)>(*mlib));
    addFieldEx("maxQp", "maxQp", offsetof(ManagedType, maxQp), das::makeFieldType<decltype(das::declval<ManagedType>().maxQp)>(*mlib));
    addFieldEx("prefersGopRemainingFrames", "prefersGopRemainingFrames", offsetof(ManagedType, prefersGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().prefersGopRemainingFrames)>(*mlib));
    addFieldEx("requiresGopRemainingFrames", "requiresGopRemainingFrames", offsetof(ManagedType, requiresGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().requiresGopRemainingFrames)>(*mlib));
    addFieldEx("stdSyntaxFlags", "stdSyntaxFlags", offsetof(ManagedType, stdSyntaxFlags), das::makeFieldType<decltype(das::declval<ManagedType>().stdSyntaxFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265DpbSlotInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265DpbSlotInfoKHR> {
  VkVideoEncodeH265DpbSlotInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265DpbSlotInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("pStdReferenceInfo", "pStdReferenceInfo", offsetof(ManagedType, pStdReferenceInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdReferenceInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265FrameSizeKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265FrameSizeKHR> {
  VkVideoEncodeH265FrameSizeKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265FrameSizeKHR", lib) {
    addFieldEx("frameISize", "frameISize", offsetof(ManagedType, frameISize), das::makeFieldType<decltype(das::declval<ManagedType>().frameISize)>(*mlib));
    addFieldEx("framePSize", "framePSize", offsetof(ManagedType, framePSize), das::makeFieldType<decltype(das::declval<ManagedType>().framePSize)>(*mlib));
    addFieldEx("frameBSize", "frameBSize", offsetof(ManagedType, frameBSize), das::makeFieldType<decltype(das::declval<ManagedType>().frameBSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265GopRemainingFrameInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265GopRemainingFrameInfoKHR> {
  VkVideoEncodeH265GopRemainingFrameInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265GopRemainingFrameInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useGopRemainingFrames", "useGopRemainingFrames", offsetof(ManagedType, useGopRemainingFrames), das::makeFieldType<decltype(das::declval<ManagedType>().useGopRemainingFrames)>(*mlib));
    addFieldEx("gopRemainingI", "gopRemainingI", offsetof(ManagedType, gopRemainingI), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingI)>(*mlib));
    addFieldEx("gopRemainingP", "gopRemainingP", offsetof(ManagedType, gopRemainingP), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingP)>(*mlib));
    addFieldEx("gopRemainingB", "gopRemainingB", offsetof(ManagedType, gopRemainingB), das::makeFieldType<decltype(das::declval<ManagedType>().gopRemainingB)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265NaluSliceSegmentInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265NaluSliceSegmentInfoKHR> {
  VkVideoEncodeH265NaluSliceSegmentInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265NaluSliceSegmentInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("constantQp", "constantQp", offsetof(ManagedType, constantQp), das::makeFieldType<decltype(das::declval<ManagedType>().constantQp)>(*mlib));
    addFieldEx("pStdSliceSegmentHeader", "pStdSliceSegmentHeader", offsetof(ManagedType, pStdSliceSegmentHeader), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSliceSegmentHeader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265PictureInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265PictureInfoKHR> {
  VkVideoEncodeH265PictureInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265PictureInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("naluSliceSegmentEntryCount", "naluSliceSegmentEntryCount", offsetof(ManagedType, naluSliceSegmentEntryCount), das::makeFieldType<decltype(das::declval<ManagedType>().naluSliceSegmentEntryCount)>(*mlib));
    addFieldEx("pNaluSliceSegmentEntries", "pNaluSliceSegmentEntries", offsetof(ManagedType, pNaluSliceSegmentEntries), das::makeFieldType<decltype(das::declval<ManagedType>().pNaluSliceSegmentEntries)>(*mlib));
    addFieldEx("pStdPictureInfo", "pStdPictureInfo", offsetof(ManagedType, pStdPictureInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPictureInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265ProfileInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265ProfileInfoKHR> {
  VkVideoEncodeH265ProfileInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265ProfileInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdProfileIdc", "stdProfileIdc", offsetof(ManagedType, stdProfileIdc), das::makeFieldType<decltype(das::declval<ManagedType>().stdProfileIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265QpKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265QpKHR> {
  VkVideoEncodeH265QpKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265QpKHR", lib) {
    addFieldEx("qpI", "qpI", offsetof(ManagedType, qpI), das::makeFieldType<decltype(das::declval<ManagedType>().qpI)>(*mlib));
    addFieldEx("qpP", "qpP", offsetof(ManagedType, qpP), das::makeFieldType<decltype(das::declval<ManagedType>().qpP)>(*mlib));
    addFieldEx("qpB", "qpB", offsetof(ManagedType, qpB), das::makeFieldType<decltype(das::declval<ManagedType>().qpB)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265QualityLevelPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265QualityLevelPropertiesKHR> {
  VkVideoEncodeH265QualityLevelPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265QualityLevelPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("preferredRateControlFlags", "preferredRateControlFlags", offsetof(ManagedType, preferredRateControlFlags), das::makeFieldType<decltype(das::declval<ManagedType>().preferredRateControlFlags)>(*mlib));
    addFieldEx("preferredGopFrameCount", "preferredGopFrameCount", offsetof(ManagedType, preferredGopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredGopFrameCount)>(*mlib));
    addFieldEx("preferredIdrPeriod", "preferredIdrPeriod", offsetof(ManagedType, preferredIdrPeriod), das::makeFieldType<decltype(das::declval<ManagedType>().preferredIdrPeriod)>(*mlib));
    addFieldEx("preferredConsecutiveBFrameCount", "preferredConsecutiveBFrameCount", offsetof(ManagedType, preferredConsecutiveBFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConsecutiveBFrameCount)>(*mlib));
    addFieldEx("preferredSubLayerCount", "preferredSubLayerCount", offsetof(ManagedType, preferredSubLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredSubLayerCount)>(*mlib));
    addFieldEx("preferredConstantQp", "preferredConstantQp", offsetof(ManagedType, preferredConstantQp), das::makeFieldType<decltype(das::declval<ManagedType>().preferredConstantQp)>(*mlib));
    addFieldEx("preferredMaxL0ReferenceCount", "preferredMaxL0ReferenceCount", offsetof(ManagedType, preferredMaxL0ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxL0ReferenceCount)>(*mlib));
    addFieldEx("preferredMaxL1ReferenceCount", "preferredMaxL1ReferenceCount", offsetof(ManagedType, preferredMaxL1ReferenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredMaxL1ReferenceCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265)
struct VkVideoEncodeH265QuantizationMapCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265QuantizationMapCapabilitiesKHR> {
  VkVideoEncodeH265QuantizationMapCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265QuantizationMapCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("minQpDelta", "minQpDelta", offsetof(ManagedType, minQpDelta), das::makeFieldType<decltype(das::declval<ManagedType>().minQpDelta)>(*mlib));
    addFieldEx("maxQpDelta", "maxQpDelta", offsetof(ManagedType, maxQpDelta), das::makeFieldType<decltype(das::declval<ManagedType>().maxQpDelta)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_h265)
struct VkVideoEncodeH265RateControlInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265RateControlInfoKHR> {
  VkVideoEncodeH265RateControlInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265RateControlInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("gopFrameCount", "gopFrameCount", offsetof(ManagedType, gopFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().gopFrameCount)>(*mlib));
    addFieldEx("idrPeriod", "idrPeriod", offsetof(ManagedType, idrPeriod), das::makeFieldType<decltype(das::declval<ManagedType>().idrPeriod)>(*mlib));
    addFieldEx("consecutiveBFrameCount", "consecutiveBFrameCount", offsetof(ManagedType, consecutiveBFrameCount), das::makeFieldType<decltype(das::declval<ManagedType>().consecutiveBFrameCount)>(*mlib));
    addFieldEx("subLayerCount", "subLayerCount", offsetof(ManagedType, subLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().subLayerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265RateControlLayerInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265RateControlLayerInfoKHR> {
  VkVideoEncodeH265RateControlLayerInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265RateControlLayerInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMinQp", "useMinQp", offsetof(ManagedType, useMinQp), das::makeFieldType<decltype(das::declval<ManagedType>().useMinQp)>(*mlib));
    addFieldEx("minQp", "minQp", offsetof(ManagedType, minQp), das::makeFieldType<decltype(das::declval<ManagedType>().minQp)>(*mlib));
    addFieldEx("useMaxQp", "useMaxQp", offsetof(ManagedType, useMaxQp), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxQp)>(*mlib));
    addFieldEx("maxQp", "maxQp", offsetof(ManagedType, maxQp), das::makeFieldType<decltype(das::declval<ManagedType>().maxQp)>(*mlib));
    addFieldEx("useMaxFrameSize", "useMaxFrameSize", offsetof(ManagedType, useMaxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxFrameSize)>(*mlib));
    addFieldEx("maxFrameSize", "maxFrameSize", offsetof(ManagedType, maxFrameSize), das::makeFieldType<decltype(das::declval<ManagedType>().maxFrameSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265SessionCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265SessionCreateInfoKHR> {
  VkVideoEncodeH265SessionCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265SessionCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("useMaxLevelIdc", "useMaxLevelIdc", offsetof(ManagedType, useMaxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().useMaxLevelIdc)>(*mlib));
    addFieldEx("maxLevelIdc", "maxLevelIdc", offsetof(ManagedType, maxLevelIdc), das::makeFieldType<decltype(das::declval<ManagedType>().maxLevelIdc)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265SessionParametersAddInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265SessionParametersAddInfoKHR> {
  VkVideoEncodeH265SessionParametersAddInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265SessionParametersAddInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("stdVPSCount", "stdVPSCount", offsetof(ManagedType, stdVPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdVPSCount)>(*mlib));
    addFieldEx("pStdVPSs", "pStdVPSs", offsetof(ManagedType, pStdVPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdVPSs)>(*mlib));
    addFieldEx("stdSPSCount", "stdSPSCount", offsetof(ManagedType, stdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSCount)>(*mlib));
    addFieldEx("pStdSPSs", "pStdSPSs", offsetof(ManagedType, pStdSPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdSPSs)>(*mlib));
    addFieldEx("stdPPSCount", "stdPPSCount", offsetof(ManagedType, stdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSCount)>(*mlib));
    addFieldEx("pStdPPSs", "pStdPPSs", offsetof(ManagedType, pStdPPSs), das::makeFieldType<decltype(das::declval<ManagedType>().pStdPPSs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265SessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265SessionParametersCreateInfoKHR> {
  VkVideoEncodeH265SessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265SessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxStdVPSCount", "maxStdVPSCount", offsetof(ManagedType, maxStdVPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdVPSCount)>(*mlib));
    addFieldEx("maxStdSPSCount", "maxStdSPSCount", offsetof(ManagedType, maxStdSPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdSPSCount)>(*mlib));
    addFieldEx("maxStdPPSCount", "maxStdPPSCount", offsetof(ManagedType, maxStdPPSCount), das::makeFieldType<decltype(das::declval<ManagedType>().maxStdPPSCount)>(*mlib));
    addFieldEx("pParametersAddInfo", "pParametersAddInfo", offsetof(ManagedType, pParametersAddInfo), das::makeFieldType<decltype(das::declval<ManagedType>().pParametersAddInfo)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265SessionParametersFeedbackInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265SessionParametersFeedbackInfoKHR> {
  VkVideoEncodeH265SessionParametersFeedbackInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265SessionParametersFeedbackInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hasStdVPSOverrides", "hasStdVPSOverrides", offsetof(ManagedType, hasStdVPSOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasStdVPSOverrides)>(*mlib));
    addFieldEx("hasStdSPSOverrides", "hasStdSPSOverrides", offsetof(ManagedType, hasStdSPSOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasStdSPSOverrides)>(*mlib));
    addFieldEx("hasStdPPSOverrides", "hasStdPPSOverrides", offsetof(ManagedType, hasStdPPSOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasStdPPSOverrides)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeH265SessionParametersGetInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeH265SessionParametersGetInfoKHR> {
  VkVideoEncodeH265SessionParametersGetInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeH265SessionParametersGetInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("writeStdVPS", "writeStdVPS", offsetof(ManagedType, writeStdVPS), das::makeFieldType<decltype(das::declval<ManagedType>().writeStdVPS)>(*mlib));
    addFieldEx("writeStdSPS", "writeStdSPS", offsetof(ManagedType, writeStdSPS), das::makeFieldType<decltype(das::declval<ManagedType>().writeStdSPS)>(*mlib));
    addFieldEx("writeStdPPS", "writeStdPPS", offsetof(ManagedType, writeStdPPS), das::makeFieldType<decltype(das::declval<ManagedType>().writeStdPPS)>(*mlib));
    addFieldEx("stdVPSId", "stdVPSId", offsetof(ManagedType, stdVPSId), das::makeFieldType<decltype(das::declval<ManagedType>().stdVPSId)>(*mlib));
    addFieldEx("stdSPSId", "stdSPSId", offsetof(ManagedType, stdSPSId), das::makeFieldType<decltype(das::declval<ManagedType>().stdSPSId)>(*mlib));
    addFieldEx("stdPPSId", "stdPPSId", offsetof(ManagedType, stdPPSId), das::makeFieldType<decltype(das::declval<ManagedType>().stdPPSId)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_queue)
struct VkVideoEncodeInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeInfoKHR> {
  VkVideoEncodeInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("dstBuffer", "dstBuffer", offsetof(ManagedType, dstBuffer), das::makeFieldType<decltype(das::declval<ManagedType>().dstBuffer)>(*mlib));
    addFieldEx("dstBufferOffset", "dstBufferOffset", offsetof(ManagedType, dstBufferOffset), das::makeFieldType<decltype(das::declval<ManagedType>().dstBufferOffset)>(*mlib));
    addFieldEx("dstBufferRange", "dstBufferRange", offsetof(ManagedType, dstBufferRange), das::makeFieldType<decltype(das::declval<ManagedType>().dstBufferRange)>(*mlib));
    addFieldEx("srcPictureResource", "srcPictureResource", offsetof(ManagedType, srcPictureResource), das::makeFieldType<decltype(das::declval<ManagedType>().srcPictureResource)>(*mlib));
    addFieldEx("pSetupReferenceSlot", "pSetupReferenceSlot", offsetof(ManagedType, pSetupReferenceSlot), das::makeFieldType<decltype(das::declval<ManagedType>().pSetupReferenceSlot)>(*mlib));
    addFieldEx("referenceSlotCount", "referenceSlotCount", offsetof(ManagedType, referenceSlotCount), das::makeFieldType<decltype(das::declval<ManagedType>().referenceSlotCount)>(*mlib));
    addFieldEx("pReferenceSlots", "pReferenceSlots", offsetof(ManagedType, pReferenceSlots), das::makeFieldType<decltype(das::declval<ManagedType>().pReferenceSlots)>(*mlib));
    addFieldEx("precedingExternallyEncodedBytes", "precedingExternallyEncodedBytes", offsetof(ManagedType, precedingExternallyEncodedBytes), das::makeFieldType<decltype(das::declval<ManagedType>().precedingExternallyEncodedBytes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeQualityLevelInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeQualityLevelInfoKHR> {
  VkVideoEncodeQualityLevelInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeQualityLevelInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("qualityLevel", "qualityLevel", offsetof(ManagedType, qualityLevel), das::makeFieldType<decltype(das::declval<ManagedType>().qualityLevel)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeQualityLevelPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeQualityLevelPropertiesKHR> {
  VkVideoEncodeQualityLevelPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeQualityLevelPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("preferredRateControlMode", "preferredRateControlMode", offsetof(ManagedType, preferredRateControlMode), das::makeFieldType<decltype(das::declval<ManagedType>().preferredRateControlMode)>(*mlib));
    addFieldEx("preferredRateControlLayerCount", "preferredRateControlLayerCount", offsetof(ManagedType, preferredRateControlLayerCount), das::makeFieldType<decltype(das::declval<ManagedType>().preferredRateControlLayerCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
struct VkVideoEncodeQuantizationMapCapabilitiesKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeQuantizationMapCapabilitiesKHR> {
  VkVideoEncodeQuantizationMapCapabilitiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeQuantizationMapCapabilitiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("maxQuantizationMapExtent", "maxQuantizationMapExtent", offsetof(ManagedType, maxQuantizationMapExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxQuantizationMapExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeQuantizationMapInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeQuantizationMapInfoKHR> {
  VkVideoEncodeQuantizationMapInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeQuantizationMapInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("quantizationMap", "quantizationMap", offsetof(ManagedType, quantizationMap), das::makeFieldType<decltype(das::declval<ManagedType>().quantizationMap)>(*mlib));
    addFieldEx("quantizationMapExtent", "quantizationMapExtent", offsetof(ManagedType, quantizationMapExtent), das::makeFieldType<decltype(das::declval<ManagedType>().quantizationMapExtent)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR> {
  VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("quantizationMapTexelSize", "quantizationMapTexelSize", offsetof(ManagedType, quantizationMapTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().quantizationMapTexelSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_encode_queue)
struct VkVideoEncodeRateControlLayerInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeRateControlLayerInfoKHR> {
  VkVideoEncodeRateControlLayerInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeRateControlLayerInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("averageBitrate", "averageBitrate", offsetof(ManagedType, averageBitrate), das::makeFieldType<decltype(das::declval<ManagedType>().averageBitrate)>(*mlib));
    addFieldEx("maxBitrate", "maxBitrate", offsetof(ManagedType, maxBitrate), das::makeFieldType<decltype(das::declval<ManagedType>().maxBitrate)>(*mlib));
    addFieldEx("frameRateNumerator", "frameRateNumerator", offsetof(ManagedType, frameRateNumerator), das::makeFieldType<decltype(das::declval<ManagedType>().frameRateNumerator)>(*mlib));
    addFieldEx("frameRateDenominator", "frameRateDenominator", offsetof(ManagedType, frameRateDenominator), das::makeFieldType<decltype(das::declval<ManagedType>().frameRateDenominator)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeRateControlInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeRateControlInfoKHR> {
  VkVideoEncodeRateControlInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeRateControlInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("rateControlMode", "rateControlMode", offsetof(ManagedType, rateControlMode), das::makeFieldType<decltype(das::declval<ManagedType>().rateControlMode)>(*mlib));
    addFieldEx("layerCount", "layerCount", offsetof(ManagedType, layerCount), das::makeFieldType<decltype(das::declval<ManagedType>().layerCount)>(*mlib));
    addFieldEx("pLayers", "pLayers", offsetof(ManagedType, pLayers), das::makeFieldType<decltype(das::declval<ManagedType>().pLayers)>(*mlib));
    addFieldEx("virtualBufferSizeInMs", "virtualBufferSizeInMs", offsetof(ManagedType, virtualBufferSizeInMs), das::makeFieldType<decltype(das::declval<ManagedType>().virtualBufferSizeInMs)>(*mlib));
    addFieldEx("initialVirtualBufferSizeInMs", "initialVirtualBufferSizeInMs", offsetof(ManagedType, initialVirtualBufferSizeInMs), das::makeFieldType<decltype(das::declval<ManagedType>().initialVirtualBufferSizeInMs)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeSessionParametersFeedbackInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeSessionParametersFeedbackInfoKHR> {
  VkVideoEncodeSessionParametersFeedbackInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeSessionParametersFeedbackInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("hasOverrides", "hasOverrides", offsetof(ManagedType, hasOverrides), das::makeFieldType<decltype(das::declval<ManagedType>().hasOverrides)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeSessionParametersGetInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeSessionParametersGetInfoKHR> {
  VkVideoEncodeSessionParametersGetInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeSessionParametersGetInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoSessionParameters", "videoSessionParameters", offsetof(ManagedType, videoSessionParameters), das::makeFieldType<decltype(das::declval<ManagedType>().videoSessionParameters)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoEncodeUsageInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEncodeUsageInfoKHR> {
  VkVideoEncodeUsageInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEncodeUsageInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("videoUsageHints", "videoUsageHints", offsetof(ManagedType, videoUsageHints), das::makeFieldType<decltype(das::declval<ManagedType>().videoUsageHints)>(*mlib));
    addFieldEx("videoContentHints", "videoContentHints", offsetof(ManagedType, videoContentHints), das::makeFieldType<decltype(das::declval<ManagedType>().videoContentHints)>(*mlib));
    addFieldEx("tuningMode", "tuningMode", offsetof(ManagedType, tuningMode), das::makeFieldType<decltype(das::declval<ManagedType>().tuningMode)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
struct VkVideoEndCodingInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoEndCodingInfoKHR> {
  VkVideoEndCodingInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoEndCodingInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1)
struct VkVideoFormatAV1QuantizationMapPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoFormatAV1QuantizationMapPropertiesKHR> {
  VkVideoFormatAV1QuantizationMapPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoFormatAV1QuantizationMapPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("compatibleSuperblockSizes", "compatibleSuperblockSizes", offsetof(ManagedType, compatibleSuperblockSizes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleSuperblockSizes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265)
struct VkVideoFormatH265QuantizationMapPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoFormatH265QuantizationMapPropertiesKHR> {
  VkVideoFormatH265QuantizationMapPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoFormatH265QuantizationMapPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("compatibleCtbSizes", "compatibleCtbSizes", offsetof(ManagedType, compatibleCtbSizes), das::makeFieldType<decltype(das::declval<ManagedType>().compatibleCtbSizes)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_queue)
struct VkVideoFormatPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoFormatPropertiesKHR> {
  VkVideoFormatPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoFormatPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("format", "format", offsetof(ManagedType, format), das::makeFieldType<decltype(das::declval<ManagedType>().format)>(*mlib));
    addFieldEx("componentMapping", "componentMapping", offsetof(ManagedType, componentMapping), das::makeFieldType<decltype(das::declval<ManagedType>().componentMapping)>(*mlib));
    addFieldEx("imageCreateFlags", "imageCreateFlags", offsetof(ManagedType, imageCreateFlags), das::makeFieldType<decltype(das::declval<ManagedType>().imageCreateFlags)>(*mlib));
    addFieldEx("imageType", "imageType", offsetof(ManagedType, imageType), das::makeFieldType<decltype(das::declval<ManagedType>().imageType)>(*mlib));
    addFieldEx("imageTiling", "imageTiling", offsetof(ManagedType, imageTiling), das::makeFieldType<decltype(das::declval<ManagedType>().imageTiling)>(*mlib));
    addFieldEx("imageUsageFlags", "imageUsageFlags", offsetof(ManagedType, imageUsageFlags), das::makeFieldType<decltype(das::declval<ManagedType>().imageUsageFlags)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
struct VkVideoFormatQuantizationMapPropertiesKHRAnnotation : ManagedStructureAnnotation<VkVideoFormatQuantizationMapPropertiesKHR> {
  VkVideoFormatQuantizationMapPropertiesKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoFormatQuantizationMapPropertiesKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("quantizationMapTexelSize", "quantizationMapTexelSize", offsetof(ManagedType, quantizationMapTexelSize), das::makeFieldType<decltype(das::declval<ManagedType>().quantizationMapTexelSize)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_maintenance1)
struct VkVideoInlineQueryInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoInlineQueryInfoKHR> {
  VkVideoInlineQueryInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoInlineQueryInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queryPool", "queryPool", offsetof(ManagedType, queryPool), das::makeFieldType<decltype(das::declval<ManagedType>().queryPool)>(*mlib));
    addFieldEx("firstQuery", "firstQuery", offsetof(ManagedType, firstQuery), das::makeFieldType<decltype(das::declval<ManagedType>().firstQuery)>(*mlib));
    addFieldEx("queryCount", "queryCount", offsetof(ManagedType, queryCount), das::makeFieldType<decltype(das::declval<ManagedType>().queryCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_maintenance1) */
#if defined(VK_KHR_video_queue)
struct VkVideoProfileListInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoProfileListInfoKHR> {
  VkVideoProfileListInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoProfileListInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("profileCount", "profileCount", offsetof(ManagedType, profileCount), das::makeFieldType<decltype(das::declval<ManagedType>().profileCount)>(*mlib));
    addFieldEx("pProfiles", "pProfiles", offsetof(ManagedType, pProfiles), das::makeFieldType<decltype(das::declval<ManagedType>().pProfiles)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoSessionCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoSessionCreateInfoKHR> {
  VkVideoSessionCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoSessionCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("queueFamilyIndex", "queueFamilyIndex", offsetof(ManagedType, queueFamilyIndex), das::makeFieldType<decltype(das::declval<ManagedType>().queueFamilyIndex)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("pVideoProfile", "pVideoProfile", offsetof(ManagedType, pVideoProfile), das::makeFieldType<decltype(das::declval<ManagedType>().pVideoProfile)>(*mlib));
    addFieldEx("pictureFormat", "pictureFormat", offsetof(ManagedType, pictureFormat), das::makeFieldType<decltype(das::declval<ManagedType>().pictureFormat)>(*mlib));
    addFieldEx("maxCodedExtent", "maxCodedExtent", offsetof(ManagedType, maxCodedExtent), das::makeFieldType<decltype(das::declval<ManagedType>().maxCodedExtent)>(*mlib));
    addFieldEx("referencePictureFormat", "referencePictureFormat", offsetof(ManagedType, referencePictureFormat), das::makeFieldType<decltype(das::declval<ManagedType>().referencePictureFormat)>(*mlib));
    addFieldEx("maxDpbSlots", "maxDpbSlots", offsetof(ManagedType, maxDpbSlots), das::makeFieldType<decltype(das::declval<ManagedType>().maxDpbSlots)>(*mlib));
    addFieldEx("maxActiveReferencePictures", "maxActiveReferencePictures", offsetof(ManagedType, maxActiveReferencePictures), das::makeFieldType<decltype(das::declval<ManagedType>().maxActiveReferencePictures)>(*mlib));
    addFieldEx("pStdHeaderVersion", "pStdHeaderVersion", offsetof(ManagedType, pStdHeaderVersion), das::makeFieldType<decltype(das::declval<ManagedType>().pStdHeaderVersion)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoSessionMemoryRequirementsKHRAnnotation : ManagedStructureAnnotation<VkVideoSessionMemoryRequirementsKHR> {
  VkVideoSessionMemoryRequirementsKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoSessionMemoryRequirementsKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("memoryBindIndex", "memoryBindIndex", offsetof(ManagedType, memoryBindIndex), das::makeFieldType<decltype(das::declval<ManagedType>().memoryBindIndex)>(*mlib));
    addFieldEx("memoryRequirements", "memoryRequirements", offsetof(ManagedType, memoryRequirements), das::makeFieldType<decltype(das::declval<ManagedType>().memoryRequirements)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoSessionParametersCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoSessionParametersCreateInfoKHR> {
  VkVideoSessionParametersCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoSessionParametersCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("videoSessionParametersTemplate", "videoSessionParametersTemplate", offsetof(ManagedType, videoSessionParametersTemplate), das::makeFieldType<decltype(das::declval<ManagedType>().videoSessionParametersTemplate)>(*mlib));
    addFieldEx("videoSession", "videoSession", offsetof(ManagedType, videoSession), das::makeFieldType<decltype(das::declval<ManagedType>().videoSession)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
struct VkVideoSessionParametersUpdateInfoKHRAnnotation : ManagedStructureAnnotation<VkVideoSessionParametersUpdateInfoKHR> {
  VkVideoSessionParametersUpdateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkVideoSessionParametersUpdateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("updateSequenceCount", "updateSequenceCount", offsetof(ManagedType, updateSequenceCount), das::makeFieldType<decltype(das::declval<ManagedType>().updateSequenceCount)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
struct VkWaylandSurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkWaylandSurfaceCreateInfoKHR> {
  VkWaylandSurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWaylandSurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("display", "display", offsetof(ManagedType, display), das::makeFieldType<decltype(das::declval<ManagedType>().display)>(*mlib));
    addFieldEx("surface", "surface", offsetof(ManagedType, surface), das::makeFieldType<decltype(das::declval<ManagedType>().surface)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_keyed_mutex)
struct VkWin32KeyedMutexAcquireReleaseInfoKHRAnnotation : ManagedStructureAnnotation<VkWin32KeyedMutexAcquireReleaseInfoKHR> {
  VkWin32KeyedMutexAcquireReleaseInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWin32KeyedMutexAcquireReleaseInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("acquireCount", "acquireCount", offsetof(ManagedType, acquireCount), das::makeFieldType<decltype(das::declval<ManagedType>().acquireCount)>(*mlib));
    addFieldEx("pAcquireSyncs", "pAcquireSyncs", offsetof(ManagedType, pAcquireSyncs), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireSyncs)>(*mlib));
    addFieldEx("pAcquireKeys", "pAcquireKeys", offsetof(ManagedType, pAcquireKeys), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireKeys)>(*mlib));
    addFieldEx("pAcquireTimeouts", "pAcquireTimeouts", offsetof(ManagedType, pAcquireTimeouts), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireTimeouts)>(*mlib));
    addFieldEx("releaseCount", "releaseCount", offsetof(ManagedType, releaseCount), das::makeFieldType<decltype(das::declval<ManagedType>().releaseCount)>(*mlib));
    addFieldEx("pReleaseSyncs", "pReleaseSyncs", offsetof(ManagedType, pReleaseSyncs), das::makeFieldType<decltype(das::declval<ManagedType>().pReleaseSyncs)>(*mlib));
    addFieldEx("pReleaseKeys", "pReleaseKeys", offsetof(ManagedType, pReleaseKeys), das::makeFieldType<decltype(das::declval<ManagedType>().pReleaseKeys)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_win32_keyed_mutex) */
#if defined(VK_NV_win32_keyed_mutex)
struct VkWin32KeyedMutexAcquireReleaseInfoNVAnnotation : ManagedStructureAnnotation<VkWin32KeyedMutexAcquireReleaseInfoNV> {
  VkWin32KeyedMutexAcquireReleaseInfoNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWin32KeyedMutexAcquireReleaseInfoNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("acquireCount", "acquireCount", offsetof(ManagedType, acquireCount), das::makeFieldType<decltype(das::declval<ManagedType>().acquireCount)>(*mlib));
    addFieldEx("pAcquireSyncs", "pAcquireSyncs", offsetof(ManagedType, pAcquireSyncs), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireSyncs)>(*mlib));
    addFieldEx("pAcquireKeys", "pAcquireKeys", offsetof(ManagedType, pAcquireKeys), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireKeys)>(*mlib));
    addFieldEx("pAcquireTimeoutMilliseconds", "pAcquireTimeoutMilliseconds", offsetof(ManagedType, pAcquireTimeoutMilliseconds), das::makeFieldType<decltype(das::declval<ManagedType>().pAcquireTimeoutMilliseconds)>(*mlib));
    addFieldEx("releaseCount", "releaseCount", offsetof(ManagedType, releaseCount), das::makeFieldType<decltype(das::declval<ManagedType>().releaseCount)>(*mlib));
    addFieldEx("pReleaseSyncs", "pReleaseSyncs", offsetof(ManagedType, pReleaseSyncs), das::makeFieldType<decltype(das::declval<ManagedType>().pReleaseSyncs)>(*mlib));
    addFieldEx("pReleaseKeys", "pReleaseKeys", offsetof(ManagedType, pReleaseKeys), das::makeFieldType<decltype(das::declval<ManagedType>().pReleaseKeys)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_win32_keyed_mutex) */
#if defined(VK_KHR_win32_surface)
struct VkWin32SurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkWin32SurfaceCreateInfoKHR> {
  VkWin32SurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWin32SurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("hinstance", "hinstance", offsetof(ManagedType, hinstance), das::makeFieldType<decltype(das::declval<ManagedType>().hinstance)>(*mlib));
    addFieldEx("hwnd", "hwnd", offsetof(ManagedType, hwnd), das::makeFieldType<decltype(das::declval<ManagedType>().hwnd)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_acceleration_structure)
struct VkWriteDescriptorSetAccelerationStructureKHRAnnotation : ManagedStructureAnnotation<VkWriteDescriptorSetAccelerationStructureKHR> {
  VkWriteDescriptorSetAccelerationStructureKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteDescriptorSetAccelerationStructureKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructureCount", "accelerationStructureCount", offsetof(ManagedType, accelerationStructureCount), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureCount)>(*mlib));
    addFieldEx("pAccelerationStructures", "pAccelerationStructures", offsetof(ManagedType, pAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().pAccelerationStructures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing)
struct VkWriteDescriptorSetAccelerationStructureNVAnnotation : ManagedStructureAnnotation<VkWriteDescriptorSetAccelerationStructureNV> {
  VkWriteDescriptorSetAccelerationStructureNVAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteDescriptorSetAccelerationStructureNV", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("accelerationStructureCount", "accelerationStructureCount", offsetof(ManagedType, accelerationStructureCount), das::makeFieldType<decltype(das::declval<ManagedType>().accelerationStructureCount)>(*mlib));
    addFieldEx("pAccelerationStructures", "pAccelerationStructures", offsetof(ManagedType, pAccelerationStructures), das::makeFieldType<decltype(das::declval<ManagedType>().pAccelerationStructures)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_VERSION_1_3)
struct VkWriteDescriptorSetInlineUniformBlockAnnotation : ManagedStructureAnnotation<VkWriteDescriptorSetInlineUniformBlock> {
  VkWriteDescriptorSetInlineUniformBlockAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteDescriptorSetInlineUniformBlock", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("dataSize", "dataSize", offsetof(ManagedType, dataSize), das::makeFieldType<decltype(das::declval<ManagedType>().dataSize)>(*mlib));
    addFieldEx("pData", "pData", offsetof(ManagedType, pData), das::makeFieldType<decltype(das::declval<ManagedType>().pData)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_device_generated_commands)
struct VkWriteIndirectExecutionSetPipelineEXTAnnotation : ManagedStructureAnnotation<VkWriteIndirectExecutionSetPipelineEXT> {
  VkWriteIndirectExecutionSetPipelineEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteIndirectExecutionSetPipelineEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
    addFieldEx("pipeline", "pipeline", offsetof(ManagedType, pipeline), das::makeFieldType<decltype(das::declval<ManagedType>().pipeline)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands) && defined(VK_EXT_shader_object)
struct VkWriteIndirectExecutionSetShaderEXTAnnotation : ManagedStructureAnnotation<VkWriteIndirectExecutionSetShaderEXT> {
  VkWriteIndirectExecutionSetShaderEXTAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkWriteIndirectExecutionSetShaderEXT", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("index", "index", offsetof(ManagedType, index), das::makeFieldType<decltype(das::declval<ManagedType>().index)>(*mlib));
    addFieldEx("shader", "shader", offsetof(ManagedType, shader), das::makeFieldType<decltype(das::declval<ManagedType>().shader)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_EXT_device_generated_commands) && defined(VK_EXT_shader_object) */
#if defined(VK_KHR_xcb_surface)
struct VkXcbSurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkXcbSurfaceCreateInfoKHR> {
  VkXcbSurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkXcbSurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("connection", "connection", offsetof(ManagedType, connection), das::makeFieldType<decltype(das::declval<ManagedType>().connection)>(*mlib));
    addFieldEx("window", "window", offsetof(ManagedType, window), das::makeFieldType<decltype(das::declval<ManagedType>().window)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
struct VkXlibSurfaceCreateInfoKHRAnnotation : ManagedStructureAnnotation<VkXlibSurfaceCreateInfoKHR> {
  VkXlibSurfaceCreateInfoKHRAnnotation(ModuleLibrary &lib):ManagedStructureAnnotation("VkXlibSurfaceCreateInfoKHR", lib) {
    addFieldEx("sType", "sType", offsetof(ManagedType, sType), das::makeFieldType<decltype(das::declval<ManagedType>().sType)>(*mlib));
    addFieldEx("pNext", "pNext", offsetof(ManagedType, pNext), das::makeFieldType<decltype(das::declval<ManagedType>().pNext)>(*mlib));
    addFieldEx("flags", "flags", offsetof(ManagedType, flags), das::makeFieldType<decltype(das::declval<ManagedType>().flags)>(*mlib));
    addFieldEx("dpy", "dpy", offsetof(ManagedType, dpy), das::makeFieldType<decltype(das::declval<ManagedType>().dpy)>(*mlib));
    addFieldEx("window", "window", offsetof(ManagedType, window), das::makeFieldType<decltype(das::declval<ManagedType>().window)>(*mlib));
  }
  virtual bool isLocal() const override { return true; }
};
#endif /* defined(VK_KHR_xlib_surface) */
/* VOLK_GENERATE_DECL_ANN */

void Module_dasVulkan::bindAnnotations(ModuleLibrary &lib)
{
  /* VOLK_GENERATE_BIND_ANN */
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoAV1Level", "StdVideoAV1Level", sizeof(StdVideoAV1Level), alignof(StdVideoAV1Level)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoAV1Profile", "StdVideoAV1Profile", sizeof(StdVideoAV1Profile), alignof(StdVideoAV1Profile)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoAV1SequenceHeader", "StdVideoAV1SequenceHeader", sizeof(StdVideoAV1SequenceHeader), alignof(StdVideoAV1SequenceHeader)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeAV1PictureInfo", "StdVideoDecodeAV1PictureInfo", sizeof(StdVideoDecodeAV1PictureInfo), alignof(StdVideoDecodeAV1PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeAV1ReferenceInfo", "StdVideoDecodeAV1ReferenceInfo", sizeof(StdVideoDecodeAV1ReferenceInfo), alignof(StdVideoDecodeAV1ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeH264PictureInfo", "StdVideoDecodeH264PictureInfo", sizeof(StdVideoDecodeH264PictureInfo), alignof(StdVideoDecodeH264PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeH264ReferenceInfo", "StdVideoDecodeH264ReferenceInfo", sizeof(StdVideoDecodeH264ReferenceInfo), alignof(StdVideoDecodeH264ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeH265PictureInfo", "StdVideoDecodeH265PictureInfo", sizeof(StdVideoDecodeH265PictureInfo), alignof(StdVideoDecodeH265PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoDecodeH265ReferenceInfo", "StdVideoDecodeH265ReferenceInfo", sizeof(StdVideoDecodeH265ReferenceInfo), alignof(StdVideoDecodeH265ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeAV1DecoderModelInfo", "StdVideoEncodeAV1DecoderModelInfo", sizeof(StdVideoEncodeAV1DecoderModelInfo), alignof(StdVideoEncodeAV1DecoderModelInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeAV1ExtensionHeader", "StdVideoEncodeAV1ExtensionHeader", sizeof(StdVideoEncodeAV1ExtensionHeader), alignof(StdVideoEncodeAV1ExtensionHeader)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeAV1OperatingPointInfo", "StdVideoEncodeAV1OperatingPointInfo", sizeof(StdVideoEncodeAV1OperatingPointInfo), alignof(StdVideoEncodeAV1OperatingPointInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeAV1PictureInfo", "StdVideoEncodeAV1PictureInfo", sizeof(StdVideoEncodeAV1PictureInfo), alignof(StdVideoEncodeAV1PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeAV1ReferenceInfo", "StdVideoEncodeAV1ReferenceInfo", sizeof(StdVideoEncodeAV1ReferenceInfo), alignof(StdVideoEncodeAV1ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH264PictureInfo", "StdVideoEncodeH264PictureInfo", sizeof(StdVideoEncodeH264PictureInfo), alignof(StdVideoEncodeH264PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH264ReferenceInfo", "StdVideoEncodeH264ReferenceInfo", sizeof(StdVideoEncodeH264ReferenceInfo), alignof(StdVideoEncodeH264ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH264SliceHeader", "StdVideoEncodeH264SliceHeader", sizeof(StdVideoEncodeH264SliceHeader), alignof(StdVideoEncodeH264SliceHeader)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH265PictureInfo", "StdVideoEncodeH265PictureInfo", sizeof(StdVideoEncodeH265PictureInfo), alignof(StdVideoEncodeH265PictureInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH265ReferenceInfo", "StdVideoEncodeH265ReferenceInfo", sizeof(StdVideoEncodeH265ReferenceInfo), alignof(StdVideoEncodeH265ReferenceInfo)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoEncodeH265SliceSegmentHeader", "StdVideoEncodeH265SliceSegmentHeader", sizeof(StdVideoEncodeH265SliceSegmentHeader), alignof(StdVideoEncodeH265SliceSegmentHeader)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH264LevelIdc", "StdVideoH264LevelIdc", sizeof(StdVideoH264LevelIdc), alignof(StdVideoH264LevelIdc)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH264PictureParameterSet", "StdVideoH264PictureParameterSet", sizeof(StdVideoH264PictureParameterSet), alignof(StdVideoH264PictureParameterSet)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH264ProfileIdc", "StdVideoH264ProfileIdc", sizeof(StdVideoH264ProfileIdc), alignof(StdVideoH264ProfileIdc)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH264SequenceParameterSet", "StdVideoH264SequenceParameterSet", sizeof(StdVideoH264SequenceParameterSet), alignof(StdVideoH264SequenceParameterSet)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH265LevelIdc", "StdVideoH265LevelIdc", sizeof(StdVideoH265LevelIdc), alignof(StdVideoH265LevelIdc)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH265PictureParameterSet", "StdVideoH265PictureParameterSet", sizeof(StdVideoH265PictureParameterSet), alignof(StdVideoH265PictureParameterSet)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH265ProfileIdc", "StdVideoH265ProfileIdc", sizeof(StdVideoH265ProfileIdc), alignof(StdVideoH265ProfileIdc)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH265SequenceParameterSet", "StdVideoH265SequenceParameterSet", sizeof(StdVideoH265SequenceParameterSet), alignof(StdVideoH265SequenceParameterSet)));
addAnnotation(make_smart<DummyTypeAnnotation>("StdVideoH265VideoParameterSet", "StdVideoH265VideoParameterSet", sizeof(StdVideoH265VideoParameterSet), alignof(StdVideoH265VideoParameterSet)));
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<DummyTypeAnnotation>("VkBuffer_T", "VkBuffer_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkBufferView_T", "VkBufferView_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkCommandBuffer_T", "VkCommandBuffer_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkCommandPool_T", "VkCommandPool_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDescriptorPool_T", "VkDescriptorPool_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDescriptorSet_T", "VkDescriptorSet_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDescriptorSetLayout_T", "VkDescriptorSetLayout_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDevice_T", "VkDevice_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDeviceMemory_T", "VkDeviceMemory_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkEvent_T", "VkEvent_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkFence_T", "VkFence_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkFramebuffer_T", "VkFramebuffer_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkImage_T", "VkImage_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkImageView_T", "VkImageView_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkInstance_T", "VkInstance_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkPhysicalDevice_T", "VkPhysicalDevice_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkPipeline_T", "VkPipeline_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkPipelineCache_T", "VkPipelineCache_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkPipelineLayout_T", "VkPipelineLayout_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkQueryPool_T", "VkQueryPool_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkQueue_T", "VkQueue_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkRenderPass_T", "VkRenderPass_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkSampler_T", "VkSampler_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkSemaphore_T", "VkSemaphore_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkShaderModule_T", "VkShaderModule_T", 1, 1));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<DummyTypeAnnotation>("VkDescriptorUpdateTemplate_T", "VkDescriptorUpdateTemplate_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkSamplerYcbcrConversion_T", "VkSamplerYcbcrConversion_T", 1, 1));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<DummyTypeAnnotation>("VkPrivateDataSlot_T", "VkPrivateDataSlot_T", 1, 1));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_debug_report)
addAnnotation(make_smart<DummyTypeAnnotation>("VkDebugReportCallbackEXT_T", "VkDebugReportCallbackEXT_T", 1, 1));
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
addAnnotation(make_smart<DummyTypeAnnotation>("VkDebugUtilsMessengerEXT_T", "VkDebugUtilsMessengerEXT_T", 1, 1));
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<DummyTypeAnnotation>("VkIndirectCommandsLayoutEXT_T", "VkIndirectCommandsLayoutEXT_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkIndirectExecutionSetEXT_T", "VkIndirectExecutionSetEXT_T", 1, 1));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<DummyTypeAnnotation>("VkMicromapEXT_T", "VkMicromapEXT_T", 1, 1));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_shader_object)
addAnnotation(make_smart<DummyTypeAnnotation>("VkShaderEXT_T", "VkShaderEXT_T", 1, 1));
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_EXT_validation_cache)
addAnnotation(make_smart<DummyTypeAnnotation>("VkValidationCacheEXT_T", "VkValidationCacheEXT_T", 1, 1));
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_FUCHSIA_buffer_collection)
addAnnotation(make_smart<DummyTypeAnnotation>("VkBufferCollectionFUCHSIA_T", "VkBufferCollectionFUCHSIA_T", 1, 1));
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<DummyTypeAnnotation>("VkPerformanceConfigurationINTEL_T", "VkPerformanceConfigurationINTEL_T", 1, 1));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<DummyTypeAnnotation>("VkAccelerationStructureKHR_T", "VkAccelerationStructureKHR_T", 1, 1));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_deferred_host_operations)
addAnnotation(make_smart<DummyTypeAnnotation>("VkDeferredOperationKHR_T", "VkDeferredOperationKHR_T", 1, 1));
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<DummyTypeAnnotation>("VkDisplayKHR_T", "VkDisplayKHR_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkDisplayModeKHR_T", "VkDisplayModeKHR_T", 1, 1));
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_pipeline_binary)
addAnnotation(make_smart<DummyTypeAnnotation>("VkPipelineBinaryKHR_T", "VkPipelineBinaryKHR_T", 1, 1));
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_KHR_surface)
addAnnotation(make_smart<DummyTypeAnnotation>("VkSurfaceKHR_T", "VkSurfaceKHR_T", 1, 1));
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_swapchain)
addAnnotation(make_smart<DummyTypeAnnotation>("VkSwapchainKHR_T", "VkSwapchainKHR_T", 1, 1));
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<DummyTypeAnnotation>("VkVideoSessionKHR_T", "VkVideoSessionKHR_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkVideoSessionParametersKHR_T", "VkVideoSessionParametersKHR_T", 1, 1));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_NVX_binary_import)
addAnnotation(make_smart<DummyTypeAnnotation>("VkCuFunctionNVX_T", "VkCuFunctionNVX_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkCuModuleNVX_T", "VkCuModuleNVX_T", 1, 1));
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NV_cuda_kernel_launch)
addAnnotation(make_smart<DummyTypeAnnotation>("VkCudaFunctionNV_T", "VkCudaFunctionNV_T", 1, 1));
addAnnotation(make_smart<DummyTypeAnnotation>("VkCudaModuleNV_T", "VkCudaModuleNV_T", 1, 1));
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<DummyTypeAnnotation>("VkIndirectCommandsLayoutNV_T", "VkIndirectCommandsLayoutNV_T", 1, 1));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_NV_optical_flow)
addAnnotation(make_smart<DummyTypeAnnotation>("VkOpticalFlowSessionNV_T", "VkOpticalFlowSessionNV_T", 1, 1));
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<DummyTypeAnnotation>("VkAccelerationStructureNV_T", "VkAccelerationStructureNV_T", 1, 1));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkAabbPositionsKHRAnnotation>(lib));
addAnnotation(make_smart<VkDeviceOrHostAddressConstKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureGeometryAabbsDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureGeometryInstancesDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureGeometryTrianglesDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureGeometryDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureGeometryKHRAnnotation>(lib));
addAnnotation(make_smart<VkDeviceOrHostAddressKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureBuildGeometryInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureBuildRangeInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureBuildSizesInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
addAnnotation(make_smart<VkAccelerationStructureCaptureDescriptorDataInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing)) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkAccelerationStructureCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkGeometryAABBNVAnnotation>(lib));
addAnnotation(make_smart<VkGeometryTrianglesNVAnnotation>(lib));
addAnnotation(make_smart<VkGeometryDataNVAnnotation>(lib));
addAnnotation(make_smart<VkGeometryNVAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkAccelerationStructureDeviceAddressInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing_motion_blur)
addAnnotation(make_smart<VkAccelerationStructureGeometryMotionTrianglesDataNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkAccelerationStructureMemoryRequirementsInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_ray_tracing_motion_blur)
addAnnotation(make_smart<VkAccelerationStructureMotionInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureMotionInstanceDataNVAnnotation>(lib));
addAnnotation(make_smart<VkAccelerationStructureMotionInstanceNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<VkMicromapUsageEXTAnnotation>(lib));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NV_displacement_micromap)
addAnnotation(make_smart<VkAccelerationStructureTrianglesDisplacementMicromapNVAnnotation>(lib));
#endif /* defined(VK_NV_displacement_micromap) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<VkAccelerationStructureTrianglesOpacityMicromapEXTAnnotation>(lib));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkAccelerationStructureVersionInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkAcquireNextImageInfoKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_KHR_performance_query)
addAnnotation(make_smart<VkAcquireProfilingLockInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkAllocationCallbacksAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_SEC_amigo_profiling)
addAnnotation(make_smart<VkAmigoProfilingSubmitInfoSECAnnotation>(lib));
#endif /* defined(VK_SEC_amigo_profiling) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkComponentMappingAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
addAnnotation(make_smart<VkAndroidHardwareBufferFormatProperties2ANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
addAnnotation(make_smart<VkAndroidHardwareBufferFormatPropertiesANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_ANDROID_external_format_resolve)
addAnnotation(make_smart<VkAndroidHardwareBufferFormatResolvePropertiesANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_format_resolve) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
addAnnotation(make_smart<VkAndroidHardwareBufferPropertiesANDROIDAnnotation>(lib));
addAnnotation(make_smart<VkAndroidHardwareBufferUsageANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_android_surface)
addAnnotation(make_smart<VkAndroidSurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_AMD_anti_lag)
addAnnotation(make_smart<VkAntiLagPresentationInfoAMDAnnotation>(lib));
addAnnotation(make_smart<VkAntiLagDataAMDAnnotation>(lib));
#endif /* defined(VK_AMD_anti_lag) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkApplicationInfoAnnotation>(lib));
addAnnotation(make_smart<VkAttachmentDescriptionAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkAttachmentDescription2Annotation>(lib));
addAnnotation(make_smart<VkAttachmentDescriptionStencilLayoutAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkAttachmentReferenceAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkAttachmentReference2Annotation>(lib));
addAnnotation(make_smart<VkAttachmentReferenceStencilLayoutAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_AMD_mixed_attachment_samples) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
addAnnotation(make_smart<VkAttachmentSampleCountInfoAMDAnnotation>(lib));
#endif /* defined(VK_AMD_mixed_attachment_samples) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkExtent2DAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_sample_locations)
addAnnotation(make_smart<VkSampleLocationEXTAnnotation>(lib));
addAnnotation(make_smart<VkSampleLocationsInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkAttachmentSampleLocationsEXTAnnotation>(lib));
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBaseInStructureAnnotation>(lib));
addAnnotation(make_smart<VkBaseOutStructureAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkBindAccelerationStructureMemoryInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkBindBufferMemoryDeviceGroupInfoAnnotation>(lib));
addAnnotation(make_smart<VkBindBufferMemoryInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkBindDescriptorBufferEmbeddedSamplersInfoEXTAnnotation>(lib));
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkBindDescriptorSetsInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkOffset2DAnnotation>(lib));
addAnnotation(make_smart<VkRect2DAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkBindImageMemoryDeviceGroupInfoAnnotation>(lib));
addAnnotation(make_smart<VkBindImageMemoryInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkBindImageMemorySwapchainInfoKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkBindImagePlaneMemoryInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkBindIndexBufferIndirectCommandEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkBindIndexBufferIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkBindMemoryStatusAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_device_generated_commands_compute)
addAnnotation(make_smart<VkBindPipelineIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkBindShaderGroupIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSparseMemoryBindAnnotation>(lib));
addAnnotation(make_smart<VkSparseBufferMemoryBindInfoAnnotation>(lib));
addAnnotation(make_smart<VkOffset3DAnnotation>(lib));
addAnnotation(make_smart<VkExtent3DAnnotation>(lib));
addAnnotation(make_smart<VkImageSubresourceAnnotation>(lib));
addAnnotation(make_smart<VkSparseImageMemoryBindAnnotation>(lib));
addAnnotation(make_smart<VkSparseImageMemoryBindInfoAnnotation>(lib));
addAnnotation(make_smart<VkSparseImageOpaqueMemoryBindInfoAnnotation>(lib));
addAnnotation(make_smart<VkBindSparseInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkBindVertexBufferIndirectCommandEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkBindVertexBufferIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkBindVideoSessionMemoryInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_QCOM_filter_cubic_weights)
addAnnotation(make_smart<VkBlitImageCubicWeightsInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageSubresourceLayersAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkImageBlit2Annotation>(lib));
addAnnotation(make_smart<VkBlitImageInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkBufferCaptureDescriptorDataInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_FUCHSIA_buffer_collection)
addAnnotation(make_smart<VkBufferCollectionBufferCreateInfoFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkBufferCollectionConstraintsInfoFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkBufferCollectionCreateInfoFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkBufferCollectionImageCreateInfoFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkSysmemColorSpaceFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkBufferCollectionPropertiesFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBufferCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_FUCHSIA_buffer_collection)
addAnnotation(make_smart<VkBufferConstraintsInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBufferCopyAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkBufferCopy2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_buffer_device_address)
addAnnotation(make_smart<VkBufferDeviceAddressCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkBufferDeviceAddressInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBufferImageCopyAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkBufferImageCopy2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBufferMemoryBarrierAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkBufferMemoryBarrier2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkBufferMemoryRequirementsInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkBufferOpaqueCaptureAddressCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkBufferUsageFlags2CreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkBufferViewCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_calibrated_timestamps)
addAnnotation(make_smart<VkCalibratedTimestampInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_calibrated_timestamps) */
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2))
addAnnotation(make_smart<VkCheckpointData2NVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2)) */
#if defined(VK_NV_device_diagnostic_checkpoints)
addAnnotation(make_smart<VkCheckpointDataNVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkClearColorValueAnnotation>(lib));
addAnnotation(make_smart<VkClearDepthStencilValueAnnotation>(lib));
addAnnotation(make_smart<VkClearValueAnnotation>(lib));
addAnnotation(make_smart<VkClearAttachmentAnnotation>(lib));
addAnnotation(make_smart<VkClearRectAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_shading_rate_image)
addAnnotation(make_smart<VkCoarseSampleLocationNVAnnotation>(lib));
addAnnotation(make_smart<VkCoarseSampleOrderCustomNVAnnotation>(lib));
#endif /* defined(VK_NV_shading_rate_image) */
#if (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object))
addAnnotation(make_smart<VkColorBlendAdvancedEXTAnnotation>(lib));
addAnnotation(make_smart<VkColorBlendEquationEXTAnnotation>(lib));
#endif /* (defined(VK_EXT_extended_dynamic_state3)) || (defined(VK_EXT_shader_object)) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkCommandBufferAllocateInfoAnnotation>(lib));
addAnnotation(make_smart<VkCommandBufferInheritanceInfoAnnotation>(lib));
addAnnotation(make_smart<VkCommandBufferBeginInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_conditional_rendering)
addAnnotation(make_smart<VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_QCOM_render_pass_transform)
addAnnotation(make_smart<VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_render_pass_transform) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkCommandBufferInheritanceRenderingInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkViewportAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_inherited_viewport_scissor)
addAnnotation(make_smart<VkCommandBufferInheritanceViewportScissorInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_inherited_viewport_scissor) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkCommandBufferSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkCommandPoolCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkSpecializationMapEntryAnnotation>(lib));
addAnnotation(make_smart<VkSpecializationInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineShaderStageCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkComputePipelineCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_device_generated_commands_compute)
addAnnotation(make_smart<VkComputePipelineIndirectBufferInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_conditional_rendering)
addAnnotation(make_smart<VkConditionalRenderingBeginInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkConformanceVersionAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_cooperative_matrix2)
addAnnotation(make_smart<VkCooperativeMatrixFlexibleDimensionsPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_cooperative_matrix2) */
#if defined(VK_KHR_cooperative_matrix)
addAnnotation(make_smart<VkCooperativeMatrixPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
addAnnotation(make_smart<VkCooperativeMatrixPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkCopyAccelerationStructureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkCopyAccelerationStructureToMemoryInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkCopyBufferInfo2Annotation>(lib));
addAnnotation(make_smart<VkCopyBufferToImageInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_QCOM_rotated_copy_commands)
addAnnotation(make_smart<VkCopyCommandTransformInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_rotated_copy_commands) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkCopyDescriptorSetAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkImageCopy2Annotation>(lib));
addAnnotation(make_smart<VkCopyImageInfo2Annotation>(lib));
addAnnotation(make_smart<VkCopyImageToBufferInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkCopyImageToImageInfoAnnotation>(lib));
addAnnotation(make_smart<VkImageToMemoryCopyAnnotation>(lib));
addAnnotation(make_smart<VkCopyImageToMemoryInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_copy_memory_indirect)
addAnnotation(make_smart<VkCopyMemoryIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkCopyMemoryToAccelerationStructureInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_copy_memory_indirect)
addAnnotation(make_smart<VkCopyMemoryToImageIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkMemoryToImageCopyAnnotation>(lib));
addAnnotation(make_smart<VkCopyMemoryToImageInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<VkCopyMemoryToMicromapInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkCopyMicromapInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkCopyMicromapToMemoryInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NVX_binary_import)
addAnnotation(make_smart<VkCuFunctionCreateInfoNVXAnnotation>(lib));
addAnnotation(make_smart<VkCuLaunchInfoNVXAnnotation>(lib));
addAnnotation(make_smart<VkCuModuleCreateInfoNVXAnnotation>(lib));
addAnnotation(make_smart<VkCuModuleTexturingModeCreateInfoNVXAnnotation>(lib));
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NV_cuda_kernel_launch)
addAnnotation(make_smart<VkCudaFunctionCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkCudaLaunchInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkCudaModuleCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_KHR_external_semaphore_win32)
addAnnotation(make_smart<VkD3D12FenceSubmitInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_EXT_debug_marker)
addAnnotation(make_smart<VkDebugMarkerMarkerInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugMarkerObjectNameInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugMarkerObjectTagInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_EXT_debug_report)
addAnnotation(make_smart<VkDebugReportCallbackCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_EXT_debug_utils)
addAnnotation(make_smart<VkDebugUtilsLabelEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugUtilsObjectNameInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugUtilsMessengerCallbackDataEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugUtilsMessengerCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDebugUtilsObjectTagInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_NV_memory_decompression)
addAnnotation(make_smart<VkDecompressMemoryRegionNVAnnotation>(lib));
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_dedicated_allocation)
addAnnotation(make_smart<VkDedicatedAllocationBufferCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkDedicatedAllocationImageCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkDedicatedAllocationMemoryAllocateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_dedicated_allocation) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageSubresourceRangeAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkImageMemoryBarrier2Annotation>(lib));
addAnnotation(make_smart<VkMemoryBarrier2Annotation>(lib));
addAnnotation(make_smart<VkDependencyInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_depth_bias_control)
addAnnotation(make_smart<VkDepthBiasInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDepthBiasRepresentationInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_depth_clamp_control)
addAnnotation(make_smart<VkDepthClampRangeEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkDescriptorAddressInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorBufferBindingInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorBufferBindingPushDescriptorBufferHandleEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDescriptorBufferInfoAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorImageInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkDescriptorDataEXTAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorGetInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDescriptorPoolSizeAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorPoolCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkDescriptorPoolInlineUniformBlockCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDescriptorSetAllocateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
addAnnotation(make_smart<VkDescriptorSetBindingReferenceVALVEAnnotation>(lib));
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDescriptorSetLayoutBindingAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDescriptorSetLayoutCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
addAnnotation(make_smart<VkDescriptorSetLayoutHostMappingInfoVALVEAnnotation>(lib));
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkDescriptorSetLayoutSupportAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkDescriptorUpdateTemplateEntryAnnotation>(lib));
addAnnotation(make_smart<VkDescriptorUpdateTemplateCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_address_binding_report)
addAnnotation(make_smart<VkDeviceAddressBindingCallbackDataEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_address_binding_report) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkDeviceBufferMemoryRequirementsAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDeviceQueueCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkDeviceCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_memory_report)
addAnnotation(make_smart<VkDeviceDeviceMemoryReportCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_NV_device_diagnostics_config)
addAnnotation(make_smart<VkDeviceDiagnosticsConfigCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostics_config) */
#if defined(VK_EXT_display_control)
addAnnotation(make_smart<VkDeviceEventInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_EXT_device_fault)
addAnnotation(make_smart<VkDeviceFaultAddressInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDeviceFaultCountsEXTAnnotation>(lib));
addAnnotation(make_smart<VkDeviceFaultVendorInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDeviceFaultInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkDeviceFaultVendorBinaryHeaderVersionOneEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkDeviceGroupBindSparseInfoAnnotation>(lib));
addAnnotation(make_smart<VkDeviceGroupCommandBufferBeginInfoAnnotation>(lib));
addAnnotation(make_smart<VkDeviceGroupDeviceCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkDeviceGroupPresentCapabilitiesKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkDeviceGroupPresentInfoKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkDeviceGroupRenderPassBeginInfoAnnotation>(lib));
addAnnotation(make_smart<VkDeviceGroupSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkDeviceGroupSwapchainCreateInfoKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkDeviceImageMemoryRequirementsAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkImageSubresource2Annotation>(lib));
addAnnotation(make_smart<VkDeviceImageSubresourceInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_AMD_memory_overallocation_behavior)
addAnnotation(make_smart<VkDeviceMemoryOverallocationCreateInfoAMDAnnotation>(lib));
#endif /* defined(VK_AMD_memory_overallocation_behavior) */
#if defined(VK_EXT_device_memory_report)
addAnnotation(make_smart<VkDeviceMemoryReportCallbackDataEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_AMDX_shader_enqueue)
addAnnotation(make_smart<VkDeviceOrHostAddressConstAMDXAnnotation>(lib));
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_KHR_pipeline_binary)
addAnnotation(make_smart<VkDevicePipelineBinaryInternalCacheControlKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkDevicePrivateDataCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkDeviceQueueGlobalPriorityCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkDeviceQueueInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ARM_scheduling_controls)
addAnnotation(make_smart<VkDeviceQueueShaderCoreControlCreateInfoARMAnnotation>(lib));
#endif /* defined(VK_ARM_scheduling_controls) */
#if defined(VK_LUNARG_direct_driver_loading)
addAnnotation(make_smart<VkDirectDriverLoadingInfoLUNARGAnnotation>(lib));
addAnnotation(make_smart<VkDirectDriverLoadingListLUNARGAnnotation>(lib));
#endif /* defined(VK_LUNARG_direct_driver_loading) */
#if defined(VK_EXT_directfb_surface)
addAnnotation(make_smart<VkDirectFBSurfaceCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_AMDX_shader_enqueue)
addAnnotation(make_smart<VkDispatchGraphCountInfoAMDXAnnotation>(lib));
addAnnotation(make_smart<VkDispatchGraphInfoAMDXAnnotation>(lib));
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDispatchIndirectCommandAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_display_control)
addAnnotation(make_smart<VkDisplayEventInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<VkDisplayModeParametersKHRAnnotation>(lib));
addAnnotation(make_smart<VkDisplayModeCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkDisplayModePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
addAnnotation(make_smart<VkDisplayModeProperties2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_NV_display_stereo)
addAnnotation(make_smart<VkDisplayModeStereoPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_display_stereo) */
#if defined(VK_AMD_display_native_hdr)
addAnnotation(make_smart<VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<VkDisplayPlaneCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
addAnnotation(make_smart<VkDisplayPlaneCapabilities2KHRAnnotation>(lib));
addAnnotation(make_smart<VkDisplayPlaneInfo2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<VkDisplayPlanePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
addAnnotation(make_smart<VkDisplayPlaneProperties2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_EXT_display_control)
addAnnotation(make_smart<VkDisplayPowerInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_display_swapchain)
addAnnotation(make_smart<VkDisplayPresentInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<VkDisplayPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_get_display_properties2)
addAnnotation(make_smart<VkDisplayProperties2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_KHR_display)
addAnnotation(make_smart<VkDisplaySurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_display) */
#if defined(VK_NV_display_stereo)
addAnnotation(make_smart<VkDisplaySurfaceStereoCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_display_stereo) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkDrawIndexedIndirectCommandAnnotation>(lib));
addAnnotation(make_smart<VkDrawIndirectCommandAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkDrawIndirectCountIndirectCommandEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_EXT_mesh_shader)
addAnnotation(make_smart<VkDrawMeshTasksIndirectCommandEXTAnnotation>(lib));
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
addAnnotation(make_smart<VkDrawMeshTasksIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
addAnnotation(make_smart<VkDrmFormatModifierProperties2EXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_EXT_image_drm_format_modifier)
addAnnotation(make_smart<VkDrmFormatModifierPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3))
addAnnotation(make_smart<VkDrmFormatModifierPropertiesList2EXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) && (defined(VK_KHR_format_feature_flags2) || defined(VK_VERSION_1_3)) */
#if defined(VK_EXT_image_drm_format_modifier)
addAnnotation(make_smart<VkDrmFormatModifierPropertiesListEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkEventCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_pipeline_library)
addAnnotation(make_smart<VkPipelineLibraryCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_library) */
#if defined(VK_AMDX_shader_enqueue)
addAnnotation(make_smart<VkExecutionGraphPipelineCreateInfoAMDXAnnotation>(lib));
addAnnotation(make_smart<VkExecutionGraphPipelineScratchSizeAMDXAnnotation>(lib));
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExportFenceCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_fence_win32)
addAnnotation(make_smart<VkExportFenceWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExportMemoryAllocateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NV_external_memory)
addAnnotation(make_smart<VkExportMemoryAllocateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory) */
#if defined(VK_KHR_external_memory_win32)
addAnnotation(make_smart<VkExportMemoryWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_NV_external_memory_win32)
addAnnotation(make_smart<VkExportMemoryWin32HandleInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_EXT_metal_objects)
addAnnotation(make_smart<VkExportMetalBufferInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalCommandQueueInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalDeviceInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalIOSurfaceInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalObjectCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalObjectsInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalSharedEventInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkExportMetalTextureInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExportSemaphoreCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_semaphore_win32)
addAnnotation(make_smart<VkExportSemaphoreWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkExtensionPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExternalMemoryPropertiesAnnotation>(lib));
addAnnotation(make_smart<VkExternalBufferPropertiesAnnotation>(lib));
addAnnotation(make_smart<VkExternalFencePropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
addAnnotation(make_smart<VkExternalFormatANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_QNX_external_memory_screen_buffer)
addAnnotation(make_smart<VkExternalFormatQNXAnnotation>(lib));
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExternalImageFormatPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageFormatPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_external_memory_capabilities)
addAnnotation(make_smart<VkExternalImageFormatPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_EXT_external_memory_acquire_unmodified)
addAnnotation(make_smart<VkExternalMemoryAcquireUnmodifiedEXTAnnotation>(lib));
#endif /* defined(VK_EXT_external_memory_acquire_unmodified) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExternalMemoryBufferCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkExternalMemoryImageCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NV_external_memory)
addAnnotation(make_smart<VkExternalMemoryImageCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkExternalSemaphorePropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkFenceCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_external_fence_fd)
addAnnotation(make_smart<VkFenceGetFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
addAnnotation(make_smart<VkFenceGetWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_EXT_filter_cubic)
addAnnotation(make_smart<VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_filter_cubic) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkFormatPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkFormatProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkFormatProperties3Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_fragment_shading_rate)
addAnnotation(make_smart<VkFragmentShadingRateAttachmentInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_frame_boundary)
addAnnotation(make_smart<VkFrameBoundaryEXTAnnotation>(lib));
#endif /* defined(VK_EXT_frame_boundary) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkFramebufferAttachmentImageInfoAnnotation>(lib));
addAnnotation(make_smart<VkFramebufferAttachmentsCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkFramebufferCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_coverage_reduction_mode)
addAnnotation(make_smart<VkFramebufferMixedSamplesCombinationNVAnnotation>(lib));
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkGeneratedCommandsInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkIndirectCommandsStreamNVAnnotation>(lib));
addAnnotation(make_smart<VkGeneratedCommandsInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkGeneratedCommandsMemoryRequirementsInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkGeneratedCommandsPipelineInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkGeneratedCommandsShaderInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_low_latency2)
addAnnotation(make_smart<VkLatencyTimingsFrameReportNVAnnotation>(lib));
addAnnotation(make_smart<VkGetLatencyMarkerInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPipelineTessellationStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkVertexInputAttributeDescriptionAnnotation>(lib));
addAnnotation(make_smart<VkVertexInputBindingDescriptionAnnotation>(lib));
addAnnotation(make_smart<VkPipelineVertexInputStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineColorBlendAttachmentStateAnnotation>(lib));
addAnnotation(make_smart<VkPipelineColorBlendStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkStencilOpStateAnnotation>(lib));
addAnnotation(make_smart<VkPipelineDepthStencilStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineDynamicStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineInputAssemblyStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineMultisampleStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineRasterizationStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineViewportStateCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkGraphicsPipelineCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_graphics_pipeline_library)
addAnnotation(make_smart<VkGraphicsPipelineLibraryCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_graphics_pipeline_library) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkGraphicsShaderGroupCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_hdr_metadata)
addAnnotation(make_smart<VkXYColorEXTAnnotation>(lib));
addAnnotation(make_smart<VkHdrMetadataEXTAnnotation>(lib));
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_HUAWEI_hdr_vivid)
addAnnotation(make_smart<VkHdrVividDynamicMetadataHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_hdr_vivid) */
#if defined(VK_EXT_headless_surface)
addAnnotation(make_smart<VkHeadlessSurfaceCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkHostImageCopyDevicePerformanceQueryAnnotation>(lib));
addAnnotation(make_smart<VkHostImageLayoutTransitionInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_MVK_ios_surface)
addAnnotation(make_smart<VkIOSSurfaceCreateInfoMVKAnnotation>(lib));
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MESA_image_alignment_control)
addAnnotation(make_smart<VkImageAlignmentControlCreateInfoMESAAnnotation>(lib));
#endif /* defined(VK_MESA_image_alignment_control) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageBlitAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkImageCaptureDescriptorDataInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_EXT_image_compression_control)
addAnnotation(make_smart<VkImageCompressionControlEXTAnnotation>(lib));
addAnnotation(make_smart<VkImageCompressionPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_compression_control) */
#if defined(VK_FUCHSIA_buffer_collection)
addAnnotation(make_smart<VkImageFormatConstraintsInfoFUCHSIAAnnotation>(lib));
addAnnotation(make_smart<VkImageConstraintsInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageCopyAnnotation>(lib));
addAnnotation(make_smart<VkSubresourceLayoutAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_image_drm_format_modifier)
addAnnotation(make_smart<VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkImageDrmFormatModifierListCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkImageDrmFormatModifierPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkImageFormatListCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkImageFormatProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageMemoryBarrierAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkImageMemoryRequirementsInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_FUCHSIA_imagepipe_surface)
addAnnotation(make_smart<VkImagePipeSurfaceCreateInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkImagePlaneMemoryRequirementsInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageResolveAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkImageResolve2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkImageSparseMemoryRequirementsInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkImageStencilUsageCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1))
addAnnotation(make_smart<VkImageSwapchainCreateInfoKHRAnnotation>(lib));
#endif /* (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) || (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) */
#if defined(VK_EXT_astc_decode_mode)
addAnnotation(make_smart<VkImageViewASTCDecodeModeEXTAnnotation>(lib));
#endif /* defined(VK_EXT_astc_decode_mode) */
#if defined(VK_NVX_image_view_handle)
addAnnotation(make_smart<VkImageViewAddressPropertiesNVXAnnotation>(lib));
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkImageViewCaptureDescriptorDataInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkImageViewCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NVX_image_view_handle)
addAnnotation(make_smart<VkImageViewHandleInfoNVXAnnotation>(lib));
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_EXT_image_view_min_lod)
addAnnotation(make_smart<VkImageViewMinLodCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_view_min_lod) */
#if defined(VK_QCOM_image_processing)
addAnnotation(make_smart<VkImageViewSampleWeightCreateInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_image_processing) */
#if defined(VK_EXT_image_sliced_view_of_3d)
addAnnotation(make_smart<VkImageViewSlicedCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_sliced_view_of_3d) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkImageViewUsageCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
addAnnotation(make_smart<VkImportAndroidHardwareBufferInfoANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_external_fence_fd)
addAnnotation(make_smart<VkImportFenceFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_external_fence_win32)
addAnnotation(make_smart<VkImportFenceWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_FUCHSIA_buffer_collection)
addAnnotation(make_smart<VkImportMemoryBufferCollectionFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_KHR_external_memory_fd)
addAnnotation(make_smart<VkImportMemoryFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_EXT_external_memory_host)
addAnnotation(make_smart<VkImportMemoryHostPointerInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_KHR_external_memory_win32)
addAnnotation(make_smart<VkImportMemoryWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_NV_external_memory_win32)
addAnnotation(make_smart<VkImportMemoryWin32HandleInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
addAnnotation(make_smart<VkImportMemoryZirconHandleInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_EXT_metal_objects)
addAnnotation(make_smart<VkImportMetalBufferInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkImportMetalIOSurfaceInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkImportMetalSharedEventInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkImportMetalTextureInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_QNX_external_memory_screen_buffer)
addAnnotation(make_smart<VkImportScreenBufferInfoQNXAnnotation>(lib));
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_KHR_external_semaphore_fd)
addAnnotation(make_smart<VkImportSemaphoreFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
addAnnotation(make_smart<VkImportSemaphoreWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_FUCHSIA_external_semaphore)
addAnnotation(make_smart<VkImportSemaphoreZirconHandleInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkIndirectCommandsExecutionSetTokenEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsIndexBufferTokenEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPushConstantRangeAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkIndirectCommandsPushConstantTokenEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsVertexBufferTokenEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsTokenDataEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsLayoutTokenEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsLayoutCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkIndirectCommandsLayoutTokenNVAnnotation>(lib));
addAnnotation(make_smart<VkIndirectCommandsLayoutCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkIndirectExecutionSetPipelineInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectExecutionSetShaderLayoutInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectExecutionSetShaderInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectExecutionSetInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkIndirectExecutionSetCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<VkInitializePerformanceApiInfoINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkInputAttachmentAspectReferenceAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkInstanceCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_NV_low_latency2)
addAnnotation(make_smart<VkLatencySleepInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkLatencySleepModeInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkLatencySubmissionPresentIdNVAnnotation>(lib));
addAnnotation(make_smart<VkLatencySurfaceCapabilitiesNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkLayerPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_layer_settings)
addAnnotation(make_smart<VkLayerSettingEXTAnnotation>(lib));
addAnnotation(make_smart<VkLayerSettingsCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_layer_settings) */
#if defined(VK_MVK_macos_surface)
addAnnotation(make_smart<VkMacOSSurfaceCreateInfoMVKAnnotation>(lib));
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkMappedMemoryRangeAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkMemoryAllocateFlagsInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkMemoryAllocateInfoAnnotation>(lib));
addAnnotation(make_smart<VkMemoryBarrierAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkMemoryDedicatedAllocateInfoAnnotation>(lib));
addAnnotation(make_smart<VkMemoryDedicatedRequirementsAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_external_memory_fd)
addAnnotation(make_smart<VkMemoryFdPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
addAnnotation(make_smart<VkMemoryGetAndroidHardwareBufferInfoANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_KHR_external_memory_fd)
addAnnotation(make_smart<VkMemoryGetFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_NV_external_memory_rdma)
addAnnotation(make_smart<VkMemoryGetRemoteAddressInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_KHR_external_memory_win32)
addAnnotation(make_smart<VkMemoryGetWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
addAnnotation(make_smart<VkMemoryGetZirconHandleInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkMemoryHeapAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_external_memory_host)
addAnnotation(make_smart<VkMemoryHostPointerPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkMemoryMapInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_map_memory_placed)
addAnnotation(make_smart<VkMemoryMapPlacedInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_map_memory_placed) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_memory_priority)
addAnnotation(make_smart<VkMemoryPriorityAllocateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_memory_priority) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkMemoryRequirementsAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkMemoryRequirements2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkMemoryTypeAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkMemoryUnmapInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_external_memory_win32)
addAnnotation(make_smart<VkMemoryWin32HandlePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_FUCHSIA_external_memory)
addAnnotation(make_smart<VkMemoryZirconHandlePropertiesFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_EXT_metal_surface)
addAnnotation(make_smart<VkMetalSurfaceCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<VkMicromapBuildInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkMicromapBuildSizesInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkMicromapCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkMicromapTriangleEXTAnnotation>(lib));
addAnnotation(make_smart<VkMicromapVersionInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_EXT_multi_draw)
addAnnotation(make_smart<VkMultiDrawIndexedInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkMultiDrawInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_sample_locations)
addAnnotation(make_smart<VkMultisamplePropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
addAnnotation(make_smart<VkMultisampledRenderToSingleSampledInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_NVX_multiview_per_view_attributes) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
addAnnotation(make_smart<VkMultiviewPerViewAttributesInfoNVXAnnotation>(lib));
#endif /* defined(VK_NVX_multiview_per_view_attributes) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_QCOM_multiview_per_view_render_areas)
addAnnotation(make_smart<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_multiview_per_view_render_areas) */
#if defined(VK_EXT_mutable_descriptor_type)
addAnnotation(make_smart<VkMutableDescriptorTypeListEXTAnnotation>(lib));
addAnnotation(make_smart<VkMutableDescriptorTypeCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_mutable_descriptor_type) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkOpaqueCaptureDescriptorDataCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_NV_optical_flow)
addAnnotation(make_smart<VkOpticalFlowExecuteInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkOpticalFlowImageFormatInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkOpticalFlowImageFormatPropertiesNVAnnotation>(lib));
addAnnotation(make_smart<VkOpticalFlowSessionCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkOpticalFlowSessionCreatePrivateDataInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_NV_low_latency2)
addAnnotation(make_smart<VkOutOfBandQueueTypeInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_GOOGLE_display_timing)
addAnnotation(make_smart<VkPastPresentationTimingGOOGLEAnnotation>(lib));
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<VkPerformanceConfigurationAcquireInfoINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_performance_query)
addAnnotation(make_smart<VkPerformanceCounterDescriptionKHRAnnotation>(lib));
addAnnotation(make_smart<VkPerformanceCounterKHRAnnotation>(lib));
addAnnotation(make_smart<VkPerformanceCounterResultKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<VkPerformanceMarkerInfoINTELAnnotation>(lib));
addAnnotation(make_smart<VkPerformanceOverrideInfoINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_performance_query) && defined(VKSC_VERSION_1_0)
addAnnotation(make_smart<VkPerformanceQueryReservationInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) && defined(VKSC_VERSION_1_0) */
#if defined(VK_KHR_performance_query)
addAnnotation(make_smart<VkPerformanceQuerySubmitInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<VkPerformanceStreamMarkerInfoINTELAnnotation>(lib));
addAnnotation(make_smart<VkPerformanceValueDataINTELAnnotation>(lib));
addAnnotation(make_smart<VkPerformanceValueINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDevice16BitStorageFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_4444_formats)
addAnnotation(make_smart<VkPhysicalDevice4444FormatsFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_4444_formats) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDevice8BitStorageFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_astc_decode_mode)
addAnnotation(make_smart<VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_astc_decode_mode) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkPhysicalDeviceAccelerationStructureFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceAccelerationStructurePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_device_address_binding_report)
addAnnotation(make_smart<VkPhysicalDeviceAddressBindingReportFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_address_binding_report) */
#if defined(VK_SEC_amigo_profiling)
addAnnotation(make_smart<VkPhysicalDeviceAmigoProfilingFeaturesSECAnnotation>(lib));
#endif /* defined(VK_SEC_amigo_profiling) */
#if defined(VK_AMD_anti_lag)
addAnnotation(make_smart<VkPhysicalDeviceAntiLagFeaturesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_anti_lag) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
addAnnotation(make_smart<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_EXT_attachment_feedback_loop_layout)
addAnnotation(make_smart<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_attachment_feedback_loop_layout) */
#if defined(VK_EXT_blend_operation_advanced)
addAnnotation(make_smart<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_blend_operation_advanced) */
#if defined(VK_EXT_border_color_swizzle)
addAnnotation(make_smart<VkPhysicalDeviceBorderColorSwizzleFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_border_color_swizzle) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_buffer_device_address)
addAnnotation(make_smart<VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_HUAWEI_cluster_culling_shader)
addAnnotation(make_smart<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEIAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEIAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_AMD_device_coherent_memory)
addAnnotation(make_smart<VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_device_coherent_memory) */
#if defined(VK_EXT_color_write_enable)
addAnnotation(make_smart<VkPhysicalDeviceColorWriteEnableFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_NV_command_buffer_inheritance)
addAnnotation(make_smart<VkPhysicalDeviceCommandBufferInheritanceFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_command_buffer_inheritance) */
#if defined(VK_KHR_compute_shader_derivatives)
addAnnotation(make_smart<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_compute_shader_derivatives) */
#if defined(VK_EXT_conditional_rendering)
addAnnotation(make_smart<VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_EXT_conservative_rasterization)
addAnnotation(make_smart<VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_conservative_rasterization) */
#if defined(VK_NV_cooperative_matrix2)
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrix2FeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrix2PropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_cooperative_matrix2) */
#if defined(VK_KHR_cooperative_matrix)
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_KHR_cooperative_matrix)
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_cooperative_matrix) */
#if defined(VK_NV_cooperative_matrix)
addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_copy_memory_indirect)
addAnnotation(make_smart<VkPhysicalDeviceCopyMemoryIndirectFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceCopyMemoryIndirectPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_corner_sampled_image)
addAnnotation(make_smart<VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_corner_sampled_image) */
#if defined(VK_NV_coverage_reduction_mode)
addAnnotation(make_smart<VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_QCOM_filter_cubic_clamp)
addAnnotation(make_smart<VkPhysicalDeviceCubicClampFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_filter_cubic_clamp) */
#if defined(VK_QCOM_filter_cubic_weights)
addAnnotation(make_smart<VkPhysicalDeviceCubicWeightsFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_NV_cuda_kernel_launch)
addAnnotation(make_smart<VkPhysicalDeviceCudaKernelLaunchFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceCudaKernelLaunchPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_cuda_kernel_launch) */
#if defined(VK_EXT_custom_border_color)
addAnnotation(make_smart<VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_custom_border_color) */
#if defined(VK_NV_dedicated_allocation_image_aliasing)
addAnnotation(make_smart<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_dedicated_allocation_image_aliasing) */
#if defined(VK_EXT_depth_bias_control)
addAnnotation(make_smart<VkPhysicalDeviceDepthBiasControlFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_depth_clamp_control)
addAnnotation(make_smart<VkPhysicalDeviceDepthClampControlFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_depth_clamp_zero_one)
addAnnotation(make_smart<VkPhysicalDeviceDepthClampZeroOneFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clamp_zero_one) */
#if defined(VK_EXT_depth_clip_control)
addAnnotation(make_smart<VkPhysicalDeviceDepthClipControlFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clip_control) */
#if defined(VK_EXT_depth_clip_enable)
addAnnotation(make_smart<VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clip_enable) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceDescriptorBufferFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceDescriptorBufferPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_descriptor_pool_overallocation)
addAnnotation(make_smart<VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_descriptor_pool_overallocation) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
addAnnotation(make_smart<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVEAnnotation>(lib));
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_NV_device_generated_commands_compute)
addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_device_memory_report)
addAnnotation(make_smart<VkPhysicalDeviceDeviceMemoryReportFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_memory_report) */
#if defined(VK_NV_device_diagnostics_config)
addAnnotation(make_smart<VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostics_config) */
#if defined(VK_EXT_discard_rectangles)
addAnnotation(make_smart<VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_NV_displacement_micromap)
addAnnotation(make_smart<VkPhysicalDeviceDisplacementMicromapFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceDisplacementMicromapPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_displacement_micromap) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceDriverPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_physical_device_drm)
addAnnotation(make_smart<VkPhysicalDeviceDrmPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_physical_device_drm) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceDynamicRenderingFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceDynamicRenderingLocalReadFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_dynamic_rendering_unused_attachments)
addAnnotation(make_smart<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_dynamic_rendering_unused_attachments) */
#if defined(VK_NV_scissor_exclusive)
addAnnotation(make_smart<VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_EXT_extended_dynamic_state2)
addAnnotation(make_smart<VkPhysicalDeviceExtendedDynamicState2FeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_extended_dynamic_state2) */
#if defined(VK_EXT_extended_dynamic_state3)
addAnnotation(make_smart<VkPhysicalDeviceExtendedDynamicState3FeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceExtendedDynamicState3PropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_extended_dynamic_state3) */
#if defined(VK_EXT_extended_dynamic_state)
addAnnotation(make_smart<VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_extended_dynamic_state) */
#if defined(VK_NV_extended_sparse_address_space)
addAnnotation(make_smart<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_extended_sparse_address_space) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceExternalBufferInfoAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceExternalFenceInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_ANDROID_external_format_resolve)
addAnnotation(make_smart<VkPhysicalDeviceExternalFormatResolveFeaturesANDROIDAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceExternalFormatResolvePropertiesANDROIDAnnotation>(lib));
#endif /* defined(VK_ANDROID_external_format_resolve) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceExternalImageFormatInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_external_memory_host)
addAnnotation(make_smart<VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_NV_external_memory_rdma)
addAnnotation(make_smart<VkPhysicalDeviceExternalMemoryRDMAFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_QNX_external_memory_screen_buffer)
addAnnotation(make_smart<VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNXAnnotation>(lib));
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceExternalSemaphoreInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_device_fault)
addAnnotation(make_smart<VkPhysicalDeviceFaultFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceFeatures2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceFloatControlsPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_fragment_density_map2)
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_density_map2) */
#if defined(VK_EXT_fragment_density_map)
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_QCOM_fragment_density_map_offset)
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_fragment_density_map_offset) */
#if defined(VK_EXT_fragment_density_map)
addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_KHR_fragment_shader_barycentric)
addAnnotation(make_smart<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_fragment_shader_barycentric) */
#if defined(VK_EXT_fragment_shader_interlock)
addAnnotation(make_smart<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_shader_interlock) */
#if defined(VK_NV_fragment_shading_rate_enums)
addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_KHR_fragment_shading_rate)
addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_frame_boundary)
addAnnotation(make_smart<VkPhysicalDeviceFrameBoundaryFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_frame_boundary) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceGlobalPriorityQueryFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_graphics_pipeline_library)
addAnnotation(make_smart<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_graphics_pipeline_library) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceGroupPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_HUAWEI_hdr_vivid)
addAnnotation(make_smart<VkPhysicalDeviceHdrVividFeaturesHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_hdr_vivid) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceHostImageCopyFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceHostImageCopyPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceHostQueryResetFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceIDPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_image_2d_view_of_3d)
addAnnotation(make_smart<VkPhysicalDeviceImage2DViewOf3DFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_2d_view_of_3d) */
#if defined(VK_MESA_image_alignment_control)
addAnnotation(make_smart<VkPhysicalDeviceImageAlignmentControlFeaturesMESAAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceImageAlignmentControlPropertiesMESAAnnotation>(lib));
#endif /* defined(VK_MESA_image_alignment_control) */
#if defined(VK_EXT_image_compression_control)
addAnnotation(make_smart<VkPhysicalDeviceImageCompressionControlFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_compression_control) */
#if defined(VK_EXT_image_compression_control_swapchain)
addAnnotation(make_smart<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_compression_control_swapchain) */
#if defined(VK_EXT_image_drm_format_modifier)
addAnnotation(make_smart<VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceImageFormatInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_QCOM_image_processing2)
addAnnotation(make_smart<VkPhysicalDeviceImageProcessing2FeaturesQCOMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceImageProcessing2PropertiesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_image_processing2) */
#if defined(VK_QCOM_image_processing)
addAnnotation(make_smart<VkPhysicalDeviceImageProcessingFeaturesQCOMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceImageProcessingPropertiesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_image_processing) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceImageRobustnessFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_image_sliced_view_of_3d)
addAnnotation(make_smart<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_sliced_view_of_3d) */
#if defined(VK_EXT_filter_cubic)
addAnnotation(make_smart<VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_filter_cubic) */
#if defined(VK_EXT_image_view_min_lod)
addAnnotation(make_smart<VkPhysicalDeviceImageViewMinLodFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_image_view_min_lod) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceIndexTypeUint8FeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_inherited_viewport_scissor)
addAnnotation(make_smart<VkPhysicalDeviceInheritedViewportScissorFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_inherited_viewport_scissor) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceInlineUniformBlockFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceInlineUniformBlockPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_HUAWEI_invocation_mask)
addAnnotation(make_smart<VkPhysicalDeviceInvocationMaskFeaturesHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_KHR_maintenance7)
addAnnotation(make_smart<VkPhysicalDeviceLayeredApiPropertiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceLayeredApiPropertiesListKHRAnnotation>(lib));
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPhysicalDeviceLimitsAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceSparsePropertiesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_maintenance7)
addAnnotation(make_smart<VkPhysicalDeviceLayeredApiVulkanPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_MSFT_layered_driver)
addAnnotation(make_smart<VkPhysicalDeviceLayeredDriverPropertiesMSFTAnnotation>(lib));
#endif /* defined(VK_MSFT_layered_driver) */
#if defined(VK_EXT_legacy_dithering)
addAnnotation(make_smart<VkPhysicalDeviceLegacyDitheringFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_legacy_dithering) */
#if defined(VK_EXT_legacy_vertex_attributes)
addAnnotation(make_smart<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_legacy_vertex_attributes) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceLineRasterizationFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceLineRasterizationPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_linear_color_attachment)
addAnnotation(make_smart<VkPhysicalDeviceLinearColorAttachmentFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_linear_color_attachment) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceMaintenance3PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceMaintenance4FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMaintenance4PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceMaintenance5FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMaintenance5PropertiesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMaintenance6FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMaintenance6PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_maintenance7)
addAnnotation(make_smart<VkPhysicalDeviceMaintenance7FeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMaintenance7PropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_maintenance7) */
#if defined(VK_EXT_map_memory_placed)
addAnnotation(make_smart<VkPhysicalDeviceMapMemoryPlacedFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMapMemoryPlacedPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_map_memory_placed) */
#if defined(VK_EXT_memory_budget)
addAnnotation(make_smart<VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_memory_budget) */
#if defined(VK_NV_memory_decompression)
addAnnotation(make_smart<VkPhysicalDeviceMemoryDecompressionFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMemoryDecompressionPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_EXT_memory_priority)
addAnnotation(make_smart<VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_memory_priority) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPhysicalDeviceMemoryPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceMemoryProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_mesh_shader)
addAnnotation(make_smart<VkPhysicalDeviceMeshShaderFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
addAnnotation(make_smart<VkPhysicalDeviceMeshShaderFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_mesh_shader)
addAnnotation(make_smart<VkPhysicalDeviceMeshShaderPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_NV_mesh_shader)
addAnnotation(make_smart<VkPhysicalDeviceMeshShaderPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_EXT_multi_draw)
addAnnotation(make_smart<VkPhysicalDeviceMultiDrawFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceMultiDrawPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
addAnnotation(make_smart<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceMultiviewFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_NVX_multiview_per_view_attributes)
addAnnotation(make_smart<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation>(lib));
#endif /* defined(VK_NVX_multiview_per_view_attributes) */
#if defined(VK_QCOM_multiview_per_view_render_areas)
addAnnotation(make_smart<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_multiview_per_view_render_areas) */
#if defined(VK_QCOM_multiview_per_view_viewports)
addAnnotation(make_smart<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_multiview_per_view_viewports) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceMultiviewPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_mutable_descriptor_type)
addAnnotation(make_smart<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_mutable_descriptor_type) */
#if defined(VK_EXT_nested_command_buffer)
addAnnotation(make_smart<VkPhysicalDeviceNestedCommandBufferFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceNestedCommandBufferPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_nested_command_buffer) */
#if defined(VK_EXT_non_seamless_cube_map)
addAnnotation(make_smart<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_non_seamless_cube_map) */
#if defined(VK_EXT_opacity_micromap)
addAnnotation(make_smart<VkPhysicalDeviceOpacityMicromapFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceOpacityMicromapPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_NV_optical_flow)
addAnnotation(make_smart<VkPhysicalDeviceOpticalFlowFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceOpticalFlowPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_EXT_pci_bus_info)
addAnnotation(make_smart<VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_pci_bus_info) */
#if defined(VK_EXT_pageable_device_local_memory)
addAnnotation(make_smart<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_NV_per_stage_descriptor_set)
addAnnotation(make_smart<VkPhysicalDevicePerStageDescriptorSetFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_per_stage_descriptor_set) */
#if defined(VK_KHR_performance_query)
addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_pipeline_binary)
addAnnotation(make_smart<VkPhysicalDevicePipelineBinaryFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePipelineBinaryPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDevicePipelineCreationCacheControlFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_pipeline_executable_properties)
addAnnotation(make_smart<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_EXT_pipeline_library_group_handles)
addAnnotation(make_smart<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_pipeline_library_group_handles) */
#if defined(VK_EXT_pipeline_properties)
addAnnotation(make_smart<VkPhysicalDevicePipelinePropertiesFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDevicePipelineProtectedAccessFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePipelineRobustnessFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePipelineRobustnessPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDevicePointClippingPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_portability_subset)
addAnnotation(make_smart<VkPhysicalDevicePortabilitySubsetFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDevicePortabilitySubsetPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_portability_subset) */
#if defined(VK_NV_present_barrier)
addAnnotation(make_smart<VkPhysicalDevicePresentBarrierFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_KHR_present_id)
addAnnotation(make_smart<VkPhysicalDevicePresentIdFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_present_id) */
#if defined(VK_EXT_present_mode_fifo_latest_ready)
addAnnotation(make_smart<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_present_mode_fifo_latest_ready) */
#if defined(VK_KHR_present_wait)
addAnnotation(make_smart<VkPhysicalDevicePresentWaitFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_EXT_primitive_topology_list_restart)
addAnnotation(make_smart<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_primitive_topology_list_restart) */
#if defined(VK_EXT_primitives_generated_query)
addAnnotation(make_smart<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_primitives_generated_query) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDevicePrivateDataFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceProtectedMemoryFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceProtectedMemoryPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_provoking_vertex)
addAnnotation(make_smart<VkPhysicalDeviceProvokingVertexFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceProvokingVertexPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_provoking_vertex) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDevicePushDescriptorPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_rgba10x6_formats)
addAnnotation(make_smart<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_rgba10x6_formats) */
#if defined(VK_EXT_rasterization_order_attachment_access)
addAnnotation(make_smart<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_rasterization_order_attachment_access) */
#if defined(VK_NV_raw_access_chains)
addAnnotation(make_smart<VkPhysicalDeviceRawAccessChainsFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_raw_access_chains) */
#if defined(VK_KHR_ray_query)
addAnnotation(make_smart<VkPhysicalDeviceRayQueryFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_query) */
#if defined(VK_NV_ray_tracing_invocation_reorder)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_invocation_reorder) */
#if defined(VK_KHR_ray_tracing_maintenance1)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_maintenance1) */
#if defined(VK_NV_ray_tracing_motion_blur)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingMotionBlurFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_KHR_ray_tracing_pipeline)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingPipelineFeaturesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceRayTracingPipelinePropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_position_fetch)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_position_fetch) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_NV_ray_tracing_validation)
addAnnotation(make_smart<VkPhysicalDeviceRayTracingValidationFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_validation) */
#if defined(VK_IMG_relaxed_line_rasterization)
addAnnotation(make_smart<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMGAnnotation>(lib));
#endif /* defined(VK_IMG_relaxed_line_rasterization) */
#if defined(VK_ARM_render_pass_striped)
addAnnotation(make_smart<VkPhysicalDeviceRenderPassStripedFeaturesARMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceRenderPassStripedPropertiesARMAnnotation>(lib));
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_NV_representative_fragment_test)
addAnnotation(make_smart<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_representative_fragment_test) */
#if defined(VK_EXT_robustness2)
addAnnotation(make_smart<VkPhysicalDeviceRobustness2FeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceRobustness2PropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_robustness2) */
#if defined(VK_EXT_sample_locations)
addAnnotation(make_smart<VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_ARM_scheduling_controls)
addAnnotation(make_smart<VkPhysicalDeviceSchedulingControlsFeaturesARMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceSchedulingControlsPropertiesARMAnnotation>(lib));
#endif /* defined(VK_ARM_scheduling_controls) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_NV_shader_atomic_float16_vector)
addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_shader_atomic_float16_vector) */
#if defined(VK_EXT_shader_atomic_float2)
addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_atomic_float2) */
#if defined(VK_EXT_shader_atomic_float)
addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_atomic_float) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_shader_clock)
addAnnotation(make_smart<VkPhysicalDeviceShaderClockFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shader_clock) */
#if defined(VK_ARM_shader_core_builtins)
addAnnotation(make_smart<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARMAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARMAnnotation>(lib));
#endif /* defined(VK_ARM_shader_core_builtins) */
#if defined(VK_AMD_shader_core_properties2)
addAnnotation(make_smart<VkPhysicalDeviceShaderCoreProperties2AMDAnnotation>(lib));
#endif /* defined(VK_AMD_shader_core_properties2) */
#if defined(VK_AMD_shader_core_properties)
addAnnotation(make_smart<VkPhysicalDeviceShaderCorePropertiesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_shader_core_properties) */
#if defined(VK_ARM_shader_core_properties)
addAnnotation(make_smart<VkPhysicalDeviceShaderCorePropertiesARMAnnotation>(lib));
#endif /* defined(VK_ARM_shader_core_properties) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_AMD_shader_early_and_late_fragment_tests)
addAnnotation(make_smart<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_shader_early_and_late_fragment_tests) */
#if defined(VK_AMDX_shader_enqueue)
addAnnotation(make_smart<VkPhysicalDeviceShaderEnqueueFeaturesAMDXAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderEnqueuePropertiesAMDXAnnotation>(lib));
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceShaderExpectAssumeFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceShaderFloatControls2FeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_shader_image_atomic_int64)
addAnnotation(make_smart<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_image_atomic_int64) */
#if defined(VK_NV_shader_image_footprint)
addAnnotation(make_smart<VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation>(lib));
#endif /* defined(VK_NV_shader_image_footprint) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceShaderIntegerDotProductFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderIntegerDotProductPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_INTEL_shader_integer_functions2)
addAnnotation(make_smart<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_shader_integer_functions2) */
#if defined(VK_KHR_shader_maximal_reconvergence)
addAnnotation(make_smart<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shader_maximal_reconvergence) */
#if defined(VK_EXT_shader_module_identifier)
addAnnotation(make_smart<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_shader_object)
addAnnotation(make_smart<VkPhysicalDeviceShaderObjectFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderObjectPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_KHR_shader_quad_control)
addAnnotation(make_smart<VkPhysicalDeviceShaderQuadControlFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shader_quad_control) */
#if defined(VK_KHR_shader_relaxed_extended_instruction)
addAnnotation(make_smart<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shader_relaxed_extended_instruction) */
#if defined(VK_EXT_shader_replicated_composites)
addAnnotation(make_smart<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_replicated_composites) */
#if defined(VK_NV_shader_sm_builtins)
addAnnotation(make_smart<VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_shader_sm_builtins) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceShaderSubgroupRotateFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_KHR_shader_subgroup_uniform_control_flow)
addAnnotation(make_smart<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shader_subgroup_uniform_control_flow) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceShaderTerminateInvocationFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_shader_tile_image)
addAnnotation(make_smart<VkPhysicalDeviceShaderTileImageFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShaderTileImagePropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_tile_image) */
#if defined(VK_NV_shading_rate_image)
addAnnotation(make_smart<VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceSparseImageFormatInfo2Annotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceSubgroupPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceSubgroupSizeControlFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceSubgroupSizeControlPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_subpass_merge_feedback)
addAnnotation(make_smart<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_HUAWEI_subpass_shading)
addAnnotation(make_smart<VkPhysicalDeviceSubpassShadingFeaturesHUAWEIAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceSubpassShadingPropertiesHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_KHR_get_surface_capabilities2)
addAnnotation(make_smart<VkPhysicalDeviceSurfaceInfo2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_swapchain_maintenance1)
addAnnotation(make_smart<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceSynchronization2FeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_texel_buffer_alignment)
addAnnotation(make_smart<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_texel_buffer_alignment) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceTexelBufferAlignmentPropertiesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_QCOM_tile_properties)
addAnnotation(make_smart<VkPhysicalDeviceTilePropertiesFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceToolPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_transform_feedback)
addAnnotation(make_smart<VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPhysicalDeviceVariablePointersFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeDivisorFeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeDivisorPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_vertex_attribute_divisor)
addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_vertex_attribute_divisor) */
#if defined(VK_EXT_vertex_attribute_robustness)
addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_vertex_attribute_robustness) */
#if defined(VK_EXT_vertex_input_dynamic_state)
addAnnotation(make_smart<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_vertex_input_dynamic_state) */
#if defined(VK_KHR_video_encode_av1)
addAnnotation(make_smart<VkPhysicalDeviceVideoEncodeAV1FeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkVideoProfileInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_queue)
addAnnotation(make_smart<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
addAnnotation(make_smart<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkPhysicalDeviceVideoFormatInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_maintenance1)
addAnnotation(make_smart<VkPhysicalDeviceVideoMaintenance1FeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_maintenance1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceVulkan11FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVulkan11PropertiesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVulkan12FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVulkan12PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceVulkan13FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVulkan13PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPhysicalDeviceVulkan14FeaturesAnnotation>(lib));
addAnnotation(make_smart<VkPhysicalDeviceVulkan14PropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_workgroup_memory_explicit_layout)
addAnnotation(make_smart<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_workgroup_memory_explicit_layout) */
#if defined(VK_EXT_ycbcr_2plane_444_formats)
addAnnotation(make_smart<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_ycbcr_2plane_444_formats) */
#if defined(VK_QCOM_ycbcr_degamma)
addAnnotation(make_smart<VkPhysicalDeviceYcbcrDegammaFeaturesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_ycbcr_degamma) */
#if defined(VK_EXT_ycbcr_image_arrays)
addAnnotation(make_smart<VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_ycbcr_image_arrays) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_pipeline_binary)
addAnnotation(make_smart<VkPipelineBinaryDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryKeyKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryKeysAndDataKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryDataInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryHandlesInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineBinaryInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPipelineCacheCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkPipelineCacheHeaderVersionOneAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_blend_operation_advanced)
addAnnotation(make_smart<VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_blend_operation_advanced) */
#if defined(VK_EXT_color_write_enable)
addAnnotation(make_smart<VkPipelineColorWriteCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_AMD_pipeline_compiler_control)
addAnnotation(make_smart<VkPipelineCompilerControlCreateInfoAMDAnnotation>(lib));
#endif /* defined(VK_AMD_pipeline_compiler_control) */
#if defined(VK_NV_framebuffer_mixed_samples)
addAnnotation(make_smart<VkPipelineCoverageModulationStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_framebuffer_mixed_samples) */
#if defined(VK_NV_coverage_reduction_mode)
addAnnotation(make_smart<VkPipelineCoverageReductionStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_NV_fragment_coverage_to_color)
addAnnotation(make_smart<VkPipelineCoverageToColorStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_fragment_coverage_to_color) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPipelineCreateFlags2CreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPipelineCreationFeedbackAnnotation>(lib));
addAnnotation(make_smart<VkPipelineCreationFeedbackCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_discard_rectangles)
addAnnotation(make_smart<VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_KHR_pipeline_executable_properties)
addAnnotation(make_smart<VkPipelineExecutableInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineExecutableInternalRepresentationKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineExecutablePropertiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineExecutableStatisticValueKHRAnnotation>(lib));
addAnnotation(make_smart<VkPipelineExecutableStatisticKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_NV_fragment_shading_rate_enums)
addAnnotation(make_smart<VkPipelineFragmentShadingRateEnumStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_KHR_fragment_shading_rate)
addAnnotation(make_smart<VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_NV_device_generated_commands_compute)
addAnnotation(make_smart<VkPipelineIndirectDeviceAddressInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_KHR_pipeline_executable_properties)
addAnnotation(make_smart<VkPipelineInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkPipelineLayoutCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_pipeline_properties)
addAnnotation(make_smart<VkPipelinePropertiesIdentifierEXTAnnotation>(lib));
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_EXT_conservative_rasterization)
addAnnotation(make_smart<VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_conservative_rasterization) */
#if defined(VK_EXT_depth_clip_enable)
addAnnotation(make_smart<VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clip_enable) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPipelineRasterizationLineStateCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_provoking_vertex)
addAnnotation(make_smart<VkPipelineRasterizationProvokingVertexStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_provoking_vertex) */
#if defined(VK_AMD_rasterization_order)
addAnnotation(make_smart<VkPipelineRasterizationStateRasterizationOrderAMDAnnotation>(lib));
#endif /* defined(VK_AMD_rasterization_order) */
#if defined(VK_EXT_transform_feedback)
addAnnotation(make_smart<VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPipelineRenderingCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_NV_representative_fragment_test)
addAnnotation(make_smart<VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_representative_fragment_test) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPipelineRobustnessCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_sample_locations)
addAnnotation(make_smart<VkPipelineSampleLocationsStateCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_shader_module_identifier)
addAnnotation(make_smart<VkPipelineShaderStageModuleIdentifierCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_AMDX_shader_enqueue)
addAnnotation(make_smart<VkPipelineShaderStageNodeCreateInfoAMDXAnnotation>(lib));
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkPipelineTessellationDomainOriginStateCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkVertexInputBindingDivisorDescriptionAnnotation>(lib));
addAnnotation(make_smart<VkPipelineVertexInputDivisorStateCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_shading_rate_image)
addAnnotation(make_smart<VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_EXT_depth_clamp_control)
addAnnotation(make_smart<VkPipelineViewportDepthClampControlCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clamp_control) */
#if defined(VK_EXT_depth_clip_control)
addAnnotation(make_smart<VkPipelineViewportDepthClipControlCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_depth_clip_control) */
#if defined(VK_NV_scissor_exclusive)
addAnnotation(make_smart<VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_shading_rate_image)
addAnnotation(make_smart<VkShadingRatePaletteNVAnnotation>(lib));
addAnnotation(make_smart<VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_NV_viewport_swizzle)
addAnnotation(make_smart<VkViewportSwizzleNVAnnotation>(lib));
addAnnotation(make_smart<VkPipelineViewportSwizzleStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_viewport_swizzle) */
#if defined(VK_NV_clip_space_w_scaling)
addAnnotation(make_smart<VkViewportWScalingNVAnnotation>(lib));
addAnnotation(make_smart<VkPipelineViewportWScalingStateCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_GGP_frame_token)
addAnnotation(make_smart<VkPresentFrameTokenGGPAnnotation>(lib));
#endif /* defined(VK_GGP_frame_token) */
#if defined(VK_KHR_present_id)
addAnnotation(make_smart<VkPresentIdKHRAnnotation>(lib));
#endif /* defined(VK_KHR_present_id) */
#if defined(VK_KHR_swapchain)
addAnnotation(make_smart<VkPresentInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_KHR_incremental_present)
addAnnotation(make_smart<VkRectLayerKHRAnnotation>(lib));
addAnnotation(make_smart<VkPresentRegionKHRAnnotation>(lib));
addAnnotation(make_smart<VkPresentRegionsKHRAnnotation>(lib));
#endif /* defined(VK_KHR_incremental_present) */
#if defined(VK_GOOGLE_display_timing)
addAnnotation(make_smart<VkPresentTimeGOOGLEAnnotation>(lib));
addAnnotation(make_smart<VkPresentTimesInfoGOOGLEAnnotation>(lib));
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkPrivateDataSlotCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkProtectedSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPushConstantsInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkWriteDescriptorSetAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkPushDescriptorSetInfoAnnotation>(lib));
addAnnotation(make_smart<VkPushDescriptorSetWithTemplateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_NV_low_latency)
addAnnotation(make_smart<VkQueryLowLatencySupportNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkQueryPoolCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_performance_query)
addAnnotation(make_smart<VkQueryPoolPerformanceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_INTEL_performance_query)
addAnnotation(make_smart<VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation>(lib));
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_KHR_video_encode_queue)
addAnnotation(make_smart<VkQueryPoolVideoEncodeFeedbackCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2))
addAnnotation(make_smart<VkQueueFamilyCheckpointProperties2NVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_VERSION_1_3) || defined(VK_KHR_synchronization2)) */
#if defined(VK_NV_device_diagnostic_checkpoints)
addAnnotation(make_smart<VkQueueFamilyCheckpointPropertiesNVAnnotation>(lib));
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkQueueFamilyGlobalPriorityPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkQueueFamilyPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkQueueFamilyProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkQueueFamilyQueryResultStatusPropertiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkQueueFamilyVideoPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_ray_tracing_pipeline)
addAnnotation(make_smart<VkRayTracingPipelineInterfaceCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkRayTracingShaderGroupCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkRayTracingPipelineCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkRayTracingShaderGroupCreateInfoNVAnnotation>(lib));
addAnnotation(make_smart<VkRayTracingPipelineCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_GOOGLE_display_timing)
addAnnotation(make_smart<VkRefreshCycleDurationGOOGLEAnnotation>(lib));
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_KHR_pipeline_binary)
addAnnotation(make_smart<VkReleaseCapturedPipelineDataInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_pipeline_binary) */
#if defined(VK_EXT_swapchain_maintenance1)
addAnnotation(make_smart<VkReleaseSwapchainImagesInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkRenderPassAttachmentBeginInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkRenderPassBeginInfoAnnotation>(lib));
addAnnotation(make_smart<VkSubpassDependencyAnnotation>(lib));
addAnnotation(make_smart<VkSubpassDescriptionAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkSubpassDependency2Annotation>(lib));
addAnnotation(make_smart<VkSubpassDescription2Annotation>(lib));
addAnnotation(make_smart<VkRenderPassCreateInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_EXT_subpass_merge_feedback)
addAnnotation(make_smart<VkRenderPassCreationControlEXTAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassCreationFeedbackInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassCreationFeedbackCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_EXT_fragment_density_map)
addAnnotation(make_smart<VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_density_map) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkRenderPassInputAttachmentAspectCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassMultiviewCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_EXT_sample_locations)
addAnnotation(make_smart<VkSubpassSampleLocationsEXTAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassSampleLocationsBeginInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_ARM_render_pass_striped)
addAnnotation(make_smart<VkRenderPassStripeInfoARMAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassStripeBeginInfoARMAnnotation>(lib));
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkSemaphoreSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_ARM_render_pass_striped)
addAnnotation(make_smart<VkRenderPassStripeSubmitInfoARMAnnotation>(lib));
#endif /* defined(VK_ARM_render_pass_striped) */
#if defined(VK_EXT_subpass_merge_feedback)
addAnnotation(make_smart<VkRenderPassSubpassFeedbackInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkRenderPassSubpassFeedbackCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_subpass_merge_feedback) */
#if defined(VK_QCOM_render_pass_transform)
addAnnotation(make_smart<VkRenderPassTransformBeginInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_render_pass_transform) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkRenderingAreaInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkRenderingAttachmentInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkRenderingAttachmentLocationInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_fragment_density_map) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
addAnnotation(make_smart<VkRenderingFragmentDensityMapAttachmentInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_fragment_density_map) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_KHR_fragment_shading_rate) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering))
addAnnotation(make_smart<VkRenderingFragmentShadingRateAttachmentInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_fragment_shading_rate) && (defined(VK_VERSION_1_3) || defined(VK_KHR_dynamic_rendering)) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkRenderingInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkRenderingInputAttachmentIndexInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkResolveImageInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_NV_ray_tracing_motion_blur)
addAnnotation(make_smart<VkSRTDataNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing_motion_blur) */
#if defined(VK_QCOM_image_processing2)
addAnnotation(make_smart<VkSamplerBlockMatchWindowCreateInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_image_processing2) */
#if defined(VK_EXT_border_color_swizzle)
addAnnotation(make_smart<VkSamplerBorderColorComponentMappingCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_border_color_swizzle) */
#if defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkSamplerCaptureDescriptorDataInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_descriptor_buffer) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSamplerCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_QCOM_filter_cubic_weights)
addAnnotation(make_smart<VkSamplerCubicWeightsCreateInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_filter_cubic_weights) */
#if defined(VK_EXT_custom_border_color)
addAnnotation(make_smart<VkSamplerCustomBorderColorCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_custom_border_color) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkSamplerReductionModeCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkSamplerYcbcrConversionCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkSamplerYcbcrConversionImageFormatPropertiesAnnotation>(lib));
addAnnotation(make_smart<VkSamplerYcbcrConversionInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_QCOM_ycbcr_degamma)
addAnnotation(make_smart<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_ycbcr_degamma) */
#if defined(VK_QNX_external_memory_screen_buffer)
addAnnotation(make_smart<VkScreenBufferFormatPropertiesQNXAnnotation>(lib));
addAnnotation(make_smart<VkScreenBufferPropertiesQNXAnnotation>(lib));
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
#if defined(VK_QNX_screen_surface)
addAnnotation(make_smart<VkScreenSurfaceCreateInfoQNXAnnotation>(lib));
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSemaphoreCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_KHR_external_semaphore_fd)
addAnnotation(make_smart<VkSemaphoreGetFdInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_external_semaphore_win32)
addAnnotation(make_smart<VkSemaphoreGetWin32HandleInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_FUCHSIA_external_semaphore)
addAnnotation(make_smart<VkSemaphoreGetZirconHandleInfoFUCHSIAAnnotation>(lib));
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkSemaphoreSignalInfoAnnotation>(lib));
addAnnotation(make_smart<VkSemaphoreTypeCreateInfoAnnotation>(lib));
addAnnotation(make_smart<VkSemaphoreWaitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer)
addAnnotation(make_smart<VkSetDescriptorBufferOffsetsInfoEXTAnnotation>(lib));
#endif /* defined(VK_KHR_maintenance6) && defined(VK_EXT_descriptor_buffer) */
#if defined(VK_NV_low_latency2)
addAnnotation(make_smart<VkSetLatencyMarkerInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_device_generated_commands)
addAnnotation(make_smart<VkSetStateFlagsIndirectCommandNVAnnotation>(lib));
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_shader_object)
addAnnotation(make_smart<VkShaderCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkShaderModuleCreateInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_EXT_shader_module_identifier)
addAnnotation(make_smart<VkShaderModuleIdentifierEXTAnnotation>(lib));
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_EXT_validation_cache)
addAnnotation(make_smart<VkShaderModuleValidationCacheCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_AMD_shader_info)
addAnnotation(make_smart<VkShaderResourceUsageAMDAnnotation>(lib));
addAnnotation(make_smart<VkShaderStatisticsInfoAMDAnnotation>(lib));
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_KHR_shared_presentable_image)
addAnnotation(make_smart<VkSharedPresentSurfaceCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSparseImageFormatPropertiesAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkSparseImageFormatProperties2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSparseImageMemoryRequirementsAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
addAnnotation(make_smart<VkSparseImageMemoryRequirements2Annotation>(lib));
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_GGP_stream_descriptor_surface)
addAnnotation(make_smart<VkStreamDescriptorSurfaceCreateInfoGGPAnnotation>(lib));
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_KHR_ray_tracing_pipeline)
addAnnotation(make_smart<VkStridedDeviceAddressRegionKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_VERSION_1_0)
addAnnotation(make_smart<VkSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkSubmitInfo2Annotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkSubpassBeginInfoAnnotation>(lib));
addAnnotation(make_smart<VkSubpassDescriptionDepthStencilResolveAnnotation>(lib));
addAnnotation(make_smart<VkSubpassEndInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_QCOM_fragment_density_map_offset)
addAnnotation(make_smart<VkSubpassFragmentDensityMapOffsetEndInfoQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_fragment_density_map_offset) */
#if defined(VK_EXT_multisampled_render_to_single_sampled)
addAnnotation(make_smart<VkSubpassResolvePerformanceQueryEXTAnnotation>(lib));
#endif /* defined(VK_EXT_multisampled_render_to_single_sampled) */
#if defined(VK_HUAWEI_subpass_shading)
addAnnotation(make_smart<VkSubpassShadingPipelineCreateInfoHUAWEIAnnotation>(lib));
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_VERSION_1_4)
addAnnotation(make_smart<VkSubresourceHostMemcpySizeAnnotation>(lib));
addAnnotation(make_smart<VkSubresourceLayout2Annotation>(lib));
#endif /* defined(VK_VERSION_1_4) */
#if defined(VK_EXT_display_surface_counter)
addAnnotation(make_smart<VkSurfaceCapabilities2EXTAnnotation>(lib));
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_KHR_surface)
addAnnotation(make_smart<VkSurfaceCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_get_surface_capabilities2)
addAnnotation(make_smart<VkSurfaceCapabilities2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_full_screen_exclusive)
addAnnotation(make_smart<VkSurfaceCapabilitiesFullScreenExclusiveEXTAnnotation>(lib));
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_NV_present_barrier)
addAnnotation(make_smart<VkSurfaceCapabilitiesPresentBarrierNVAnnotation>(lib));
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_KHR_surface)
addAnnotation(make_smart<VkSurfaceFormatKHRAnnotation>(lib));
#endif /* defined(VK_KHR_surface) */
#if defined(VK_KHR_get_surface_capabilities2)
addAnnotation(make_smart<VkSurfaceFormat2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_EXT_full_screen_exclusive)
addAnnotation(make_smart<VkSurfaceFullScreenExclusiveInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_win32_surface)
addAnnotation(make_smart<VkSurfaceFullScreenExclusiveWin32InfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_win32_surface) */
#if defined(VK_EXT_surface_maintenance1)
addAnnotation(make_smart<VkSurfacePresentModeCompatibilityEXTAnnotation>(lib));
addAnnotation(make_smart<VkSurfacePresentModeEXTAnnotation>(lib));
addAnnotation(make_smart<VkSurfacePresentScalingCapabilitiesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_surface_maintenance1) */
#if defined(VK_KHR_surface_protected_capabilities)
addAnnotation(make_smart<VkSurfaceProtectedCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_surface_protected_capabilities) */
#if defined(VK_EXT_display_control)
addAnnotation(make_smart<VkSwapchainCounterCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_KHR_swapchain)
addAnnotation(make_smart<VkSwapchainCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_swapchain) */
#if defined(VK_AMD_display_native_hdr)
addAnnotation(make_smart<VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation>(lib));
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_NV_low_latency2)
addAnnotation(make_smart<VkSwapchainLatencyCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_low_latency2) */
#if defined(VK_NV_present_barrier)
addAnnotation(make_smart<VkSwapchainPresentBarrierCreateInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_present_barrier) */
#if defined(VK_EXT_swapchain_maintenance1)
addAnnotation(make_smart<VkSwapchainPresentFenceInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkSwapchainPresentModeInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkSwapchainPresentModesCreateInfoEXTAnnotation>(lib));
addAnnotation(make_smart<VkSwapchainPresentScalingCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_AMD_texture_gather_bias_lod)
addAnnotation(make_smart<VkTextureLODGatherFormatPropertiesAMDAnnotation>(lib));
#endif /* defined(VK_AMD_texture_gather_bias_lod) */
#if defined(VK_QCOM_tile_properties)
addAnnotation(make_smart<VkTilePropertiesQCOMAnnotation>(lib));
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_VERSION_1_2)
addAnnotation(make_smart<VkTimelineSemaphoreSubmitInfoAnnotation>(lib));
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
addAnnotation(make_smart<VkTraceRaysIndirectCommand2KHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_ray_tracing_pipeline)
addAnnotation(make_smart<VkTraceRaysIndirectCommandKHRAnnotation>(lib));
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkTransformMatrixKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_EXT_validation_cache)
addAnnotation(make_smart<VkValidationCacheCreateInfoEXTAnnotation>(lib));
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_EXT_validation_features)
addAnnotation(make_smart<VkValidationFeaturesEXTAnnotation>(lib));
#endif /* defined(VK_EXT_validation_features) */
#if defined(VK_EXT_validation_flags)
addAnnotation(make_smart<VkValidationFlagsEXTAnnotation>(lib));
#endif /* defined(VK_EXT_validation_flags) */
#if (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state))
addAnnotation(make_smart<VkVertexInputAttributeDescription2EXTAnnotation>(lib));
addAnnotation(make_smart<VkVertexInputBindingDescription2EXTAnnotation>(lib));
#endif /* (defined(VK_EXT_shader_object)) || (defined(VK_EXT_vertex_input_dynamic_state)) */
#if defined(VK_NN_vi_surface)
addAnnotation(make_smart<VkViSurfaceCreateInfoNNAnnotation>(lib));
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkVideoPictureResourceInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoReferenceSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoBeginCodingInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoCapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoCodingControlInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_decode_av1)
addAnnotation(make_smart<VkVideoDecodeAV1CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeAV1DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeAV1PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeAV1ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeAV1SessionParametersCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_decode_av1) */
#if defined(VK_KHR_video_decode_queue)
addAnnotation(make_smart<VkVideoDecodeCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_decode_h264)
addAnnotation(make_smart<VkVideoDecodeH264CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH264DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH264PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH264ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH264SessionParametersAddInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH264SessionParametersCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_decode_h264) */
#if defined(VK_KHR_video_decode_h265)
addAnnotation(make_smart<VkVideoDecodeH265CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH265DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH265PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH265ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH265SessionParametersAddInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeH265SessionParametersCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_decode_h265) */
#if defined(VK_KHR_video_decode_queue)
addAnnotation(make_smart<VkVideoDecodeInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoDecodeUsageInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_KHR_video_encode_av1)
addAnnotation(make_smart<VkVideoEncodeAV1CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1FrameSizeKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1GopRemainingFrameInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1QIndexKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1QualityLevelPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1)
addAnnotation(make_smart<VkVideoEncodeAV1QuantizationMapCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_av1)
addAnnotation(make_smart<VkVideoEncodeAV1RateControlInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1RateControlLayerInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1SessionCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeAV1SessionParametersCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_queue)
addAnnotation(make_smart<VkVideoEncodeCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_h264)
addAnnotation(make_smart<VkVideoEncodeH264CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264FrameSizeKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264GopRemainingFrameInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264NaluSliceInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264QpKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264QualityLevelPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h264)
addAnnotation(make_smart<VkVideoEncodeH264QuantizationMapCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_h264)
addAnnotation(make_smart<VkVideoEncodeH264RateControlInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264RateControlLayerInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264SessionCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264SessionParametersAddInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264SessionParametersCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264SessionParametersFeedbackInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH264SessionParametersGetInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_h264) */
#if defined(VK_KHR_video_encode_h265)
addAnnotation(make_smart<VkVideoEncodeH265CapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265DpbSlotInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265FrameSizeKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265GopRemainingFrameInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265NaluSliceSegmentInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265PictureInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265ProfileInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265QpKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265QualityLevelPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265)
addAnnotation(make_smart<VkVideoEncodeH265QuantizationMapCapabilitiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_h265)
addAnnotation(make_smart<VkVideoEncodeH265RateControlInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265RateControlLayerInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265SessionCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265SessionParametersAddInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265SessionParametersCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265SessionParametersFeedbackInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeH265SessionParametersGetInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_encode_queue)
addAnnotation(make_smart<VkVideoEncodeInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeQualityLevelInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeQualityLevelPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
addAnnotation(make_smart<VkVideoEncodeQuantizationMapCapabilitiesKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeQuantizationMapInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_encode_queue)
addAnnotation(make_smart<VkVideoEncodeRateControlLayerInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeRateControlInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeSessionParametersFeedbackInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeSessionParametersGetInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoEncodeUsageInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkVideoEndCodingInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1)
addAnnotation(make_smart<VkVideoFormatAV1QuantizationMapPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_av1) */
#if defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265)
addAnnotation(make_smart<VkVideoFormatH265QuantizationMapPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) && defined(VK_KHR_video_encode_h265) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkVideoFormatPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_encode_quantization_map)
addAnnotation(make_smart<VkVideoFormatQuantizationMapPropertiesKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_encode_quantization_map) */
#if defined(VK_KHR_video_maintenance1)
addAnnotation(make_smart<VkVideoInlineQueryInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_maintenance1) */
#if defined(VK_KHR_video_queue)
addAnnotation(make_smart<VkVideoProfileListInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoSessionCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoSessionMemoryRequirementsKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoSessionParametersCreateInfoKHRAnnotation>(lib));
addAnnotation(make_smart<VkVideoSessionParametersUpdateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_wayland_surface)
addAnnotation(make_smart<VkWaylandSurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_win32_keyed_mutex)
addAnnotation(make_smart<VkWin32KeyedMutexAcquireReleaseInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_win32_keyed_mutex) */
#if defined(VK_NV_win32_keyed_mutex)
addAnnotation(make_smart<VkWin32KeyedMutexAcquireReleaseInfoNVAnnotation>(lib));
#endif /* defined(VK_NV_win32_keyed_mutex) */
#if defined(VK_KHR_win32_surface)
addAnnotation(make_smart<VkWin32SurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_KHR_acceleration_structure)
addAnnotation(make_smart<VkWriteDescriptorSetAccelerationStructureKHRAnnotation>(lib));
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_NV_ray_tracing)
addAnnotation(make_smart<VkWriteDescriptorSetAccelerationStructureNVAnnotation>(lib));
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_VERSION_1_3)
addAnnotation(make_smart<VkWriteDescriptorSetInlineUniformBlockAnnotation>(lib));
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_EXT_device_generated_commands)
addAnnotation(make_smart<VkWriteIndirectExecutionSetPipelineEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) */
#if defined(VK_EXT_device_generated_commands) && defined(VK_EXT_shader_object)
addAnnotation(make_smart<VkWriteIndirectExecutionSetShaderEXTAnnotation>(lib));
#endif /* defined(VK_EXT_device_generated_commands) && defined(VK_EXT_shader_object) */
#if defined(VK_KHR_xcb_surface)
addAnnotation(make_smart<VkXcbSurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_xlib_surface)
addAnnotation(make_smart<VkXlibSurfaceCreateInfoKHRAnnotation>(lib));
#endif /* defined(VK_KHR_xlib_surface) */
  /* VOLK_GENERATE_BIND_ANN */
}

}
